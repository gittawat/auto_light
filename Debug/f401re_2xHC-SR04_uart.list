
f401re_2xHC-SR04_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800474c  0800474c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004754  08004754  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004754  08004754  00014754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800475c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  080047cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080047cc  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cce5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f3  00000000  00000000  0002cd85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002f330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015784  00000000  00000000  0002fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c978  00000000  00000000  000455d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b21a  00000000  00000000  00051f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003684  00000000  00000000  000dd1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046cc 	.word	0x080046cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080046cc 	.word	0x080046cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <notify>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void notify(GPIO_PinState PinState){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	480a      	ldr	r0, [pc, #40]	; (8000d98 <notify+0x38>)
 8000d70:	f001 f9d8 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, PinState);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	461a      	mov	r2, r3
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4807      	ldr	r0, [pc, #28]	; (8000d98 <notify+0x38>)
 8000d7c:	f001 f9d2 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d80:	200a      	movs	r0, #10
 8000d82:	f000 ff15 	bl	8001bb0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4803      	ldr	r0, [pc, #12]	; (8000d98 <notify+0x38>)
 8000d8c:	f001 f9ca 	bl	8002124 <HAL_GPIO_WritePin>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020000 	.word	0x40020000

08000d9c <delay>:
void delay(TIM_HandleTypeDef *htim, uint16_t time) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim) < time)
 8000db0:	bf00      	nop
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3f9      	bcc.n	8000db2 <delay+0x16>
		;
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	0000      	movs	r0, r0
	...

08000dd0 <HAL_TIM_IC_CaptureCallback>:
//#define TRIG_PIN GPIO_PIN_9
//#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a8e      	ldr	r2, [pc, #568]	; (8001018 <HAL_TIM_IC_CaptureCallback+0x248>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	f040 8088 	bne.w	8000ef4 <HAL_TIM_IC_CaptureCallback+0x124>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7f1b      	ldrb	r3, [r3, #28]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	f040 810a 	bne.w	8001002 <HAL_TIM_IC_CaptureCallback+0x232>
				{
			if (sensor1.Is_First_Captured == 0) // if the first value is not captured
 8000dee:	4b8b      	ldr	r3, [pc, #556]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000df0:	7d1b      	ldrb	r3, [r3, #20]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d11a      	bne.n	8000e2c <HAL_TIM_IC_CaptureCallback+0x5c>
					{
				sensor1.IC_Val1 = HAL_TIM_ReadCapturedValue(htim,
 8000df6:	2100      	movs	r1, #0
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f002 f953 	bl	80030a4 <HAL_TIM_ReadCapturedValue>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a86      	ldr	r2, [pc, #536]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e02:	60d3      	str	r3, [r2, #12]
						TIM_CHANNEL_1); // read the first value
				sensor1.Is_First_Captured = 1; // set the first captured as true
 8000e04:	4b85      	ldr	r3, [pc, #532]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	751a      	strb	r2, [r3, #20]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6a1a      	ldr	r2, [r3, #32]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 020a 	bic.w	r2, r2, #10
 8000e18:	621a      	str	r2, [r3, #32]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6a1a      	ldr	r2, [r3, #32]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 0202 	orr.w	r2, r2, #2
 8000e28:	621a      	str	r2, [r3, #32]
						TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
			}
		}
	}
}
 8000e2a:	e0ea      	b.n	8001002 <HAL_TIM_IC_CaptureCallback+0x232>
				sensor1.IC_Val2 = HAL_TIM_ReadCapturedValue(htim,
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f002 f938 	bl	80030a4 <HAL_TIM_ReadCapturedValue>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a79      	ldr	r2, [pc, #484]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e38:	6113      	str	r3, [r2, #16]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
				sensor1.Distance = ((sensor1.IC_Val2 - sensor1.IC_Val1)
 8000e42:	4b76      	ldr	r3, [pc, #472]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	4b75      	ldr	r3, [pc, #468]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	1ad3      	subs	r3, r2, r3
						* (sensor1.IC_Val2 > sensor1.IC_Val1)
 8000e4c:	4a73      	ldr	r2, [pc, #460]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e4e:	6911      	ldr	r1, [r2, #16]
 8000e50:	4a72      	ldr	r2, [pc, #456]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e52:	68d2      	ldr	r2, [r2, #12]
 8000e54:	4291      	cmp	r1, r2
 8000e56:	bf8c      	ite	hi
 8000e58:	2201      	movhi	r2, #1
 8000e5a:	2200      	movls	r2, #0
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	fb03 f202 	mul.w	r2, r3, r2
						+ ((0xffff - sensor1.IC_Val1) + sensor1.IC_Val2)
 8000e62:	4b6e      	ldr	r3, [pc, #440]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e64:	6919      	ldr	r1, [r3, #16]
 8000e66:	4b6d      	ldr	r3, [pc, #436]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	1acb      	subs	r3, r1, r3
 8000e6c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e70:	33ff      	adds	r3, #255	; 0xff
								* (sensor1.IC_Val1 > sensor1.IC_Val2)) * .034
 8000e72:	496a      	ldr	r1, [pc, #424]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e74:	68c8      	ldr	r0, [r1, #12]
 8000e76:	4969      	ldr	r1, [pc, #420]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000e78:	6909      	ldr	r1, [r1, #16]
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	bf8c      	ite	hi
 8000e7e:	2101      	movhi	r1, #1
 8000e80:	2100      	movls	r1, #0
 8000e82:	b2c9      	uxtb	r1, r1
 8000e84:	fb01 f303 	mul.w	r3, r1, r3
						+ ((0xffff - sensor1.IC_Val1) + sensor1.IC_Val2)
 8000e88:	4413      	add	r3, r2
								* (sensor1.IC_Val1 > sensor1.IC_Val2)) * .034
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb3a 	bl	8000504 <__aeabi_ui2d>
 8000e90:	a35f      	add	r3, pc, #380	; (adr r3, 8001010 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fbaf 	bl	80005f8 <__aeabi_dmul>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
						/ 2;
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eaa:	f7ff fccf 	bl	800084c <__aeabi_ddiv>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
				sensor1.Distance = ((sensor1.IC_Val2 - sensor1.IC_Val1)
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fdb1 	bl	8000a1c <__aeabi_d2uiz>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a57      	ldr	r2, [pc, #348]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000ebe:	6193      	str	r3, [r2, #24]
				sensor1.Is_First_Captured = 0; // set it back to false
 8000ec0:	4b56      	ldr	r3, [pc, #344]	; (800101c <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	751a      	strb	r2, [r3, #20]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a1a      	ldr	r2, [r3, #32]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 020a 	bic.w	r2, r2, #10
 8000ed4:	621a      	str	r2, [r3, #32]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6a12      	ldr	r2, [r2, #32]
 8000ee0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000ee2:	4b4f      	ldr	r3, [pc, #316]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	4b4d      	ldr	r3, [pc, #308]	; (8001020 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0202 	bic.w	r2, r2, #2
 8000ef0:	60da      	str	r2, [r3, #12]
}
 8000ef2:	e086      	b.n	8001002 <HAL_TIM_IC_CaptureCallback+0x232>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // if the interrupt source is channel1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7f1b      	ldrb	r3, [r3, #28]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	f040 8082 	bne.w	8001002 <HAL_TIM_IC_CaptureCallback+0x232>
			if (sensor2.Is_First_Captured == 0) // if the first value is not captured
 8000efe:	4b49      	ldr	r3, [pc, #292]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f00:	7d1b      	ldrb	r3, [r3, #20]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11a      	bne.n	8000f3c <HAL_TIM_IC_CaptureCallback+0x16c>
				sensor2.IC_Val1 = HAL_TIM_ReadCapturedValue(htim,
 8000f06:	2104      	movs	r1, #4
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f002 f8cb 	bl	80030a4 <HAL_TIM_ReadCapturedValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a44      	ldr	r2, [pc, #272]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f12:	60d3      	str	r3, [r2, #12]
				sensor2.Is_First_Captured = 1; // set the first captured as true
 8000f14:	4b43      	ldr	r3, [pc, #268]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	751a      	strb	r2, [r3, #20]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a1a      	ldr	r2, [r3, #32]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000f28:	621a      	str	r2, [r3, #32]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6a1a      	ldr	r2, [r3, #32]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 0220 	orr.w	r2, r2, #32
 8000f38:	621a      	str	r2, [r3, #32]
}
 8000f3a:	e062      	b.n	8001002 <HAL_TIM_IC_CaptureCallback+0x232>
				sensor2.IC_Val2 = HAL_TIM_ReadCapturedValue(htim,
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f002 f8b0 	bl	80030a4 <HAL_TIM_ReadCapturedValue>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a37      	ldr	r2, [pc, #220]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f48:	6113      	str	r3, [r2, #16]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
				sensor2.Distance = ((sensor2.IC_Val2 - sensor2.IC_Val1)
 8000f52:	4b34      	ldr	r3, [pc, #208]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f54:	691a      	ldr	r2, [r3, #16]
 8000f56:	4b33      	ldr	r3, [pc, #204]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	1ad3      	subs	r3, r2, r3
						* (sensor2.IC_Val2 > sensor2.IC_Val1)
 8000f5c:	4a31      	ldr	r2, [pc, #196]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f5e:	6911      	ldr	r1, [r2, #16]
 8000f60:	4a30      	ldr	r2, [pc, #192]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f62:	68d2      	ldr	r2, [r2, #12]
 8000f64:	4291      	cmp	r1, r2
 8000f66:	bf8c      	ite	hi
 8000f68:	2201      	movhi	r2, #1
 8000f6a:	2200      	movls	r2, #0
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	fb03 f202 	mul.w	r2, r3, r2
						+ ((0xffff - sensor2.IC_Val1) + sensor2.IC_Val2)
 8000f72:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f74:	6919      	ldr	r1, [r3, #16]
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	1acb      	subs	r3, r1, r3
 8000f7c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f80:	33ff      	adds	r3, #255	; 0xff
								* (sensor2.IC_Val1 > sensor2.IC_Val2)) * .034
 8000f82:	4928      	ldr	r1, [pc, #160]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f84:	68c8      	ldr	r0, [r1, #12]
 8000f86:	4927      	ldr	r1, [pc, #156]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000f88:	6909      	ldr	r1, [r1, #16]
 8000f8a:	4288      	cmp	r0, r1
 8000f8c:	bf8c      	ite	hi
 8000f8e:	2101      	movhi	r1, #1
 8000f90:	2100      	movls	r1, #0
 8000f92:	b2c9      	uxtb	r1, r1
 8000f94:	fb01 f303 	mul.w	r3, r1, r3
						+ ((0xffff - sensor2.IC_Val1) + sensor2.IC_Val2)
 8000f98:	4413      	add	r3, r2
								* (sensor2.IC_Val1 > sensor2.IC_Val2)) * .034
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fab2 	bl	8000504 <__aeabi_ui2d>
 8000fa0:	a31b      	add	r3, pc, #108	; (adr r3, 8001010 <HAL_TIM_IC_CaptureCallback+0x240>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fb27 	bl	80005f8 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
						/ 2;
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fba:	f7ff fc47 	bl	800084c <__aeabi_ddiv>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
				sensor2.Distance = ((sensor2.IC_Val2 - sensor2.IC_Val1)
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fd29 	bl	8000a1c <__aeabi_d2uiz>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a15      	ldr	r2, [pc, #84]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000fce:	6193      	str	r3, [r2, #24]
				sensor2.Is_First_Captured = 0; // set it back to false
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	751a      	strb	r2, [r3, #20]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a1a      	ldr	r2, [r3, #32]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000fe4:	621a      	str	r2, [r3, #32]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6a12      	ldr	r2, [r2, #32]
 8000ff0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0202 	bic.w	r2, r2, #2
 8001000:	60da      	str	r2, [r3, #12]
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	f3af 8000 	nop.w
 8001010:	b020c49c 	.word	0xb020c49c
 8001014:	3fa16872 	.word	0x3fa16872
 8001018:	40010000 	.word	0x40010000
 800101c:	200001a4 	.word	0x200001a4
 8001020:	2000008c 	.word	0x2000008c
 8001024:	200001c0 	.word	0x200001c0
 8001028:	200000d4 	.word	0x200000d4

0800102c <HCSR04_Read>:
void HCSR04_Read(HCSR04 *sensor) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->TRIG_PORT, sensor->TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	889b      	ldrh	r3, [r3, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	4619      	mov	r1, r3
 8001040:	f001 f870 	bl	8002124 <HAL_GPIO_WritePin>
	delay(sensor->htim, 10);  // wait for 10 us
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	210a      	movs	r1, #10
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fea6 	bl	8000d9c <delay>
	HAL_GPIO_WritePin(sensor->TRIG_PORT, sensor->TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	889b      	ldrh	r3, [r3, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	f001 f862 	bl	8002124 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HCSR04_Read+0x4c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <HCSR04_Read+0x4c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0202 	orr.w	r2, r2, #2
 800106e:	60da      	str	r2, [r3, #12]
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000008c 	.word	0x2000008c

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b092      	sub	sp, #72	; 0x48
 8001080:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f000 fd23 	bl	8001acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 f935 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f000 fa9b 	bl	80015c4 <MX_GPIO_Init>
  MX_TIM3_Init();
 800108e:	f000 f9f1 	bl	8001474 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001092:	f000 fa6d 	bl	8001570 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8001096:	f000 fa41 	bl	800151c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800109a:	f000 f995 	bl	80013c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	sensor1.TRIG_PORT = GPIOA;
 800109e:	4b8b      	ldr	r3, [pc, #556]	; (80012cc <main+0x250>)
 80010a0:	4a8b      	ldr	r2, [pc, #556]	; (80012d0 <main+0x254>)
 80010a2:	601a      	str	r2, [r3, #0]
	sensor1.TRIG_PIN = GPIO_PIN_9;
 80010a4:	4b89      	ldr	r3, [pc, #548]	; (80012cc <main+0x250>)
 80010a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010aa:	809a      	strh	r2, [r3, #4]
	sensor1.htim = &htim1;
 80010ac:	4b87      	ldr	r3, [pc, #540]	; (80012cc <main+0x250>)
 80010ae:	4a89      	ldr	r2, [pc, #548]	; (80012d4 <main+0x258>)
 80010b0:	609a      	str	r2, [r3, #8]
	sensor1.IC_Val1 = 0;
 80010b2:	4b86      	ldr	r3, [pc, #536]	; (80012cc <main+0x250>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
	sensor1.IC_Val2 = 0;
 80010b8:	4b84      	ldr	r3, [pc, #528]	; (80012cc <main+0x250>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
	sensor1.Is_First_Captured = 0;
 80010be:	4b83      	ldr	r3, [pc, #524]	; (80012cc <main+0x250>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	751a      	strb	r2, [r3, #20]
	sensor1.Distance = 0;
 80010c4:	4b81      	ldr	r3, [pc, #516]	; (80012cc <main+0x250>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]

	sensor2.TRIG_PORT = GPIOB;
 80010ca:	4b83      	ldr	r3, [pc, #524]	; (80012d8 <main+0x25c>)
 80010cc:	4a83      	ldr	r2, [pc, #524]	; (80012dc <main+0x260>)
 80010ce:	601a      	str	r2, [r3, #0]
	sensor2.TRIG_PIN = GPIO_PIN_4;
 80010d0:	4b81      	ldr	r3, [pc, #516]	; (80012d8 <main+0x25c>)
 80010d2:	2210      	movs	r2, #16
 80010d4:	809a      	strh	r2, [r3, #4]
	sensor2.htim = &htim3;
 80010d6:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <main+0x25c>)
 80010d8:	4a81      	ldr	r2, [pc, #516]	; (80012e0 <main+0x264>)
 80010da:	609a      	str	r2, [r3, #8]
	sensor2.IC_Val1 = 0;
 80010dc:	4b7e      	ldr	r3, [pc, #504]	; (80012d8 <main+0x25c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
	sensor2.IC_Val2 = 0;
 80010e2:	4b7d      	ldr	r3, [pc, #500]	; (80012d8 <main+0x25c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
	sensor2.Is_First_Captured = 0;
 80010e8:	4b7b      	ldr	r3, [pc, #492]	; (80012d8 <main+0x25c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	751a      	strb	r2, [r3, #20]
	sensor2.Distance = 0;
 80010ee:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <main+0x25c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]

	uint8_t data[32];
	uint8_t count[8];
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80010f4:	2100      	movs	r1, #0
 80010f6:	4877      	ldr	r0, [pc, #476]	; (80012d4 <main+0x258>)
 80010f8:	f001 fd16 	bl	8002b28 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80010fc:	2104      	movs	r1, #4
 80010fe:	4878      	ldr	r0, [pc, #480]	; (80012e0 <main+0x264>)
 8001100:	f001 fd12 	bl	8002b28 <HAL_TIM_IC_Start_IT>
	uint8_t reset_counter= 14;
 8001104:	230e      	movs	r3, #14
 8001106:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t human_counter = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t sensor1_trigger_first = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t sensor2_trigger_first = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(100);
 800111a:	2064      	movs	r0, #100	; 0x64
 800111c:	f000 fd48 	bl	8001bb0 <HAL_Delay>
		HCSR04_Read(&sensor1);
 8001120:	486a      	ldr	r0, [pc, #424]	; (80012cc <main+0x250>)
 8001122:	f7ff ff83 	bl	800102c <HCSR04_Read>
		HAL_Delay(20);
 8001126:	2014      	movs	r0, #20
 8001128:	f000 fd42 	bl	8001bb0 <HAL_Delay>
		HCSR04_Read(&sensor2);
 800112c:	486a      	ldr	r0, [pc, #424]	; (80012d8 <main+0x25c>)
 800112e:	f7ff ff7d 	bl	800102c <HCSR04_Read>
		HAL_Delay(20);
 8001132:	2014      	movs	r0, #20
 8001134:	f000 fd3c 	bl	8001bb0 <HAL_Delay>
		if(sensor1_trigger_first && !sensor2_trigger_first){
 8001138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800113c:	2b00      	cmp	r3, #0
 800113e:	d037      	beq.n	80011b0 <main+0x134>
 8001140:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001144:	2b00      	cmp	r3, #0
 8001146:	d133      	bne.n	80011b0 <main+0x134>
			reset_counter--;
 8001148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800114c:	3b01      	subs	r3, #1
 800114e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(sensor1.Distance > 50 && sensor2.Distance < 30){
 8001152:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <main+0x250>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2b32      	cmp	r3, #50	; 0x32
 8001158:	d91c      	bls.n	8001194 <main+0x118>
 800115a:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <main+0x25c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b1d      	cmp	r3, #29
 8001160:	d818      	bhi.n	8001194 <main+0x118>
				human_counter++;
 8001162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001164:	3301      	adds	r3, #1
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
				notify(GPIO_PIN_SET);
 8001168:	2001      	movs	r0, #1
 800116a:	f7ff fdf9 	bl	8000d60 <notify>
				HAL_UART_Transmit(&huart6, count,
						sprintf(count, "%d\n",1),
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2201      	movs	r2, #1
 8001172:	495c      	ldr	r1, [pc, #368]	; (80012e4 <main+0x268>)
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fe3b 	bl	8003df0 <siprintf>
 800117a:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart6, count,
 800117c:	b29a      	uxth	r2, r3
 800117e:	1d39      	adds	r1, r7, #4
 8001180:	2364      	movs	r3, #100	; 0x64
 8001182:	4859      	ldr	r0, [pc, #356]	; (80012e8 <main+0x26c>)
 8001184:	f002 fa8d 	bl	80036a2 <HAL_UART_Transmit>
						100);
				sensor1_trigger_first = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				sensor2_trigger_first = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			}
			if(reset_counter <= 0){
 8001194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001198:	2b00      	cmp	r3, #0
 800119a:	d17a      	bne.n	8001292 <main+0x216>
				reset_counter = 14;
 800119c:	230e      	movs	r3, #14
 800119e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				sensor1_trigger_first = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				sensor2_trigger_first = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if(reset_counter <= 0){
 80011ae:	e070      	b.n	8001292 <main+0x216>
			}
		}
		else if(sensor2_trigger_first && !sensor1_trigger_first){
 80011b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d037      	beq.n	8001228 <main+0x1ac>
 80011b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d133      	bne.n	8001228 <main+0x1ac>
			reset_counter--;
 80011c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011c4:	3b01      	subs	r3, #1
 80011c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(sensor2.Distance > 50 && sensor1.Distance < 30){
 80011ca:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <main+0x25c>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2b32      	cmp	r3, #50	; 0x32
 80011d0:	d91c      	bls.n	800120c <main+0x190>
 80011d2:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <main+0x250>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2b1d      	cmp	r3, #29
 80011d8:	d818      	bhi.n	800120c <main+0x190>
				human_counter--;
 80011da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011dc:	3b01      	subs	r3, #1
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
				notify(GPIO_PIN_RESET);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fdbd 	bl	8000d60 <notify>
				HAL_UART_Transmit(&huart6, count,
						sprintf(count, "%d\n",2),
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2202      	movs	r2, #2
 80011ea:	493e      	ldr	r1, [pc, #248]	; (80012e4 <main+0x268>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fdff 	bl	8003df0 <siprintf>
 80011f2:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart6, count,
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	1d39      	adds	r1, r7, #4
 80011f8:	2364      	movs	r3, #100	; 0x64
 80011fa:	483b      	ldr	r0, [pc, #236]	; (80012e8 <main+0x26c>)
 80011fc:	f002 fa51 	bl	80036a2 <HAL_UART_Transmit>
						100);
				sensor1_trigger_first = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				sensor2_trigger_first = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				}
			if(reset_counter <= 0){
 800120c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001210:	2b00      	cmp	r3, #0
 8001212:	d13e      	bne.n	8001292 <main+0x216>
				reset_counter = 6;
 8001214:	2306      	movs	r3, #6
 8001216:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				sensor1_trigger_first = 1;
 800121a:	2301      	movs	r3, #1
 800121c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				sensor2_trigger_first = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if(reset_counter <= 0){
 8001226:	e034      	b.n	8001292 <main+0x216>
			}
			}
		else if(!sensor1_trigger_first && !sensor2_trigger_first){
 8001228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800122c:	2b00      	cmp	r3, #0
 800122e:	d120      	bne.n	8001272 <main+0x1f6>
 8001230:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001234:	2b00      	cmp	r3, #0
 8001236:	d11c      	bne.n	8001272 <main+0x1f6>
			if(sensor1.Distance < 30 && sensor2.Distance > 50){
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <main+0x250>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	2b1d      	cmp	r3, #29
 800123e:	d809      	bhi.n	8001254 <main+0x1d8>
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <main+0x25c>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	2b32      	cmp	r3, #50	; 0x32
 8001246:	d905      	bls.n	8001254 <main+0x1d8>
			sensor1_trigger_first = 1;
 8001248:	2301      	movs	r3, #1
 800124a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			sensor2_trigger_first = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			}
			if(sensor2.Distance < 30 && sensor1.Distance > 50){
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <main+0x25c>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	2b1d      	cmp	r3, #29
 800125a:	d819      	bhi.n	8001290 <main+0x214>
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <main+0x250>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	2b32      	cmp	r3, #50	; 0x32
 8001262:	d915      	bls.n	8001290 <main+0x214>
			sensor1_trigger_first = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			sensor2_trigger_first = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			if(sensor2.Distance < 30 && sensor1.Distance > 50){
 8001270:	e00e      	b.n	8001290 <main+0x214>
			}
		}else{
			if(sensor2.Distance > 50 && sensor1.Distance > 50){
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <main+0x25c>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	2b32      	cmp	r3, #50	; 0x32
 8001278:	d90b      	bls.n	8001292 <main+0x216>
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <main+0x250>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	2b32      	cmp	r3, #50	; 0x32
 8001280:	d907      	bls.n	8001292 <main+0x216>
				sensor1_trigger_first = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				sensor2_trigger_first = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800128e:	e000      	b.n	8001292 <main+0x216>
			if(sensor2.Distance < 30 && sensor1.Distance > 50){
 8001290:	bf00      	nop
			}
		}


		HAL_UART_Transmit(&huart2, data,
				sprintf(data, "%d %d state: %d %d %d\n", sensor1.Distance, sensor2.Distance, sensor1_trigger_first,sensor2_trigger_first,human_counter),
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <main+0x250>)
 8001294:	699c      	ldr	r4, [r3, #24]
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <main+0x25c>)
 8001298:	699d      	ldr	r5, [r3, #24]
 800129a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800129e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80012a2:	f107 000c 	add.w	r0, r7, #12
 80012a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012a8:	9102      	str	r1, [sp, #8]
 80012aa:	9201      	str	r2, [sp, #4]
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	462b      	mov	r3, r5
 80012b0:	4622      	mov	r2, r4
 80012b2:	490e      	ldr	r1, [pc, #56]	; (80012ec <main+0x270>)
 80012b4:	f002 fd9c 	bl	8003df0 <siprintf>
 80012b8:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, data,
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 010c 	add.w	r1, r7, #12
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <main+0x274>)
 80012c4:	f002 f9ed 	bl	80036a2 <HAL_UART_Transmit>
	while (1) {
 80012c8:	e727      	b.n	800111a <main+0x9e>
 80012ca:	bf00      	nop
 80012cc:	200001a4 	.word	0x200001a4
 80012d0:	40020000 	.word	0x40020000
 80012d4:	2000008c 	.word	0x2000008c
 80012d8:	200001c0 	.word	0x200001c0
 80012dc:	40020400 	.word	0x40020400
 80012e0:	200000d4 	.word	0x200000d4
 80012e4:	080046e4 	.word	0x080046e4
 80012e8:	20000160 	.word	0x20000160
 80012ec:	080046e8 	.word	0x080046e8
 80012f0:	2000011c 	.word	0x2000011c

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2230      	movs	r2, #48	; 0x30
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fd6c 	bl	8003de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <SystemClock_Config+0xcc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <SystemClock_Config+0xcc>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <SystemClock_Config+0xcc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001340:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <SystemClock_Config+0xd0>)
 8001342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <SystemClock_Config+0xd0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001358:	2301      	movs	r3, #1
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135c:	2310      	movs	r3, #16
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001360:	2302      	movs	r3, #2
 8001362:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001364:	2300      	movs	r3, #0
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001368:	2308      	movs	r3, #8
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800136c:	2348      	movs	r3, #72	; 0x48
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001370:	2302      	movs	r3, #2
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001374:	2307      	movs	r3, #7
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	4618      	mov	r0, r3
 800137e:	f000 feeb 	bl	8002158 <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001388:	f000 f9b6 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2302      	movs	r3, #2
 8001392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	2102      	movs	r1, #2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 f94d 	bl	8002648 <HAL_RCC_ClockConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013b4:	f000 f9a0 	bl	80016f8 <Error_Handler>
  }
}
 80013b8:	bf00      	nop
 80013ba:	3750      	adds	r7, #80	; 0x50
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_TIM1_Init+0xa4>)
 80013e6:	4a22      	ldr	r2, [pc, #136]	; (8001470 <MX_TIM1_Init+0xa8>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_TIM1_Init+0xa4>)
 80013ec:	2247      	movs	r2, #71	; 0x47
 80013ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_TIM1_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM1_Init+0xa4>)
 80013f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_TIM1_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM1_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_TIM1_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <MX_TIM1_Init+0xa4>)
 8001412:	f001 fb39 	bl	8002a88 <HAL_TIM_IC_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800141c:	f000 f96c 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	480f      	ldr	r0, [pc, #60]	; (800146c <MX_TIM1_Init+0xa4>)
 8001430:	f002 f868 	bl	8003504 <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800143a:	f000 f95d 	bl	80016f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001442:	2301      	movs	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM1_Init+0xa4>)
 8001456:	f001 fd89 	bl	8002f6c <HAL_TIM_IC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001460:	f000 f94a 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000008c 	.word	0x2000008c
 8001470:	40010000 	.word	0x40010000

08001474 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <MX_TIM3_Init+0xa0>)
 8001492:	4a21      	ldr	r2, [pc, #132]	; (8001518 <MX_TIM3_Init+0xa4>)
 8001494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <MX_TIM3_Init+0xa0>)
 8001498:	2247      	movs	r2, #71	; 0x47
 800149a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <MX_TIM3_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014b6:	4817      	ldr	r0, [pc, #92]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014b8:	f001 fae6 	bl	8002a88 <HAL_TIM_IC_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014c2:	f000 f919 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	4619      	mov	r1, r3
 80014d4:	480f      	ldr	r0, [pc, #60]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014d6:	f002 f815 	bl	8003504 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014e0:	f000 f90a 	bl	80016f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014e4:	2300      	movs	r3, #0
 80014e6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014e8:	2301      	movs	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	2204      	movs	r2, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_TIM3_Init+0xa0>)
 80014fc:	f001 fd36 	bl	8002f6c <HAL_TIM_IC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001506:	f000 f8f7 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000d4 	.word	0x200000d4
 8001518:	40000400 	.word	0x40000400

0800151c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART2_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART2_UART_Init+0x4c>)
 8001554:	f002 f858 	bl	8003608 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f000 f8cb 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000011c 	.word	0x2000011c
 800156c:	40004400 	.word	0x40004400

08001570 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USART6_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_USART6_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_USART6_UART_Init+0x4c>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USART6_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART6_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USART6_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART6_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USART6_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USART6_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART6_UART_Init+0x4c>)
 80015a8:	f002 f82e 	bl	8003608 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f000 f8a1 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000160 	.word	0x20000160
 80015c0:	40011400 	.word	0x40011400

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <MX_GPIO_Init+0x124>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a41      	ldr	r2, [pc, #260]	; (80016e8 <MX_GPIO_Init+0x124>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <MX_GPIO_Init+0x124>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <MX_GPIO_Init+0x124>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a3a      	ldr	r2, [pc, #232]	; (80016e8 <MX_GPIO_Init+0x124>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <MX_GPIO_Init+0x124>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <MX_GPIO_Init+0x124>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <MX_GPIO_Init+0x124>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <MX_GPIO_Init+0x124>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <MX_GPIO_Init+0x124>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <MX_GPIO_Init+0x124>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <MX_GPIO_Init+0x124>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f240 2123 	movw	r1, #547	; 0x223
 8001650:	4826      	ldr	r0, [pc, #152]	; (80016ec <MX_GPIO_Init+0x128>)
 8001652:	f000 fd67 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800165c:	4823      	ldr	r0, [pc, #140]	; (80016ec <MX_GPIO_Init+0x128>)
 800165e:	f000 fd61 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2110      	movs	r1, #16
 8001666:	4822      	ldr	r0, [pc, #136]	; (80016f0 <MX_GPIO_Init+0x12c>)
 8001668:	f000 fd5c 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001672:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	481c      	ldr	r0, [pc, #112]	; (80016f4 <MX_GPIO_Init+0x130>)
 8001684:	f000 fbca 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_9;
 8001688:	f240 2323 	movw	r3, #547	; 0x223
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4812      	ldr	r0, [pc, #72]	; (80016ec <MX_GPIO_Init+0x128>)
 80016a2:	f000 fbbb 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016ac:	2311      	movs	r3, #17
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0x128>)
 80016c0:	f000 fbac 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016c4:	2310      	movs	r3, #16
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_GPIO_Init+0x12c>)
 80016dc:	f000 fb9e 	bl	8001e1c <HAL_GPIO_Init>

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001700:	e7fe      	b.n	8001700 <Error_Handler+0x8>
	...

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_MspInit+0x4c>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_MspInit+0x4c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001742:	2007      	movs	r0, #7
 8001744:	f000 fb28 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3a      	ldr	r2, [pc, #232]	; (800185c <HAL_TIM_IC_MspInit+0x108>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d135      	bne.n	80017e2 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	4b39      	ldr	r3, [pc, #228]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a38      	ldr	r2, [pc, #224]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	4b32      	ldr	r3, [pc, #200]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a31      	ldr	r2, [pc, #196]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	4826      	ldr	r0, [pc, #152]	; (8001864 <HAL_TIM_IC_MspInit+0x110>)
 80017cc:	f000 fb26 	bl	8001e1c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	201b      	movs	r0, #27
 80017d6:	f000 faea 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017da:	201b      	movs	r0, #27
 80017dc:	f000 fb03 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017e0:	e038      	b.n	8001854 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM3)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a20      	ldr	r2, [pc, #128]	; (8001868 <HAL_TIM_IC_MspInit+0x114>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d133      	bne.n	8001854 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 80017f6:	f043 0302 	orr.w	r3, r3, #2
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	4a13      	ldr	r2, [pc, #76]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	6313      	str	r3, [r2, #48]	; 0x30
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_TIM_IC_MspInit+0x10c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001824:	2320      	movs	r3, #32
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001834:	2302      	movs	r3, #2
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	480b      	ldr	r0, [pc, #44]	; (800186c <HAL_TIM_IC_MspInit+0x118>)
 8001840:	f000 faec 	bl	8001e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	201d      	movs	r0, #29
 800184a:	f000 fab0 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800184e:	201d      	movs	r0, #29
 8001850:	f000 fac9 	bl	8001de6 <HAL_NVIC_EnableIRQ>
}
 8001854:	bf00      	nop
 8001856:	3730      	adds	r7, #48	; 0x30
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40010000 	.word	0x40010000
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000
 8001868:	40000400 	.word	0x40000400
 800186c:	40020400 	.word	0x40020400

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_UART_MspInit+0xe8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12c      	bne.n	80018ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	4b31      	ldr	r3, [pc, #196]	; (800195c <HAL_UART_MspInit+0xec>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a30      	ldr	r2, [pc, #192]	; (800195c <HAL_UART_MspInit+0xec>)
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <HAL_UART_MspInit+0xec>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_UART_MspInit+0xec>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <HAL_UART_MspInit+0xec>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_UART_MspInit+0xec>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ca:	230c      	movs	r3, #12
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018da:	2307      	movs	r3, #7
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	481e      	ldr	r0, [pc, #120]	; (8001960 <HAL_UART_MspInit+0xf0>)
 80018e6:	f000 fa99 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018ea:	e030      	b.n	800194e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_UART_MspInit+0xf4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12b      	bne.n	800194e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_UART_MspInit+0xec>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_UART_MspInit+0xec>)
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_UART_MspInit+0xec>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_UART_MspInit+0xec>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_UART_MspInit+0xec>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_UART_MspInit+0xec>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192e:	23c0      	movs	r3, #192	; 0xc0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800193e:	2308      	movs	r3, #8
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	4807      	ldr	r0, [pc, #28]	; (8001968 <HAL_UART_MspInit+0xf8>)
 800194a:	f000 fa67 	bl	8001e1c <HAL_GPIO_Init>
}
 800194e:	bf00      	nop
 8001950:	3730      	adds	r7, #48	; 0x30
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40004400 	.word	0x40004400
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000
 8001964:	40011400 	.word	0x40011400
 8001968:	40020800 	.word	0x40020800

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b8:	f000 f8da 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <TIM1_CC_IRQHandler+0x10>)
 80019c6:	f001 f9c9 	bl	8002d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000008c 	.word	0x2000008c

080019d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <TIM3_IRQHandler+0x10>)
 80019da:	f001 f9bf 	bl	8002d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200000d4 	.word	0x200000d4

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f002 f9b8 	bl	8003d8c <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20018000 	.word	0x20018000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	200001dc 	.word	0x200001dc
 8001a50:	200001f8 	.word	0x200001f8

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a7e:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a80:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a94:	4c0b      	ldr	r4, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aa2:	f7ff ffd7 	bl	8001a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f002 f977 	bl	8003d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aaa:	f7ff fae7 	bl	800107c <main>
  bx  lr    
 8001aae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001abc:	0800475c 	.word	0x0800475c
  ldr r2, =_sbss
 8001ac0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ac4:	200001f4 	.word	0x200001f4

08001ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC_IRQHandler>
	...

08001acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_Init+0x40>)
 8001ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <HAL_Init+0x40>)
 8001ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_Init+0x40>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 f94f 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f808 	bl	8001b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b00:	f7ff fe00 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x54>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x58>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f967 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b4c:	f000 f92f 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_InitTick+0x5c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008
 8001b94:	200001e0 	.word	0x200001e0

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	200001e0 	.word	0x200001e0

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff3e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff31 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e159      	b.n	80020ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 8148 	bne.w	80020e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d017      	beq.n	8001f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80a2 	beq.w	80020e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b57      	ldr	r3, [pc, #348]	; (8002104 <HAL_GPIO_Init+0x2e8>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a56      	ldr	r2, [pc, #344]	; (8002104 <HAL_GPIO_Init+0x2e8>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b54      	ldr	r3, [pc, #336]	; (8002104 <HAL_GPIO_Init+0x2e8>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbe:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_GPIO_Init+0x2ec>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a49      	ldr	r2, [pc, #292]	; (800210c <HAL_GPIO_Init+0x2f0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d019      	beq.n	800201e <HAL_GPIO_Init+0x202>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a48      	ldr	r2, [pc, #288]	; (8002110 <HAL_GPIO_Init+0x2f4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0x1fe>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a47      	ldr	r2, [pc, #284]	; (8002114 <HAL_GPIO_Init+0x2f8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0x1fa>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a46      	ldr	r2, [pc, #280]	; (8002118 <HAL_GPIO_Init+0x2fc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x1f6>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a45      	ldr	r2, [pc, #276]	; (800211c <HAL_GPIO_Init+0x300>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_GPIO_Init+0x1f2>
 800200a:	2304      	movs	r3, #4
 800200c:	e008      	b.n	8002020 <HAL_GPIO_Init+0x204>
 800200e:	2307      	movs	r3, #7
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x204>
 8002012:	2303      	movs	r3, #3
 8002014:	e004      	b.n	8002020 <HAL_GPIO_Init+0x204>
 8002016:	2302      	movs	r3, #2
 8002018:	e002      	b.n	8002020 <HAL_GPIO_Init+0x204>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_GPIO_Init+0x204>
 800201e:	2300      	movs	r3, #0
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	f002 0203 	and.w	r2, r2, #3
 8002026:	0092      	lsls	r2, r2, #2
 8002028:	4093      	lsls	r3, r2
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002030:	4935      	ldr	r1, [pc, #212]	; (8002108 <HAL_GPIO_Init+0x2ec>)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <HAL_GPIO_Init+0x304>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002062:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <HAL_GPIO_Init+0x304>)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002068:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_GPIO_Init+0x304>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800208c:	4a24      	ldr	r2, [pc, #144]	; (8002120 <HAL_GPIO_Init+0x304>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_GPIO_Init+0x304>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b6:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_GPIO_Init+0x304>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_GPIO_Init+0x304>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e0:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <HAL_GPIO_Init+0x304>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3301      	adds	r3, #1
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	f67f aea2 	bls.w	8001e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40013800 	.word	0x40013800
 800210c:	40020000 	.word	0x40020000
 8002110:	40020400 	.word	0x40020400
 8002114:	40020800 	.word	0x40020800
 8002118:	40020c00 	.word	0x40020c00
 800211c:	40021000 	.word	0x40021000
 8002120:	40013c00 	.word	0x40013c00

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002140:	e003      	b.n	800214a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002142:	887b      	ldrh	r3, [r7, #2]
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e267      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d075      	beq.n	8002262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002176:	4b88      	ldr	r3, [pc, #544]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b04      	cmp	r3, #4
 8002180:	d00c      	beq.n	800219c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002182:	4b85      	ldr	r3, [pc, #532]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800218a:	2b08      	cmp	r3, #8
 800218c:	d112      	bne.n	80021b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	4b82      	ldr	r3, [pc, #520]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219a:	d10b      	bne.n	80021b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	4b7e      	ldr	r3, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d05b      	beq.n	8002260 <HAL_RCC_OscConfig+0x108>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d157      	bne.n	8002260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e242      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d106      	bne.n	80021cc <HAL_RCC_OscConfig+0x74>
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a75      	ldr	r2, [pc, #468]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xb0>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x98>
 80021d6:	4b70      	ldr	r3, [pc, #448]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6f      	ldr	r2, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b6d      	ldr	r3, [pc, #436]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a6c      	ldr	r2, [pc, #432]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xb0>
 80021f0:	4b69      	ldr	r3, [pc, #420]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a68      	ldr	r2, [pc, #416]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b66      	ldr	r3, [pc, #408]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a65      	ldr	r2, [pc, #404]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff fcc2 	bl	8001b98 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fcbe 	bl	8001b98 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e207      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xc0>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fcae 	bl	8001b98 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fcaa 	bl	8001b98 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1f3      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0xe8>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d063      	beq.n	8002336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002282:	2b08      	cmp	r3, #8
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002286:	4b44      	ldr	r3, [pc, #272]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d116      	bne.n	80022c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x152>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1c7      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4937      	ldr	r1, [pc, #220]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	e03a      	b.n	8002336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_RCC_OscConfig+0x244>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7ff fc63 	bl	8001b98 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff fc5f 	bl	8001b98 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e1a8      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4925      	ldr	r1, [pc, #148]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x244>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7ff fc42 	bl	8001b98 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002318:	f7ff fc3e 	bl	8001b98 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e187      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d036      	beq.n	80023b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_RCC_OscConfig+0x248>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7ff fc22 	bl	8001b98 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff fc1e 	bl	8001b98 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e167      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_OscConfig+0x240>)
 800236c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x200>
 8002376:	e01b      	b.n	80023b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_OscConfig+0x248>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7ff fc0b 	bl	8001b98 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	e00e      	b.n	80023a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002386:	f7ff fc07 	bl	8001b98 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d907      	bls.n	80023a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e150      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
 8002398:	40023800 	.word	0x40023800
 800239c:	42470000 	.word	0x42470000
 80023a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b88      	ldr	r3, [pc, #544]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ea      	bne.n	8002386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8097 	beq.w	80024ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b81      	ldr	r3, [pc, #516]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b7d      	ldr	r3, [pc, #500]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a7c      	ldr	r2, [pc, #496]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b77      	ldr	r3, [pc, #476]	; (80025cc <HAL_RCC_OscConfig+0x474>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d118      	bne.n	800242c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b74      	ldr	r3, [pc, #464]	; (80025cc <HAL_RCC_OscConfig+0x474>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a73      	ldr	r2, [pc, #460]	; (80025cc <HAL_RCC_OscConfig+0x474>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7ff fbc7 	bl	8001b98 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240e:	f7ff fbc3 	bl	8001b98 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e10c      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCC_OscConfig+0x474>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x2ea>
 8002434:	4b64      	ldr	r3, [pc, #400]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a63      	ldr	r2, [pc, #396]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x324>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b05      	cmp	r3, #5
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x30c>
 800244a:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a5e      	ldr	r2, [pc, #376]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
 8002456:	4b5c      	ldr	r3, [pc, #368]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	4a5b      	ldr	r2, [pc, #364]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6713      	str	r3, [r2, #112]	; 0x70
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0x324>
 8002464:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a57      	ldr	r2, [pc, #348]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800246a:	f023 0301 	bic.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	4a54      	ldr	r2, [pc, #336]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002476:	f023 0304 	bic.w	r3, r3, #4
 800247a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d015      	beq.n	80024b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7ff fb88 	bl	8001b98 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7ff fb84 	bl	8001b98 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e0cb      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0ee      	beq.n	800248c <HAL_RCC_OscConfig+0x334>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b0:	f7ff fb72 	bl	8001b98 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7ff fb6e 	bl	8001b98 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0b5      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ce:	4b3e      	ldr	r3, [pc, #248]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ee      	bne.n	80024b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e0:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	4a38      	ldr	r2, [pc, #224]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a1 	beq.w	8002638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f6:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d05c      	beq.n	80025bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d141      	bne.n	800258e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_RCC_OscConfig+0x478>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff fb42 	bl	8001b98 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002518:	f7ff fb3e 	bl	8001b98 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e087      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	019b      	lsls	r3, r3, #6
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	3b01      	subs	r3, #1
 8002550:	041b      	lsls	r3, r3, #16
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	061b      	lsls	r3, r3, #24
 800255a:	491b      	ldr	r1, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_OscConfig+0x478>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7ff fb17 	bl	8001b98 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256e:	f7ff fb13 	bl	8001b98 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e05c      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x416>
 800258c:	e054      	b.n	8002638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_OscConfig+0x478>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fb00 	bl	8001b98 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff fafc 	bl	8001b98 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e045      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x470>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x444>
 80025ba:	e03d      	b.n	8002638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e038      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40007000 	.word	0x40007000
 80025d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x4ec>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d028      	beq.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d121      	bne.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d11a      	bne.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002604:	4013      	ands	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800260a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800260c:	4293      	cmp	r3, r2
 800260e:	d111      	bne.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	3b01      	subs	r3, #1
 800261e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d107      	bne.n	8002634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0cc      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b68      	ldr	r3, [pc, #416]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d90c      	bls.n	8002684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b65      	ldr	r3, [pc, #404]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0b8      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800269c:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b4:	4b53      	ldr	r3, [pc, #332]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b50      	ldr	r3, [pc, #320]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	494d      	ldr	r1, [pc, #308]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d044      	beq.n	8002768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d119      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e07f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002702:	2b03      	cmp	r3, #3
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e067      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4934      	ldr	r1, [pc, #208]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002738:	f7ff fa2e 	bl	8001b98 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e00a      	b.n	8002756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7ff fa2a 	bl	8001b98 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e04f      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 020c 	and.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	429a      	cmp	r2, r3
 8002766:	d1eb      	bne.n	8002740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4b25      	ldr	r3, [pc, #148]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d20c      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e032      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4916      	ldr	r1, [pc, #88]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	490e      	ldr	r1, [pc, #56]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ce:	f000 f821 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80027d2:	4602      	mov	r2, r0
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	490a      	ldr	r1, [pc, #40]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	5ccb      	ldrb	r3, [r1, r3]
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f98e 	bl	8001b10 <HAL_InitTick>

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40023c00 	.word	0x40023c00
 8002804:	40023800 	.word	0x40023800
 8002808:	08004700 	.word	0x08004700
 800280c:	20000000 	.word	0x20000000
 8002810:	20000004 	.word	0x20000004

08002814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002818:	b094      	sub	sp, #80	; 0x50
 800281a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	647b      	str	r3, [r7, #68]	; 0x44
 8002820:	2300      	movs	r3, #0
 8002822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002824:	2300      	movs	r3, #0
 8002826:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800282c:	4b79      	ldr	r3, [pc, #484]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d00d      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x40>
 8002838:	2b08      	cmp	r3, #8
 800283a:	f200 80e1 	bhi.w	8002a00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x34>
 8002842:	2b04      	cmp	r3, #4
 8002844:	d003      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x3a>
 8002846:	e0db      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002848:	4b73      	ldr	r3, [pc, #460]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x204>)
 800284a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800284c:	e0db      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800284e:	4b73      	ldr	r3, [pc, #460]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002852:	e0d8      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002854:	4b6f      	ldr	r3, [pc, #444]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800285c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800285e:	4b6d      	ldr	r3, [pc, #436]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d063      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286a:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	099b      	lsrs	r3, r3, #6
 8002870:	2200      	movs	r2, #0
 8002872:	63bb      	str	r3, [r7, #56]	; 0x38
 8002874:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
 800287e:	2300      	movs	r3, #0
 8002880:	637b      	str	r3, [r7, #52]	; 0x34
 8002882:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002886:	4622      	mov	r2, r4
 8002888:	462b      	mov	r3, r5
 800288a:	f04f 0000 	mov.w	r0, #0
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	0159      	lsls	r1, r3, #5
 8002894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002898:	0150      	lsls	r0, r2, #5
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4621      	mov	r1, r4
 80028a0:	1a51      	subs	r1, r2, r1
 80028a2:	6139      	str	r1, [r7, #16]
 80028a4:	4629      	mov	r1, r5
 80028a6:	eb63 0301 	sbc.w	r3, r3, r1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028b8:	4659      	mov	r1, fp
 80028ba:	018b      	lsls	r3, r1, #6
 80028bc:	4651      	mov	r1, sl
 80028be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028c2:	4651      	mov	r1, sl
 80028c4:	018a      	lsls	r2, r1, #6
 80028c6:	4651      	mov	r1, sl
 80028c8:	ebb2 0801 	subs.w	r8, r2, r1
 80028cc:	4659      	mov	r1, fp
 80028ce:	eb63 0901 	sbc.w	r9, r3, r1
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028e6:	4690      	mov	r8, r2
 80028e8:	4699      	mov	r9, r3
 80028ea:	4623      	mov	r3, r4
 80028ec:	eb18 0303 	adds.w	r3, r8, r3
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	462b      	mov	r3, r5
 80028f4:	eb49 0303 	adc.w	r3, r9, r3
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002906:	4629      	mov	r1, r5
 8002908:	024b      	lsls	r3, r1, #9
 800290a:	4621      	mov	r1, r4
 800290c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002910:	4621      	mov	r1, r4
 8002912:	024a      	lsls	r2, r1, #9
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800291a:	2200      	movs	r2, #0
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
 800291e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002924:	f7fe f89a 	bl	8000a5c <__aeabi_uldivmod>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4613      	mov	r3, r2
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002930:	e058      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002932:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	2200      	movs	r2, #0
 800293a:	4618      	mov	r0, r3
 800293c:	4611      	mov	r1, r2
 800293e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
 8002948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800294c:	4642      	mov	r2, r8
 800294e:	464b      	mov	r3, r9
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	0159      	lsls	r1, r3, #5
 800295a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800295e:	0150      	lsls	r0, r2, #5
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4641      	mov	r1, r8
 8002966:	ebb2 0a01 	subs.w	sl, r2, r1
 800296a:	4649      	mov	r1, r9
 800296c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800297c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002984:	ebb2 040a 	subs.w	r4, r2, sl
 8002988:	eb63 050b 	sbc.w	r5, r3, fp
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	00eb      	lsls	r3, r5, #3
 8002996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800299a:	00e2      	lsls	r2, r4, #3
 800299c:	4614      	mov	r4, r2
 800299e:	461d      	mov	r5, r3
 80029a0:	4643      	mov	r3, r8
 80029a2:	18e3      	adds	r3, r4, r3
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	464b      	mov	r3, r9
 80029a8:	eb45 0303 	adc.w	r3, r5, r3
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ba:	4629      	mov	r1, r5
 80029bc:	028b      	lsls	r3, r1, #10
 80029be:	4621      	mov	r1, r4
 80029c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029c4:	4621      	mov	r1, r4
 80029c6:	028a      	lsls	r2, r1, #10
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	61fa      	str	r2, [r7, #28]
 80029d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029d8:	f7fe f840 	bl	8000a5c <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4613      	mov	r3, r2
 80029e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	3301      	adds	r3, #1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029fe:	e002      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3750      	adds	r7, #80	; 0x50
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	00f42400 	.word	0x00f42400
 8002a1c:	007a1200 	.word	0x007a1200

08002a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000000 	.word	0x20000000

08002a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a3c:	f7ff fff0 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	0a9b      	lsrs	r3, r3, #10
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4903      	ldr	r1, [pc, #12]	; (8002a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	08004710 	.word	0x08004710

08002a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a64:	f7ff ffdc 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0b5b      	lsrs	r3, r3, #13
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4903      	ldr	r1, [pc, #12]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40023800 	.word	0x40023800
 8002a84:	08004710 	.word	0x08004710

08002a88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e041      	b.n	8002b1e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe fe50 	bl	8001754 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f000 fb58 	bl	800317c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_IC_Start_IT+0x1e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	e013      	b.n	8002b6e <HAL_TIM_IC_Start_IT+0x46>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_IC_Start_IT+0x2e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e00b      	b.n	8002b6e <HAL_TIM_IC_Start_IT+0x46>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_IC_Start_IT+0x3e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	e003      	b.n	8002b6e <HAL_TIM_IC_Start_IT+0x46>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d104      	bne.n	8002b80 <HAL_TIM_IC_Start_IT+0x58>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e013      	b.n	8002ba8 <HAL_TIM_IC_Start_IT+0x80>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d104      	bne.n	8002b90 <HAL_TIM_IC_Start_IT+0x68>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	e00b      	b.n	8002ba8 <HAL_TIM_IC_Start_IT+0x80>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d104      	bne.n	8002ba0 <HAL_TIM_IC_Start_IT+0x78>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e003      	b.n	8002ba8 <HAL_TIM_IC_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002baa:	7bbb      	ldrb	r3, [r7, #14]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d102      	bne.n	8002bb6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bb0:	7b7b      	ldrb	r3, [r7, #13]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0c2      	b.n	8002d40 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <HAL_TIM_IC_Start_IT+0xa2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc8:	e013      	b.n	8002bf2 <HAL_TIM_IC_Start_IT+0xca>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d104      	bne.n	8002bda <HAL_TIM_IC_Start_IT+0xb2>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd8:	e00b      	b.n	8002bf2 <HAL_TIM_IC_Start_IT+0xca>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d104      	bne.n	8002bea <HAL_TIM_IC_Start_IT+0xc2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002be8:	e003      	b.n	8002bf2 <HAL_TIM_IC_Start_IT+0xca>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_IC_Start_IT+0xda>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c00:	e013      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0x102>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_IC_Start_IT+0xea>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c10:	e00b      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0x102>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_IC_Start_IT+0xfa>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c20:	e003      	b.n	8002c2a <HAL_TIM_IC_Start_IT+0x102>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2202      	movs	r2, #2
 8002c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d841      	bhi.n	8002cb4 <HAL_TIM_IC_Start_IT+0x18c>
 8002c30:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <HAL_TIM_IC_Start_IT+0x110>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c6d 	.word	0x08002c6d
 8002c3c:	08002cb5 	.word	0x08002cb5
 8002c40:	08002cb5 	.word	0x08002cb5
 8002c44:	08002cb5 	.word	0x08002cb5
 8002c48:	08002c7f 	.word	0x08002c7f
 8002c4c:	08002cb5 	.word	0x08002cb5
 8002c50:	08002cb5 	.word	0x08002cb5
 8002c54:	08002cb5 	.word	0x08002cb5
 8002c58:	08002c91 	.word	0x08002c91
 8002c5c:	08002cb5 	.word	0x08002cb5
 8002c60:	08002cb5 	.word	0x08002cb5
 8002c64:	08002cb5 	.word	0x08002cb5
 8002c68:	08002ca3 	.word	0x08002ca3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0202 	orr.w	r2, r2, #2
 8002c7a:	60da      	str	r2, [r3, #12]
      break;
 8002c7c:	e01d      	b.n	8002cba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0204 	orr.w	r2, r2, #4
 8002c8c:	60da      	str	r2, [r3, #12]
      break;
 8002c8e:	e014      	b.n	8002cba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0208 	orr.w	r2, r2, #8
 8002c9e:	60da      	str	r2, [r3, #12]
      break;
 8002ca0:	e00b      	b.n	8002cba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0210 	orr.w	r2, r2, #16
 8002cb0:	60da      	str	r2, [r3, #12]
      break;
 8002cb2:	e002      	b.n	8002cba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d13e      	bne.n	8002d3e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	6839      	ldr	r1, [r7, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fbf5 	bl	80034b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_TIM_IC_Start_IT+0x220>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d018      	beq.n	8002d0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce0:	d013      	beq.n	8002d0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_TIM_IC_Start_IT+0x224>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00e      	beq.n	8002d0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_TIM_IC_Start_IT+0x228>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d009      	beq.n	8002d0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_TIM_IC_Start_IT+0x22c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_TIM_IC_Start_IT+0x230>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d111      	bne.n	8002d2e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d010      	beq.n	8002d3e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2c:	e007      	b.n	8002d3e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40014000 	.word	0x40014000

08002d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0202 	mvn.w	r2, #2
 8002d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe f816 	bl	8000dd0 <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f9ca 	bl	8003140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f9d1 	bl	8003154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0204 	mvn.w	r2, #4
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd ffec 	bl	8000dd0 <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f9a0 	bl	8003140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f9a7 	bl	8003154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d122      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d11b      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0208 	mvn.w	r2, #8
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2204      	movs	r2, #4
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd ffc2 	bl	8000dd0 <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f976 	bl	8003140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f97d 	bl	8003154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d122      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0210 	mvn.w	r2, #16
 8002e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd ff98 	bl	8000dd0 <HAL_TIM_IC_CaptureCallback>
 8002ea0:	e005      	b.n	8002eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f94c 	bl	8003140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f953 	bl	8003154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0201 	mvn.w	r2, #1
 8002ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f926 	bl	800312c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	2b80      	cmp	r3, #128	; 0x80
 8002eec:	d10e      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef8:	2b80      	cmp	r3, #128	; 0x80
 8002efa:	d107      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fb74 	bl	80035f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b40      	cmp	r3, #64	; 0x40
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d107      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f918 	bl	8003168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d10e      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0320 	and.w	r3, r3, #32
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d107      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0220 	mvn.w	r2, #32
 8002f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fb3e 	bl	80035e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e088      	b.n	800309c <HAL_TIM_IC_ConfigChannel+0x130>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f000 f968 	bl	800327c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 020c 	bic.w	r2, r2, #12
 8002fba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6999      	ldr	r1, [r3, #24]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	619a      	str	r2, [r3, #24]
 8002fce:	e060      	b.n	8003092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d11c      	bne.n	8003010 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6819      	ldr	r1, [r3, #0]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f000 f9b1 	bl	800334c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ff8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6999      	ldr	r1, [r3, #24]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	619a      	str	r2, [r3, #24]
 800300e:	e040      	b.n	8003092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d11b      	bne.n	800304e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f000 f9ce 	bl	80033c6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 020c 	bic.w	r2, r2, #12
 8003038:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69d9      	ldr	r1, [r3, #28]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	61da      	str	r2, [r3, #28]
 800304c:	e021      	b.n	8003092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d11c      	bne.n	800308e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f000 f9eb 	bl	800343e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003076:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69d9      	ldr	r1, [r3, #28]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	021a      	lsls	r2, r3, #8
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	61da      	str	r2, [r3, #28]
 800308c:	e001      	b.n	8003092 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	d831      	bhi.n	800311c <HAL_TIM_ReadCapturedValue+0x78>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	0800311d 	.word	0x0800311d
 80030c8:	0800311d 	.word	0x0800311d
 80030cc:	0800311d 	.word	0x0800311d
 80030d0:	080030ff 	.word	0x080030ff
 80030d4:	0800311d 	.word	0x0800311d
 80030d8:	0800311d 	.word	0x0800311d
 80030dc:	0800311d 	.word	0x0800311d
 80030e0:	08003109 	.word	0x08003109
 80030e4:	0800311d 	.word	0x0800311d
 80030e8:	0800311d 	.word	0x0800311d
 80030ec:	0800311d 	.word	0x0800311d
 80030f0:	08003113 	.word	0x08003113
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	60fb      	str	r3, [r7, #12]

      break;
 80030fc:	e00f      	b.n	800311e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	60fb      	str	r3, [r7, #12]

      break;
 8003106:	e00a      	b.n	800311e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	60fb      	str	r3, [r7, #12]

      break;
 8003110:	e005      	b.n	800311e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	60fb      	str	r3, [r7, #12]

      break;
 800311a:	e000      	b.n	800311e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800311c:	bf00      	nop
  }

  return tmpreg;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a34      	ldr	r2, [pc, #208]	; (8003260 <TIM_Base_SetConfig+0xe4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00f      	beq.n	80031b4 <TIM_Base_SetConfig+0x38>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319a:	d00b      	beq.n	80031b4 <TIM_Base_SetConfig+0x38>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a31      	ldr	r2, [pc, #196]	; (8003264 <TIM_Base_SetConfig+0xe8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d007      	beq.n	80031b4 <TIM_Base_SetConfig+0x38>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a30      	ldr	r2, [pc, #192]	; (8003268 <TIM_Base_SetConfig+0xec>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0x38>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a2f      	ldr	r2, [pc, #188]	; (800326c <TIM_Base_SetConfig+0xf0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <TIM_Base_SetConfig+0xe4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01b      	beq.n	8003206 <TIM_Base_SetConfig+0x8a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d017      	beq.n	8003206 <TIM_Base_SetConfig+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a22      	ldr	r2, [pc, #136]	; (8003264 <TIM_Base_SetConfig+0xe8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <TIM_Base_SetConfig+0x8a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a21      	ldr	r2, [pc, #132]	; (8003268 <TIM_Base_SetConfig+0xec>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00f      	beq.n	8003206 <TIM_Base_SetConfig+0x8a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a20      	ldr	r2, [pc, #128]	; (800326c <TIM_Base_SetConfig+0xf0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00b      	beq.n	8003206 <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <TIM_Base_SetConfig+0xf4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d007      	beq.n	8003206 <TIM_Base_SetConfig+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <TIM_Base_SetConfig+0xf8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d003      	beq.n	8003206 <TIM_Base_SetConfig+0x8a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <TIM_Base_SetConfig+0xfc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d108      	bne.n	8003218 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a08      	ldr	r2, [pc, #32]	; (8003260 <TIM_Base_SetConfig+0xe4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d103      	bne.n	800324c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	615a      	str	r2, [r3, #20]
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800

0800327c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f023 0201 	bic.w	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a24      	ldr	r2, [pc, #144]	; (8003338 <TIM_TI1_SetConfig+0xbc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d00f      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a21      	ldr	r2, [pc, #132]	; (800333c <TIM_TI1_SetConfig+0xc0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a20      	ldr	r2, [pc, #128]	; (8003340 <TIM_TI1_SetConfig+0xc4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <TIM_TI1_SetConfig+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_TI1_SetConfig+0x56>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <TIM_TI1_SetConfig+0xcc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <TIM_TI1_SetConfig+0x5a>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <TIM_TI1_SetConfig+0x5c>
 80032d6:	2300      	movs	r3, #0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e003      	b.n	80032f6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	b2db      	uxtb	r3, r3
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f023 030a 	bic.w	r3, r3, #10
 8003310:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 030a 	and.w	r3, r3, #10
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40014000 	.word	0x40014000

0800334c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f023 0210 	bic.w	r2, r3, #16
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800338a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	031b      	lsls	r3, r3, #12
 8003390:	b29b      	uxth	r3, r3
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800339e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b087      	sub	sp, #28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0303 	bic.w	r3, r3, #3
 80033f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003402:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	b2db      	uxtb	r3, r3
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003416:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	621a      	str	r2, [r3, #32]
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800343e:	b480      	push	{r7}
 8003440:	b087      	sub	sp, #28
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800347c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	031b      	lsls	r3, r3, #12
 8003482:	b29b      	uxth	r3, r3
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003490:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	031b      	lsls	r3, r3, #12
 8003496:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2201      	movs	r2, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a1a      	ldr	r2, [r3, #32]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	43db      	mvns	r3, r3
 80034da:	401a      	ands	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	431a      	orrs	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003518:	2302      	movs	r3, #2
 800351a:	e050      	b.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1c      	ldr	r2, [pc, #112]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d018      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d013      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a13      	ldr	r2, [pc, #76]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10c      	bne.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40014000 	.word	0x40014000

080035e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e03f      	b.n	800369a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe f91e 	bl	8001870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f929 	bl	80038a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b08a      	sub	sp, #40	; 0x28
 80036a6:	af02      	add	r7, sp, #8
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d17c      	bne.n	80037bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_UART_Transmit+0x2c>
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e075      	b.n	80037be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_UART_Transmit+0x3e>
 80036dc:	2302      	movs	r3, #2
 80036de:	e06e      	b.n	80037be <HAL_UART_Transmit+0x11c>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2221      	movs	r2, #33	; 0x21
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f6:	f7fe fa4f 	bl	8001b98 <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	88fa      	ldrh	r2, [r7, #6]
 8003706:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003710:	d108      	bne.n	8003724 <HAL_UART_Transmit+0x82>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e003      	b.n	800372c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003734:	e02a      	b.n	800378c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f840 	bl	80037c6 <UART_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e036      	b.n	80037be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10b      	bne.n	800376e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	3302      	adds	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e007      	b.n	800377e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3301      	adds	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1cf      	bne.n	8003736 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2200      	movs	r2, #0
 800379e:	2140      	movs	r1, #64	; 0x40
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f810 	bl	80037c6 <UART_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e006      	b.n	80037be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b090      	sub	sp, #64	; 0x40
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d6:	e050      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037de:	d04c      	beq.n	800387a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80037e6:	f7fe f9d7 	bl	8001b98 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d241      	bcs.n	800387a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	330c      	adds	r3, #12
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800380c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	330c      	adds	r3, #12
 8003814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003816:	637a      	str	r2, [r7, #52]	; 0x34
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800381c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e5      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3314      	adds	r3, #20
 8003830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	613b      	str	r3, [r7, #16]
   return(result);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	63bb      	str	r3, [r7, #56]	; 0x38
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3314      	adds	r3, #20
 8003848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800384a:	623a      	str	r2, [r7, #32]
 800384c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	69f9      	ldr	r1, [r7, #28]
 8003850:	6a3a      	ldr	r2, [r7, #32]
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	61bb      	str	r3, [r7, #24]
   return(result);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e5      	bne.n	800382a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e00f      	b.n	800389a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d09f      	beq.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3740      	adds	r7, #64	; 0x40
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a8:	b0c0      	sub	sp, #256	; 0x100
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	68d9      	ldr	r1, [r3, #12]
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	ea40 0301 	orr.w	r3, r0, r1
 80038cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038fc:	f021 010c 	bic.w	r1, r1, #12
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800390a:	430b      	orrs	r3, r1
 800390c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391e:	6999      	ldr	r1, [r3, #24]
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	ea40 0301 	orr.w	r3, r0, r1
 800392a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b8f      	ldr	r3, [pc, #572]	; (8003b70 <UART_SetConfig+0x2cc>)
 8003934:	429a      	cmp	r2, r3
 8003936:	d005      	beq.n	8003944 <UART_SetConfig+0xa0>
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4b8d      	ldr	r3, [pc, #564]	; (8003b74 <UART_SetConfig+0x2d0>)
 8003940:	429a      	cmp	r2, r3
 8003942:	d104      	bne.n	800394e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003944:	f7ff f88c 	bl	8002a60 <HAL_RCC_GetPCLK2Freq>
 8003948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800394c:	e003      	b.n	8003956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800394e:	f7ff f873 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 8003952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003960:	f040 810c 	bne.w	8003b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003968:	2200      	movs	r2, #0
 800396a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800396e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003976:	4622      	mov	r2, r4
 8003978:	462b      	mov	r3, r5
 800397a:	1891      	adds	r1, r2, r2
 800397c:	65b9      	str	r1, [r7, #88]	; 0x58
 800397e:	415b      	adcs	r3, r3
 8003980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003986:	4621      	mov	r1, r4
 8003988:	eb12 0801 	adds.w	r8, r2, r1
 800398c:	4629      	mov	r1, r5
 800398e:	eb43 0901 	adc.w	r9, r3, r1
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800399e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039a6:	4690      	mov	r8, r2
 80039a8:	4699      	mov	r9, r3
 80039aa:	4623      	mov	r3, r4
 80039ac:	eb18 0303 	adds.w	r3, r8, r3
 80039b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039b4:	462b      	mov	r3, r5
 80039b6:	eb49 0303 	adc.w	r3, r9, r3
 80039ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039d2:	460b      	mov	r3, r1
 80039d4:	18db      	adds	r3, r3, r3
 80039d6:	653b      	str	r3, [r7, #80]	; 0x50
 80039d8:	4613      	mov	r3, r2
 80039da:	eb42 0303 	adc.w	r3, r2, r3
 80039de:	657b      	str	r3, [r7, #84]	; 0x54
 80039e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039e8:	f7fd f838 	bl	8000a5c <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4b61      	ldr	r3, [pc, #388]	; (8003b78 <UART_SetConfig+0x2d4>)
 80039f2:	fba3 2302 	umull	r2, r3, r3, r2
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	011c      	lsls	r4, r3, #4
 80039fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	1891      	adds	r1, r2, r2
 8003a12:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a14:	415b      	adcs	r3, r3
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a22:	4649      	mov	r1, r9
 8003a24:	eb43 0b01 	adc.w	fp, r3, r1
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a3c:	4692      	mov	sl, r2
 8003a3e:	469b      	mov	fp, r3
 8003a40:	4643      	mov	r3, r8
 8003a42:	eb1a 0303 	adds.w	r3, sl, r3
 8003a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	18db      	adds	r3, r3, r3
 8003a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a6e:	4613      	mov	r3, r2
 8003a70:	eb42 0303 	adc.w	r3, r2, r3
 8003a74:	647b      	str	r3, [r7, #68]	; 0x44
 8003a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a7e:	f7fc ffed 	bl	8000a5c <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <UART_SetConfig+0x2d4>)
 8003a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2264      	movs	r2, #100	; 0x64
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	1acb      	subs	r3, r1, r3
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <UART_SetConfig+0x2d4>)
 8003aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa4:	095b      	lsrs	r3, r3, #5
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aac:	441c      	add	r4, r3
 8003aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	1891      	adds	r1, r2, r2
 8003ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ac8:	415b      	adcs	r3, r3
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	1851      	adds	r1, r2, r1
 8003ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	414b      	adcs	r3, r1
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ae8:	4659      	mov	r1, fp
 8003aea:	00cb      	lsls	r3, r1, #3
 8003aec:	4651      	mov	r1, sl
 8003aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af2:	4651      	mov	r1, sl
 8003af4:	00ca      	lsls	r2, r1, #3
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	4642      	mov	r2, r8
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b04:	464b      	mov	r3, r9
 8003b06:	460a      	mov	r2, r1
 8003b08:	eb42 0303 	adc.w	r3, r2, r3
 8003b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b24:	460b      	mov	r3, r1
 8003b26:	18db      	adds	r3, r3, r3
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b3a:	f7fc ff8f 	bl	8000a5c <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <UART_SetConfig+0x2d4>)
 8003b44:	fba3 1302 	umull	r1, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	2164      	movs	r1, #100	; 0x64
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	3332      	adds	r3, #50	; 0x32
 8003b56:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <UART_SetConfig+0x2d4>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f003 0207 	and.w	r2, r3, #7
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4422      	add	r2, r4
 8003b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b6c:	e105      	b.n	8003d7a <UART_SetConfig+0x4d6>
 8003b6e:	bf00      	nop
 8003b70:	40011000 	.word	0x40011000
 8003b74:	40011400 	.word	0x40011400
 8003b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b8e:	4642      	mov	r2, r8
 8003b90:	464b      	mov	r3, r9
 8003b92:	1891      	adds	r1, r2, r2
 8003b94:	6239      	str	r1, [r7, #32]
 8003b96:	415b      	adcs	r3, r3
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b9e:	4641      	mov	r1, r8
 8003ba0:	1854      	adds	r4, r2, r1
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	eb43 0501 	adc.w	r5, r3, r1
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	00eb      	lsls	r3, r5, #3
 8003bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb6:	00e2      	lsls	r2, r4, #3
 8003bb8:	4614      	mov	r4, r2
 8003bba:	461d      	mov	r5, r3
 8003bbc:	4643      	mov	r3, r8
 8003bbe:	18e3      	adds	r3, r4, r3
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	eb45 0303 	adc.w	r3, r5, r3
 8003bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bea:	4629      	mov	r1, r5
 8003bec:	008b      	lsls	r3, r1, #2
 8003bee:	4621      	mov	r1, r4
 8003bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	008a      	lsls	r2, r1, #2
 8003bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bfc:	f7fc ff2e 	bl	8000a5c <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003c06:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	011c      	lsls	r4, r3, #4
 8003c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	1891      	adds	r1, r2, r2
 8003c26:	61b9      	str	r1, [r7, #24]
 8003c28:	415b      	adcs	r3, r3
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c30:	4641      	mov	r1, r8
 8003c32:	1851      	adds	r1, r2, r1
 8003c34:	6139      	str	r1, [r7, #16]
 8003c36:	4649      	mov	r1, r9
 8003c38:	414b      	adcs	r3, r1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c48:	4659      	mov	r1, fp
 8003c4a:	00cb      	lsls	r3, r1, #3
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c52:	4651      	mov	r1, sl
 8003c54:	00ca      	lsls	r2, r1, #3
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	189b      	adds	r3, r3, r2
 8003c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c64:	464b      	mov	r3, r9
 8003c66:	460a      	mov	r2, r1
 8003c68:	eb42 0303 	adc.w	r3, r2, r3
 8003c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c88:	4649      	mov	r1, r9
 8003c8a:	008b      	lsls	r3, r1, #2
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c92:	4641      	mov	r1, r8
 8003c94:	008a      	lsls	r2, r1, #2
 8003c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c9a:	f7fc fedf 	bl	8000a5c <__aeabi_uldivmod>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	2164      	movs	r1, #100	; 0x64
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	3332      	adds	r3, #50	; 0x32
 8003cb6:	4a34      	ldr	r2, [pc, #208]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbc:	095b      	lsrs	r3, r3, #5
 8003cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc2:	441c      	add	r4, r3
 8003cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc8:	2200      	movs	r2, #0
 8003cca:	673b      	str	r3, [r7, #112]	; 0x70
 8003ccc:	677a      	str	r2, [r7, #116]	; 0x74
 8003cce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cd2:	4642      	mov	r2, r8
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	1891      	adds	r1, r2, r2
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	415b      	adcs	r3, r3
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	1851      	adds	r1, r2, r1
 8003ce6:	6039      	str	r1, [r7, #0]
 8003ce8:	4649      	mov	r1, r9
 8003cea:	414b      	adcs	r3, r1
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cfa:	4659      	mov	r1, fp
 8003cfc:	00cb      	lsls	r3, r1, #3
 8003cfe:	4651      	mov	r1, sl
 8003d00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d04:	4651      	mov	r1, sl
 8003d06:	00ca      	lsls	r2, r1, #3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4642      	mov	r2, r8
 8003d10:	189b      	adds	r3, r3, r2
 8003d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d14:	464b      	mov	r3, r9
 8003d16:	460a      	mov	r2, r1
 8003d18:	eb42 0303 	adc.w	r3, r2, r3
 8003d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	663b      	str	r3, [r7, #96]	; 0x60
 8003d28:	667a      	str	r2, [r7, #100]	; 0x64
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d36:	4649      	mov	r1, r9
 8003d38:	008b      	lsls	r3, r1, #2
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d40:	4641      	mov	r1, r8
 8003d42:	008a      	lsls	r2, r1, #2
 8003d44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d48:	f7fc fe88 	bl	8000a5c <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003d52:	fba3 1302 	umull	r1, r3, r3, r2
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2164      	movs	r1, #100	; 0x64
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	3332      	adds	r3, #50	; 0x32
 8003d64:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <UART_SetConfig+0x4e4>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	f003 020f 	and.w	r2, r3, #15
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4422      	add	r2, r4
 8003d78:	609a      	str	r2, [r3, #8]
}
 8003d7a:	bf00      	nop
 8003d7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d80:	46bd      	mov	sp, r7
 8003d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d86:	bf00      	nop
 8003d88:	51eb851f 	.word	0x51eb851f

08003d8c <__errno>:
 8003d8c:	4b01      	ldr	r3, [pc, #4]	; (8003d94 <__errno+0x8>)
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	2000000c 	.word	0x2000000c

08003d98 <__libc_init_array>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	4d0d      	ldr	r5, [pc, #52]	; (8003dd0 <__libc_init_array+0x38>)
 8003d9c:	4c0d      	ldr	r4, [pc, #52]	; (8003dd4 <__libc_init_array+0x3c>)
 8003d9e:	1b64      	subs	r4, r4, r5
 8003da0:	10a4      	asrs	r4, r4, #2
 8003da2:	2600      	movs	r6, #0
 8003da4:	42a6      	cmp	r6, r4
 8003da6:	d109      	bne.n	8003dbc <__libc_init_array+0x24>
 8003da8:	4d0b      	ldr	r5, [pc, #44]	; (8003dd8 <__libc_init_array+0x40>)
 8003daa:	4c0c      	ldr	r4, [pc, #48]	; (8003ddc <__libc_init_array+0x44>)
 8003dac:	f000 fc8e 	bl	80046cc <_init>
 8003db0:	1b64      	subs	r4, r4, r5
 8003db2:	10a4      	asrs	r4, r4, #2
 8003db4:	2600      	movs	r6, #0
 8003db6:	42a6      	cmp	r6, r4
 8003db8:	d105      	bne.n	8003dc6 <__libc_init_array+0x2e>
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dc0:	4798      	blx	r3
 8003dc2:	3601      	adds	r6, #1
 8003dc4:	e7ee      	b.n	8003da4 <__libc_init_array+0xc>
 8003dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dca:	4798      	blx	r3
 8003dcc:	3601      	adds	r6, #1
 8003dce:	e7f2      	b.n	8003db6 <__libc_init_array+0x1e>
 8003dd0:	08004754 	.word	0x08004754
 8003dd4:	08004754 	.word	0x08004754
 8003dd8:	08004754 	.word	0x08004754
 8003ddc:	08004758 	.word	0x08004758

08003de0 <memset>:
 8003de0:	4402      	add	r2, r0
 8003de2:	4603      	mov	r3, r0
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d100      	bne.n	8003dea <memset+0xa>
 8003de8:	4770      	bx	lr
 8003dea:	f803 1b01 	strb.w	r1, [r3], #1
 8003dee:	e7f9      	b.n	8003de4 <memset+0x4>

08003df0 <siprintf>:
 8003df0:	b40e      	push	{r1, r2, r3}
 8003df2:	b500      	push	{lr}
 8003df4:	b09c      	sub	sp, #112	; 0x70
 8003df6:	ab1d      	add	r3, sp, #116	; 0x74
 8003df8:	9002      	str	r0, [sp, #8]
 8003dfa:	9006      	str	r0, [sp, #24]
 8003dfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e00:	4809      	ldr	r0, [pc, #36]	; (8003e28 <siprintf+0x38>)
 8003e02:	9107      	str	r1, [sp, #28]
 8003e04:	9104      	str	r1, [sp, #16]
 8003e06:	4909      	ldr	r1, [pc, #36]	; (8003e2c <siprintf+0x3c>)
 8003e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e0c:	9105      	str	r1, [sp, #20]
 8003e0e:	6800      	ldr	r0, [r0, #0]
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	a902      	add	r1, sp, #8
 8003e14:	f000 f868 	bl	8003ee8 <_svfiprintf_r>
 8003e18:	9b02      	ldr	r3, [sp, #8]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	b01c      	add	sp, #112	; 0x70
 8003e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e24:	b003      	add	sp, #12
 8003e26:	4770      	bx	lr
 8003e28:	2000000c 	.word	0x2000000c
 8003e2c:	ffff0208 	.word	0xffff0208

08003e30 <__ssputs_r>:
 8003e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e34:	688e      	ldr	r6, [r1, #8]
 8003e36:	429e      	cmp	r6, r3
 8003e38:	4682      	mov	sl, r0
 8003e3a:	460c      	mov	r4, r1
 8003e3c:	4690      	mov	r8, r2
 8003e3e:	461f      	mov	r7, r3
 8003e40:	d838      	bhi.n	8003eb4 <__ssputs_r+0x84>
 8003e42:	898a      	ldrh	r2, [r1, #12]
 8003e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e48:	d032      	beq.n	8003eb0 <__ssputs_r+0x80>
 8003e4a:	6825      	ldr	r5, [r4, #0]
 8003e4c:	6909      	ldr	r1, [r1, #16]
 8003e4e:	eba5 0901 	sub.w	r9, r5, r1
 8003e52:	6965      	ldr	r5, [r4, #20]
 8003e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	444b      	add	r3, r9
 8003e60:	106d      	asrs	r5, r5, #1
 8003e62:	429d      	cmp	r5, r3
 8003e64:	bf38      	it	cc
 8003e66:	461d      	movcc	r5, r3
 8003e68:	0553      	lsls	r3, r2, #21
 8003e6a:	d531      	bpl.n	8003ed0 <__ssputs_r+0xa0>
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	f000 fb63 	bl	8004538 <_malloc_r>
 8003e72:	4606      	mov	r6, r0
 8003e74:	b950      	cbnz	r0, 8003e8c <__ssputs_r+0x5c>
 8003e76:	230c      	movs	r3, #12
 8003e78:	f8ca 3000 	str.w	r3, [sl]
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e82:	81a3      	strh	r3, [r4, #12]
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8c:	6921      	ldr	r1, [r4, #16]
 8003e8e:	464a      	mov	r2, r9
 8003e90:	f000 fabe 	bl	8004410 <memcpy>
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	6126      	str	r6, [r4, #16]
 8003ea2:	6165      	str	r5, [r4, #20]
 8003ea4:	444e      	add	r6, r9
 8003ea6:	eba5 0509 	sub.w	r5, r5, r9
 8003eaa:	6026      	str	r6, [r4, #0]
 8003eac:	60a5      	str	r5, [r4, #8]
 8003eae:	463e      	mov	r6, r7
 8003eb0:	42be      	cmp	r6, r7
 8003eb2:	d900      	bls.n	8003eb6 <__ssputs_r+0x86>
 8003eb4:	463e      	mov	r6, r7
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	4632      	mov	r2, r6
 8003eba:	4641      	mov	r1, r8
 8003ebc:	f000 fab6 	bl	800442c <memmove>
 8003ec0:	68a3      	ldr	r3, [r4, #8]
 8003ec2:	1b9b      	subs	r3, r3, r6
 8003ec4:	60a3      	str	r3, [r4, #8]
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	4433      	add	r3, r6
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	e7db      	b.n	8003e88 <__ssputs_r+0x58>
 8003ed0:	462a      	mov	r2, r5
 8003ed2:	f000 fba5 	bl	8004620 <_realloc_r>
 8003ed6:	4606      	mov	r6, r0
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d1e1      	bne.n	8003ea0 <__ssputs_r+0x70>
 8003edc:	6921      	ldr	r1, [r4, #16]
 8003ede:	4650      	mov	r0, sl
 8003ee0:	f000 fabe 	bl	8004460 <_free_r>
 8003ee4:	e7c7      	b.n	8003e76 <__ssputs_r+0x46>
	...

08003ee8 <_svfiprintf_r>:
 8003ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eec:	4698      	mov	r8, r3
 8003eee:	898b      	ldrh	r3, [r1, #12]
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	b09d      	sub	sp, #116	; 0x74
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	460d      	mov	r5, r1
 8003ef8:	4614      	mov	r4, r2
 8003efa:	d50e      	bpl.n	8003f1a <_svfiprintf_r+0x32>
 8003efc:	690b      	ldr	r3, [r1, #16]
 8003efe:	b963      	cbnz	r3, 8003f1a <_svfiprintf_r+0x32>
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	f000 fb19 	bl	8004538 <_malloc_r>
 8003f06:	6028      	str	r0, [r5, #0]
 8003f08:	6128      	str	r0, [r5, #16]
 8003f0a:	b920      	cbnz	r0, 8003f16 <_svfiprintf_r+0x2e>
 8003f0c:	230c      	movs	r3, #12
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f14:	e0d1      	b.n	80040ba <_svfiprintf_r+0x1d2>
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	616b      	str	r3, [r5, #20]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f1e:	2320      	movs	r3, #32
 8003f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f28:	2330      	movs	r3, #48	; 0x30
 8003f2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040d4 <_svfiprintf_r+0x1ec>
 8003f2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f32:	f04f 0901 	mov.w	r9, #1
 8003f36:	4623      	mov	r3, r4
 8003f38:	469a      	mov	sl, r3
 8003f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f3e:	b10a      	cbz	r2, 8003f44 <_svfiprintf_r+0x5c>
 8003f40:	2a25      	cmp	r2, #37	; 0x25
 8003f42:	d1f9      	bne.n	8003f38 <_svfiprintf_r+0x50>
 8003f44:	ebba 0b04 	subs.w	fp, sl, r4
 8003f48:	d00b      	beq.n	8003f62 <_svfiprintf_r+0x7a>
 8003f4a:	465b      	mov	r3, fp
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	4629      	mov	r1, r5
 8003f50:	4638      	mov	r0, r7
 8003f52:	f7ff ff6d 	bl	8003e30 <__ssputs_r>
 8003f56:	3001      	adds	r0, #1
 8003f58:	f000 80aa 	beq.w	80040b0 <_svfiprintf_r+0x1c8>
 8003f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f5e:	445a      	add	r2, fp
 8003f60:	9209      	str	r2, [sp, #36]	; 0x24
 8003f62:	f89a 3000 	ldrb.w	r3, [sl]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 80a2 	beq.w	80040b0 <_svfiprintf_r+0x1c8>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f76:	f10a 0a01 	add.w	sl, sl, #1
 8003f7a:	9304      	str	r3, [sp, #16]
 8003f7c:	9307      	str	r3, [sp, #28]
 8003f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f82:	931a      	str	r3, [sp, #104]	; 0x68
 8003f84:	4654      	mov	r4, sl
 8003f86:	2205      	movs	r2, #5
 8003f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f8c:	4851      	ldr	r0, [pc, #324]	; (80040d4 <_svfiprintf_r+0x1ec>)
 8003f8e:	f7fc f927 	bl	80001e0 <memchr>
 8003f92:	9a04      	ldr	r2, [sp, #16]
 8003f94:	b9d8      	cbnz	r0, 8003fce <_svfiprintf_r+0xe6>
 8003f96:	06d0      	lsls	r0, r2, #27
 8003f98:	bf44      	itt	mi
 8003f9a:	2320      	movmi	r3, #32
 8003f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa0:	0711      	lsls	r1, r2, #28
 8003fa2:	bf44      	itt	mi
 8003fa4:	232b      	movmi	r3, #43	; 0x2b
 8003fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003faa:	f89a 3000 	ldrb.w	r3, [sl]
 8003fae:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb0:	d015      	beq.n	8003fde <_svfiprintf_r+0xf6>
 8003fb2:	9a07      	ldr	r2, [sp, #28]
 8003fb4:	4654      	mov	r4, sl
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	f04f 0c0a 	mov.w	ip, #10
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fc2:	3b30      	subs	r3, #48	; 0x30
 8003fc4:	2b09      	cmp	r3, #9
 8003fc6:	d94e      	bls.n	8004066 <_svfiprintf_r+0x17e>
 8003fc8:	b1b0      	cbz	r0, 8003ff8 <_svfiprintf_r+0x110>
 8003fca:	9207      	str	r2, [sp, #28]
 8003fcc:	e014      	b.n	8003ff8 <_svfiprintf_r+0x110>
 8003fce:	eba0 0308 	sub.w	r3, r0, r8
 8003fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	9304      	str	r3, [sp, #16]
 8003fda:	46a2      	mov	sl, r4
 8003fdc:	e7d2      	b.n	8003f84 <_svfiprintf_r+0x9c>
 8003fde:	9b03      	ldr	r3, [sp, #12]
 8003fe0:	1d19      	adds	r1, r3, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	9103      	str	r1, [sp, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bfbb      	ittet	lt
 8003fea:	425b      	neglt	r3, r3
 8003fec:	f042 0202 	orrlt.w	r2, r2, #2
 8003ff0:	9307      	strge	r3, [sp, #28]
 8003ff2:	9307      	strlt	r3, [sp, #28]
 8003ff4:	bfb8      	it	lt
 8003ff6:	9204      	strlt	r2, [sp, #16]
 8003ff8:	7823      	ldrb	r3, [r4, #0]
 8003ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8003ffc:	d10c      	bne.n	8004018 <_svfiprintf_r+0x130>
 8003ffe:	7863      	ldrb	r3, [r4, #1]
 8004000:	2b2a      	cmp	r3, #42	; 0x2a
 8004002:	d135      	bne.n	8004070 <_svfiprintf_r+0x188>
 8004004:	9b03      	ldr	r3, [sp, #12]
 8004006:	1d1a      	adds	r2, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	9203      	str	r2, [sp, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfb8      	it	lt
 8004010:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004014:	3402      	adds	r4, #2
 8004016:	9305      	str	r3, [sp, #20]
 8004018:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040e4 <_svfiprintf_r+0x1fc>
 800401c:	7821      	ldrb	r1, [r4, #0]
 800401e:	2203      	movs	r2, #3
 8004020:	4650      	mov	r0, sl
 8004022:	f7fc f8dd 	bl	80001e0 <memchr>
 8004026:	b140      	cbz	r0, 800403a <_svfiprintf_r+0x152>
 8004028:	2340      	movs	r3, #64	; 0x40
 800402a:	eba0 000a 	sub.w	r0, r0, sl
 800402e:	fa03 f000 	lsl.w	r0, r3, r0
 8004032:	9b04      	ldr	r3, [sp, #16]
 8004034:	4303      	orrs	r3, r0
 8004036:	3401      	adds	r4, #1
 8004038:	9304      	str	r3, [sp, #16]
 800403a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800403e:	4826      	ldr	r0, [pc, #152]	; (80040d8 <_svfiprintf_r+0x1f0>)
 8004040:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004044:	2206      	movs	r2, #6
 8004046:	f7fc f8cb 	bl	80001e0 <memchr>
 800404a:	2800      	cmp	r0, #0
 800404c:	d038      	beq.n	80040c0 <_svfiprintf_r+0x1d8>
 800404e:	4b23      	ldr	r3, [pc, #140]	; (80040dc <_svfiprintf_r+0x1f4>)
 8004050:	bb1b      	cbnz	r3, 800409a <_svfiprintf_r+0x1b2>
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	3307      	adds	r3, #7
 8004056:	f023 0307 	bic.w	r3, r3, #7
 800405a:	3308      	adds	r3, #8
 800405c:	9303      	str	r3, [sp, #12]
 800405e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004060:	4433      	add	r3, r6
 8004062:	9309      	str	r3, [sp, #36]	; 0x24
 8004064:	e767      	b.n	8003f36 <_svfiprintf_r+0x4e>
 8004066:	fb0c 3202 	mla	r2, ip, r2, r3
 800406a:	460c      	mov	r4, r1
 800406c:	2001      	movs	r0, #1
 800406e:	e7a5      	b.n	8003fbc <_svfiprintf_r+0xd4>
 8004070:	2300      	movs	r3, #0
 8004072:	3401      	adds	r4, #1
 8004074:	9305      	str	r3, [sp, #20]
 8004076:	4619      	mov	r1, r3
 8004078:	f04f 0c0a 	mov.w	ip, #10
 800407c:	4620      	mov	r0, r4
 800407e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004082:	3a30      	subs	r2, #48	; 0x30
 8004084:	2a09      	cmp	r2, #9
 8004086:	d903      	bls.n	8004090 <_svfiprintf_r+0x1a8>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0c5      	beq.n	8004018 <_svfiprintf_r+0x130>
 800408c:	9105      	str	r1, [sp, #20]
 800408e:	e7c3      	b.n	8004018 <_svfiprintf_r+0x130>
 8004090:	fb0c 2101 	mla	r1, ip, r1, r2
 8004094:	4604      	mov	r4, r0
 8004096:	2301      	movs	r3, #1
 8004098:	e7f0      	b.n	800407c <_svfiprintf_r+0x194>
 800409a:	ab03      	add	r3, sp, #12
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	462a      	mov	r2, r5
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <_svfiprintf_r+0x1f8>)
 80040a2:	a904      	add	r1, sp, #16
 80040a4:	4638      	mov	r0, r7
 80040a6:	f3af 8000 	nop.w
 80040aa:	1c42      	adds	r2, r0, #1
 80040ac:	4606      	mov	r6, r0
 80040ae:	d1d6      	bne.n	800405e <_svfiprintf_r+0x176>
 80040b0:	89ab      	ldrh	r3, [r5, #12]
 80040b2:	065b      	lsls	r3, r3, #25
 80040b4:	f53f af2c 	bmi.w	8003f10 <_svfiprintf_r+0x28>
 80040b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ba:	b01d      	add	sp, #116	; 0x74
 80040bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c0:	ab03      	add	r3, sp, #12
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	462a      	mov	r2, r5
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <_svfiprintf_r+0x1f8>)
 80040c8:	a904      	add	r1, sp, #16
 80040ca:	4638      	mov	r0, r7
 80040cc:	f000 f87a 	bl	80041c4 <_printf_i>
 80040d0:	e7eb      	b.n	80040aa <_svfiprintf_r+0x1c2>
 80040d2:	bf00      	nop
 80040d4:	08004718 	.word	0x08004718
 80040d8:	08004722 	.word	0x08004722
 80040dc:	00000000 	.word	0x00000000
 80040e0:	08003e31 	.word	0x08003e31
 80040e4:	0800471e 	.word	0x0800471e

080040e8 <_printf_common>:
 80040e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	4616      	mov	r6, r2
 80040ee:	4699      	mov	r9, r3
 80040f0:	688a      	ldr	r2, [r1, #8]
 80040f2:	690b      	ldr	r3, [r1, #16]
 80040f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	bfb8      	it	lt
 80040fc:	4613      	movlt	r3, r2
 80040fe:	6033      	str	r3, [r6, #0]
 8004100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004104:	4607      	mov	r7, r0
 8004106:	460c      	mov	r4, r1
 8004108:	b10a      	cbz	r2, 800410e <_printf_common+0x26>
 800410a:	3301      	adds	r3, #1
 800410c:	6033      	str	r3, [r6, #0]
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	0699      	lsls	r1, r3, #26
 8004112:	bf42      	ittt	mi
 8004114:	6833      	ldrmi	r3, [r6, #0]
 8004116:	3302      	addmi	r3, #2
 8004118:	6033      	strmi	r3, [r6, #0]
 800411a:	6825      	ldr	r5, [r4, #0]
 800411c:	f015 0506 	ands.w	r5, r5, #6
 8004120:	d106      	bne.n	8004130 <_printf_common+0x48>
 8004122:	f104 0a19 	add.w	sl, r4, #25
 8004126:	68e3      	ldr	r3, [r4, #12]
 8004128:	6832      	ldr	r2, [r6, #0]
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	42ab      	cmp	r3, r5
 800412e:	dc26      	bgt.n	800417e <_printf_common+0x96>
 8004130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004134:	1e13      	subs	r3, r2, #0
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	bf18      	it	ne
 800413a:	2301      	movne	r3, #1
 800413c:	0692      	lsls	r2, r2, #26
 800413e:	d42b      	bmi.n	8004198 <_printf_common+0xb0>
 8004140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004144:	4649      	mov	r1, r9
 8004146:	4638      	mov	r0, r7
 8004148:	47c0      	blx	r8
 800414a:	3001      	adds	r0, #1
 800414c:	d01e      	beq.n	800418c <_printf_common+0xa4>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	68e5      	ldr	r5, [r4, #12]
 8004152:	6832      	ldr	r2, [r6, #0]
 8004154:	f003 0306 	and.w	r3, r3, #6
 8004158:	2b04      	cmp	r3, #4
 800415a:	bf08      	it	eq
 800415c:	1aad      	subeq	r5, r5, r2
 800415e:	68a3      	ldr	r3, [r4, #8]
 8004160:	6922      	ldr	r2, [r4, #16]
 8004162:	bf0c      	ite	eq
 8004164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004168:	2500      	movne	r5, #0
 800416a:	4293      	cmp	r3, r2
 800416c:	bfc4      	itt	gt
 800416e:	1a9b      	subgt	r3, r3, r2
 8004170:	18ed      	addgt	r5, r5, r3
 8004172:	2600      	movs	r6, #0
 8004174:	341a      	adds	r4, #26
 8004176:	42b5      	cmp	r5, r6
 8004178:	d11a      	bne.n	80041b0 <_printf_common+0xc8>
 800417a:	2000      	movs	r0, #0
 800417c:	e008      	b.n	8004190 <_printf_common+0xa8>
 800417e:	2301      	movs	r3, #1
 8004180:	4652      	mov	r2, sl
 8004182:	4649      	mov	r1, r9
 8004184:	4638      	mov	r0, r7
 8004186:	47c0      	blx	r8
 8004188:	3001      	adds	r0, #1
 800418a:	d103      	bne.n	8004194 <_printf_common+0xac>
 800418c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004194:	3501      	adds	r5, #1
 8004196:	e7c6      	b.n	8004126 <_printf_common+0x3e>
 8004198:	18e1      	adds	r1, r4, r3
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	2030      	movs	r0, #48	; 0x30
 800419e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041a2:	4422      	add	r2, r4
 80041a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041ac:	3302      	adds	r3, #2
 80041ae:	e7c7      	b.n	8004140 <_printf_common+0x58>
 80041b0:	2301      	movs	r3, #1
 80041b2:	4622      	mov	r2, r4
 80041b4:	4649      	mov	r1, r9
 80041b6:	4638      	mov	r0, r7
 80041b8:	47c0      	blx	r8
 80041ba:	3001      	adds	r0, #1
 80041bc:	d0e6      	beq.n	800418c <_printf_common+0xa4>
 80041be:	3601      	adds	r6, #1
 80041c0:	e7d9      	b.n	8004176 <_printf_common+0x8e>
	...

080041c4 <_printf_i>:
 80041c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c8:	7e0f      	ldrb	r7, [r1, #24]
 80041ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041cc:	2f78      	cmp	r7, #120	; 0x78
 80041ce:	4691      	mov	r9, r2
 80041d0:	4680      	mov	r8, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	469a      	mov	sl, r3
 80041d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041da:	d807      	bhi.n	80041ec <_printf_i+0x28>
 80041dc:	2f62      	cmp	r7, #98	; 0x62
 80041de:	d80a      	bhi.n	80041f6 <_printf_i+0x32>
 80041e0:	2f00      	cmp	r7, #0
 80041e2:	f000 80d8 	beq.w	8004396 <_printf_i+0x1d2>
 80041e6:	2f58      	cmp	r7, #88	; 0x58
 80041e8:	f000 80a3 	beq.w	8004332 <_printf_i+0x16e>
 80041ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041f4:	e03a      	b.n	800426c <_printf_i+0xa8>
 80041f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041fa:	2b15      	cmp	r3, #21
 80041fc:	d8f6      	bhi.n	80041ec <_printf_i+0x28>
 80041fe:	a101      	add	r1, pc, #4	; (adr r1, 8004204 <_printf_i+0x40>)
 8004200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004204:	0800425d 	.word	0x0800425d
 8004208:	08004271 	.word	0x08004271
 800420c:	080041ed 	.word	0x080041ed
 8004210:	080041ed 	.word	0x080041ed
 8004214:	080041ed 	.word	0x080041ed
 8004218:	080041ed 	.word	0x080041ed
 800421c:	08004271 	.word	0x08004271
 8004220:	080041ed 	.word	0x080041ed
 8004224:	080041ed 	.word	0x080041ed
 8004228:	080041ed 	.word	0x080041ed
 800422c:	080041ed 	.word	0x080041ed
 8004230:	0800437d 	.word	0x0800437d
 8004234:	080042a1 	.word	0x080042a1
 8004238:	0800435f 	.word	0x0800435f
 800423c:	080041ed 	.word	0x080041ed
 8004240:	080041ed 	.word	0x080041ed
 8004244:	0800439f 	.word	0x0800439f
 8004248:	080041ed 	.word	0x080041ed
 800424c:	080042a1 	.word	0x080042a1
 8004250:	080041ed 	.word	0x080041ed
 8004254:	080041ed 	.word	0x080041ed
 8004258:	08004367 	.word	0x08004367
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	602a      	str	r2, [r5, #0]
 8004264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800426c:	2301      	movs	r3, #1
 800426e:	e0a3      	b.n	80043b8 <_printf_i+0x1f4>
 8004270:	6820      	ldr	r0, [r4, #0]
 8004272:	6829      	ldr	r1, [r5, #0]
 8004274:	0606      	lsls	r6, r0, #24
 8004276:	f101 0304 	add.w	r3, r1, #4
 800427a:	d50a      	bpl.n	8004292 <_printf_i+0xce>
 800427c:	680e      	ldr	r6, [r1, #0]
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	2e00      	cmp	r6, #0
 8004282:	da03      	bge.n	800428c <_printf_i+0xc8>
 8004284:	232d      	movs	r3, #45	; 0x2d
 8004286:	4276      	negs	r6, r6
 8004288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800428c:	485e      	ldr	r0, [pc, #376]	; (8004408 <_printf_i+0x244>)
 800428e:	230a      	movs	r3, #10
 8004290:	e019      	b.n	80042c6 <_printf_i+0x102>
 8004292:	680e      	ldr	r6, [r1, #0]
 8004294:	602b      	str	r3, [r5, #0]
 8004296:	f010 0f40 	tst.w	r0, #64	; 0x40
 800429a:	bf18      	it	ne
 800429c:	b236      	sxthne	r6, r6
 800429e:	e7ef      	b.n	8004280 <_printf_i+0xbc>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	6820      	ldr	r0, [r4, #0]
 80042a4:	1d19      	adds	r1, r3, #4
 80042a6:	6029      	str	r1, [r5, #0]
 80042a8:	0601      	lsls	r1, r0, #24
 80042aa:	d501      	bpl.n	80042b0 <_printf_i+0xec>
 80042ac:	681e      	ldr	r6, [r3, #0]
 80042ae:	e002      	b.n	80042b6 <_printf_i+0xf2>
 80042b0:	0646      	lsls	r6, r0, #25
 80042b2:	d5fb      	bpl.n	80042ac <_printf_i+0xe8>
 80042b4:	881e      	ldrh	r6, [r3, #0]
 80042b6:	4854      	ldr	r0, [pc, #336]	; (8004408 <_printf_i+0x244>)
 80042b8:	2f6f      	cmp	r7, #111	; 0x6f
 80042ba:	bf0c      	ite	eq
 80042bc:	2308      	moveq	r3, #8
 80042be:	230a      	movne	r3, #10
 80042c0:	2100      	movs	r1, #0
 80042c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042c6:	6865      	ldr	r5, [r4, #4]
 80042c8:	60a5      	str	r5, [r4, #8]
 80042ca:	2d00      	cmp	r5, #0
 80042cc:	bfa2      	ittt	ge
 80042ce:	6821      	ldrge	r1, [r4, #0]
 80042d0:	f021 0104 	bicge.w	r1, r1, #4
 80042d4:	6021      	strge	r1, [r4, #0]
 80042d6:	b90e      	cbnz	r6, 80042dc <_printf_i+0x118>
 80042d8:	2d00      	cmp	r5, #0
 80042da:	d04d      	beq.n	8004378 <_printf_i+0x1b4>
 80042dc:	4615      	mov	r5, r2
 80042de:	fbb6 f1f3 	udiv	r1, r6, r3
 80042e2:	fb03 6711 	mls	r7, r3, r1, r6
 80042e6:	5dc7      	ldrb	r7, [r0, r7]
 80042e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042ec:	4637      	mov	r7, r6
 80042ee:	42bb      	cmp	r3, r7
 80042f0:	460e      	mov	r6, r1
 80042f2:	d9f4      	bls.n	80042de <_printf_i+0x11a>
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d10b      	bne.n	8004310 <_printf_i+0x14c>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	07de      	lsls	r6, r3, #31
 80042fc:	d508      	bpl.n	8004310 <_printf_i+0x14c>
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	6861      	ldr	r1, [r4, #4]
 8004302:	4299      	cmp	r1, r3
 8004304:	bfde      	ittt	le
 8004306:	2330      	movle	r3, #48	; 0x30
 8004308:	f805 3c01 	strble.w	r3, [r5, #-1]
 800430c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004310:	1b52      	subs	r2, r2, r5
 8004312:	6122      	str	r2, [r4, #16]
 8004314:	f8cd a000 	str.w	sl, [sp]
 8004318:	464b      	mov	r3, r9
 800431a:	aa03      	add	r2, sp, #12
 800431c:	4621      	mov	r1, r4
 800431e:	4640      	mov	r0, r8
 8004320:	f7ff fee2 	bl	80040e8 <_printf_common>
 8004324:	3001      	adds	r0, #1
 8004326:	d14c      	bne.n	80043c2 <_printf_i+0x1fe>
 8004328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800432c:	b004      	add	sp, #16
 800432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004332:	4835      	ldr	r0, [pc, #212]	; (8004408 <_printf_i+0x244>)
 8004334:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004338:	6829      	ldr	r1, [r5, #0]
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004340:	6029      	str	r1, [r5, #0]
 8004342:	061d      	lsls	r5, r3, #24
 8004344:	d514      	bpl.n	8004370 <_printf_i+0x1ac>
 8004346:	07df      	lsls	r7, r3, #31
 8004348:	bf44      	itt	mi
 800434a:	f043 0320 	orrmi.w	r3, r3, #32
 800434e:	6023      	strmi	r3, [r4, #0]
 8004350:	b91e      	cbnz	r6, 800435a <_printf_i+0x196>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	f023 0320 	bic.w	r3, r3, #32
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	2310      	movs	r3, #16
 800435c:	e7b0      	b.n	80042c0 <_printf_i+0xfc>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	f043 0320 	orr.w	r3, r3, #32
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	2378      	movs	r3, #120	; 0x78
 8004368:	4828      	ldr	r0, [pc, #160]	; (800440c <_printf_i+0x248>)
 800436a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800436e:	e7e3      	b.n	8004338 <_printf_i+0x174>
 8004370:	0659      	lsls	r1, r3, #25
 8004372:	bf48      	it	mi
 8004374:	b2b6      	uxthmi	r6, r6
 8004376:	e7e6      	b.n	8004346 <_printf_i+0x182>
 8004378:	4615      	mov	r5, r2
 800437a:	e7bb      	b.n	80042f4 <_printf_i+0x130>
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	6826      	ldr	r6, [r4, #0]
 8004380:	6961      	ldr	r1, [r4, #20]
 8004382:	1d18      	adds	r0, r3, #4
 8004384:	6028      	str	r0, [r5, #0]
 8004386:	0635      	lsls	r5, r6, #24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	d501      	bpl.n	8004390 <_printf_i+0x1cc>
 800438c:	6019      	str	r1, [r3, #0]
 800438e:	e002      	b.n	8004396 <_printf_i+0x1d2>
 8004390:	0670      	lsls	r0, r6, #25
 8004392:	d5fb      	bpl.n	800438c <_printf_i+0x1c8>
 8004394:	8019      	strh	r1, [r3, #0]
 8004396:	2300      	movs	r3, #0
 8004398:	6123      	str	r3, [r4, #16]
 800439a:	4615      	mov	r5, r2
 800439c:	e7ba      	b.n	8004314 <_printf_i+0x150>
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	1d1a      	adds	r2, r3, #4
 80043a2:	602a      	str	r2, [r5, #0]
 80043a4:	681d      	ldr	r5, [r3, #0]
 80043a6:	6862      	ldr	r2, [r4, #4]
 80043a8:	2100      	movs	r1, #0
 80043aa:	4628      	mov	r0, r5
 80043ac:	f7fb ff18 	bl	80001e0 <memchr>
 80043b0:	b108      	cbz	r0, 80043b6 <_printf_i+0x1f2>
 80043b2:	1b40      	subs	r0, r0, r5
 80043b4:	6060      	str	r0, [r4, #4]
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	2300      	movs	r3, #0
 80043bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c0:	e7a8      	b.n	8004314 <_printf_i+0x150>
 80043c2:	6923      	ldr	r3, [r4, #16]
 80043c4:	462a      	mov	r2, r5
 80043c6:	4649      	mov	r1, r9
 80043c8:	4640      	mov	r0, r8
 80043ca:	47d0      	blx	sl
 80043cc:	3001      	adds	r0, #1
 80043ce:	d0ab      	beq.n	8004328 <_printf_i+0x164>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	079b      	lsls	r3, r3, #30
 80043d4:	d413      	bmi.n	80043fe <_printf_i+0x23a>
 80043d6:	68e0      	ldr	r0, [r4, #12]
 80043d8:	9b03      	ldr	r3, [sp, #12]
 80043da:	4298      	cmp	r0, r3
 80043dc:	bfb8      	it	lt
 80043de:	4618      	movlt	r0, r3
 80043e0:	e7a4      	b.n	800432c <_printf_i+0x168>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4632      	mov	r2, r6
 80043e6:	4649      	mov	r1, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	47d0      	blx	sl
 80043ec:	3001      	adds	r0, #1
 80043ee:	d09b      	beq.n	8004328 <_printf_i+0x164>
 80043f0:	3501      	adds	r5, #1
 80043f2:	68e3      	ldr	r3, [r4, #12]
 80043f4:	9903      	ldr	r1, [sp, #12]
 80043f6:	1a5b      	subs	r3, r3, r1
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	dcf2      	bgt.n	80043e2 <_printf_i+0x21e>
 80043fc:	e7eb      	b.n	80043d6 <_printf_i+0x212>
 80043fe:	2500      	movs	r5, #0
 8004400:	f104 0619 	add.w	r6, r4, #25
 8004404:	e7f5      	b.n	80043f2 <_printf_i+0x22e>
 8004406:	bf00      	nop
 8004408:	08004729 	.word	0x08004729
 800440c:	0800473a 	.word	0x0800473a

08004410 <memcpy>:
 8004410:	440a      	add	r2, r1
 8004412:	4291      	cmp	r1, r2
 8004414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004418:	d100      	bne.n	800441c <memcpy+0xc>
 800441a:	4770      	bx	lr
 800441c:	b510      	push	{r4, lr}
 800441e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004426:	4291      	cmp	r1, r2
 8004428:	d1f9      	bne.n	800441e <memcpy+0xe>
 800442a:	bd10      	pop	{r4, pc}

0800442c <memmove>:
 800442c:	4288      	cmp	r0, r1
 800442e:	b510      	push	{r4, lr}
 8004430:	eb01 0402 	add.w	r4, r1, r2
 8004434:	d902      	bls.n	800443c <memmove+0x10>
 8004436:	4284      	cmp	r4, r0
 8004438:	4623      	mov	r3, r4
 800443a:	d807      	bhi.n	800444c <memmove+0x20>
 800443c:	1e43      	subs	r3, r0, #1
 800443e:	42a1      	cmp	r1, r4
 8004440:	d008      	beq.n	8004454 <memmove+0x28>
 8004442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800444a:	e7f8      	b.n	800443e <memmove+0x12>
 800444c:	4402      	add	r2, r0
 800444e:	4601      	mov	r1, r0
 8004450:	428a      	cmp	r2, r1
 8004452:	d100      	bne.n	8004456 <memmove+0x2a>
 8004454:	bd10      	pop	{r4, pc}
 8004456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800445a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800445e:	e7f7      	b.n	8004450 <memmove+0x24>

08004460 <_free_r>:
 8004460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004462:	2900      	cmp	r1, #0
 8004464:	d044      	beq.n	80044f0 <_free_r+0x90>
 8004466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800446a:	9001      	str	r0, [sp, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f1a1 0404 	sub.w	r4, r1, #4
 8004472:	bfb8      	it	lt
 8004474:	18e4      	addlt	r4, r4, r3
 8004476:	f000 f913 	bl	80046a0 <__malloc_lock>
 800447a:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <_free_r+0x94>)
 800447c:	9801      	ldr	r0, [sp, #4]
 800447e:	6813      	ldr	r3, [r2, #0]
 8004480:	b933      	cbnz	r3, 8004490 <_free_r+0x30>
 8004482:	6063      	str	r3, [r4, #4]
 8004484:	6014      	str	r4, [r2, #0]
 8004486:	b003      	add	sp, #12
 8004488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800448c:	f000 b90e 	b.w	80046ac <__malloc_unlock>
 8004490:	42a3      	cmp	r3, r4
 8004492:	d908      	bls.n	80044a6 <_free_r+0x46>
 8004494:	6825      	ldr	r5, [r4, #0]
 8004496:	1961      	adds	r1, r4, r5
 8004498:	428b      	cmp	r3, r1
 800449a:	bf01      	itttt	eq
 800449c:	6819      	ldreq	r1, [r3, #0]
 800449e:	685b      	ldreq	r3, [r3, #4]
 80044a0:	1949      	addeq	r1, r1, r5
 80044a2:	6021      	streq	r1, [r4, #0]
 80044a4:	e7ed      	b.n	8004482 <_free_r+0x22>
 80044a6:	461a      	mov	r2, r3
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	b10b      	cbz	r3, 80044b0 <_free_r+0x50>
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	d9fa      	bls.n	80044a6 <_free_r+0x46>
 80044b0:	6811      	ldr	r1, [r2, #0]
 80044b2:	1855      	adds	r5, r2, r1
 80044b4:	42a5      	cmp	r5, r4
 80044b6:	d10b      	bne.n	80044d0 <_free_r+0x70>
 80044b8:	6824      	ldr	r4, [r4, #0]
 80044ba:	4421      	add	r1, r4
 80044bc:	1854      	adds	r4, r2, r1
 80044be:	42a3      	cmp	r3, r4
 80044c0:	6011      	str	r1, [r2, #0]
 80044c2:	d1e0      	bne.n	8004486 <_free_r+0x26>
 80044c4:	681c      	ldr	r4, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	6053      	str	r3, [r2, #4]
 80044ca:	4421      	add	r1, r4
 80044cc:	6011      	str	r1, [r2, #0]
 80044ce:	e7da      	b.n	8004486 <_free_r+0x26>
 80044d0:	d902      	bls.n	80044d8 <_free_r+0x78>
 80044d2:	230c      	movs	r3, #12
 80044d4:	6003      	str	r3, [r0, #0]
 80044d6:	e7d6      	b.n	8004486 <_free_r+0x26>
 80044d8:	6825      	ldr	r5, [r4, #0]
 80044da:	1961      	adds	r1, r4, r5
 80044dc:	428b      	cmp	r3, r1
 80044de:	bf04      	itt	eq
 80044e0:	6819      	ldreq	r1, [r3, #0]
 80044e2:	685b      	ldreq	r3, [r3, #4]
 80044e4:	6063      	str	r3, [r4, #4]
 80044e6:	bf04      	itt	eq
 80044e8:	1949      	addeq	r1, r1, r5
 80044ea:	6021      	streq	r1, [r4, #0]
 80044ec:	6054      	str	r4, [r2, #4]
 80044ee:	e7ca      	b.n	8004486 <_free_r+0x26>
 80044f0:	b003      	add	sp, #12
 80044f2:	bd30      	pop	{r4, r5, pc}
 80044f4:	200001e4 	.word	0x200001e4

080044f8 <sbrk_aligned>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	4e0e      	ldr	r6, [pc, #56]	; (8004534 <sbrk_aligned+0x3c>)
 80044fc:	460c      	mov	r4, r1
 80044fe:	6831      	ldr	r1, [r6, #0]
 8004500:	4605      	mov	r5, r0
 8004502:	b911      	cbnz	r1, 800450a <sbrk_aligned+0x12>
 8004504:	f000 f8bc 	bl	8004680 <_sbrk_r>
 8004508:	6030      	str	r0, [r6, #0]
 800450a:	4621      	mov	r1, r4
 800450c:	4628      	mov	r0, r5
 800450e:	f000 f8b7 	bl	8004680 <_sbrk_r>
 8004512:	1c43      	adds	r3, r0, #1
 8004514:	d00a      	beq.n	800452c <sbrk_aligned+0x34>
 8004516:	1cc4      	adds	r4, r0, #3
 8004518:	f024 0403 	bic.w	r4, r4, #3
 800451c:	42a0      	cmp	r0, r4
 800451e:	d007      	beq.n	8004530 <sbrk_aligned+0x38>
 8004520:	1a21      	subs	r1, r4, r0
 8004522:	4628      	mov	r0, r5
 8004524:	f000 f8ac 	bl	8004680 <_sbrk_r>
 8004528:	3001      	adds	r0, #1
 800452a:	d101      	bne.n	8004530 <sbrk_aligned+0x38>
 800452c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004530:	4620      	mov	r0, r4
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	200001e8 	.word	0x200001e8

08004538 <_malloc_r>:
 8004538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800453c:	1ccd      	adds	r5, r1, #3
 800453e:	f025 0503 	bic.w	r5, r5, #3
 8004542:	3508      	adds	r5, #8
 8004544:	2d0c      	cmp	r5, #12
 8004546:	bf38      	it	cc
 8004548:	250c      	movcc	r5, #12
 800454a:	2d00      	cmp	r5, #0
 800454c:	4607      	mov	r7, r0
 800454e:	db01      	blt.n	8004554 <_malloc_r+0x1c>
 8004550:	42a9      	cmp	r1, r5
 8004552:	d905      	bls.n	8004560 <_malloc_r+0x28>
 8004554:	230c      	movs	r3, #12
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	2600      	movs	r6, #0
 800455a:	4630      	mov	r0, r6
 800455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004560:	4e2e      	ldr	r6, [pc, #184]	; (800461c <_malloc_r+0xe4>)
 8004562:	f000 f89d 	bl	80046a0 <__malloc_lock>
 8004566:	6833      	ldr	r3, [r6, #0]
 8004568:	461c      	mov	r4, r3
 800456a:	bb34      	cbnz	r4, 80045ba <_malloc_r+0x82>
 800456c:	4629      	mov	r1, r5
 800456e:	4638      	mov	r0, r7
 8004570:	f7ff ffc2 	bl	80044f8 <sbrk_aligned>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	4604      	mov	r4, r0
 8004578:	d14d      	bne.n	8004616 <_malloc_r+0xde>
 800457a:	6834      	ldr	r4, [r6, #0]
 800457c:	4626      	mov	r6, r4
 800457e:	2e00      	cmp	r6, #0
 8004580:	d140      	bne.n	8004604 <_malloc_r+0xcc>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	4631      	mov	r1, r6
 8004586:	4638      	mov	r0, r7
 8004588:	eb04 0803 	add.w	r8, r4, r3
 800458c:	f000 f878 	bl	8004680 <_sbrk_r>
 8004590:	4580      	cmp	r8, r0
 8004592:	d13a      	bne.n	800460a <_malloc_r+0xd2>
 8004594:	6821      	ldr	r1, [r4, #0]
 8004596:	3503      	adds	r5, #3
 8004598:	1a6d      	subs	r5, r5, r1
 800459a:	f025 0503 	bic.w	r5, r5, #3
 800459e:	3508      	adds	r5, #8
 80045a0:	2d0c      	cmp	r5, #12
 80045a2:	bf38      	it	cc
 80045a4:	250c      	movcc	r5, #12
 80045a6:	4629      	mov	r1, r5
 80045a8:	4638      	mov	r0, r7
 80045aa:	f7ff ffa5 	bl	80044f8 <sbrk_aligned>
 80045ae:	3001      	adds	r0, #1
 80045b0:	d02b      	beq.n	800460a <_malloc_r+0xd2>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	442b      	add	r3, r5
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	e00e      	b.n	80045d8 <_malloc_r+0xa0>
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	1b52      	subs	r2, r2, r5
 80045be:	d41e      	bmi.n	80045fe <_malloc_r+0xc6>
 80045c0:	2a0b      	cmp	r2, #11
 80045c2:	d916      	bls.n	80045f2 <_malloc_r+0xba>
 80045c4:	1961      	adds	r1, r4, r5
 80045c6:	42a3      	cmp	r3, r4
 80045c8:	6025      	str	r5, [r4, #0]
 80045ca:	bf18      	it	ne
 80045cc:	6059      	strne	r1, [r3, #4]
 80045ce:	6863      	ldr	r3, [r4, #4]
 80045d0:	bf08      	it	eq
 80045d2:	6031      	streq	r1, [r6, #0]
 80045d4:	5162      	str	r2, [r4, r5]
 80045d6:	604b      	str	r3, [r1, #4]
 80045d8:	4638      	mov	r0, r7
 80045da:	f104 060b 	add.w	r6, r4, #11
 80045de:	f000 f865 	bl	80046ac <__malloc_unlock>
 80045e2:	f026 0607 	bic.w	r6, r6, #7
 80045e6:	1d23      	adds	r3, r4, #4
 80045e8:	1af2      	subs	r2, r6, r3
 80045ea:	d0b6      	beq.n	800455a <_malloc_r+0x22>
 80045ec:	1b9b      	subs	r3, r3, r6
 80045ee:	50a3      	str	r3, [r4, r2]
 80045f0:	e7b3      	b.n	800455a <_malloc_r+0x22>
 80045f2:	6862      	ldr	r2, [r4, #4]
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	bf0c      	ite	eq
 80045f8:	6032      	streq	r2, [r6, #0]
 80045fa:	605a      	strne	r2, [r3, #4]
 80045fc:	e7ec      	b.n	80045d8 <_malloc_r+0xa0>
 80045fe:	4623      	mov	r3, r4
 8004600:	6864      	ldr	r4, [r4, #4]
 8004602:	e7b2      	b.n	800456a <_malloc_r+0x32>
 8004604:	4634      	mov	r4, r6
 8004606:	6876      	ldr	r6, [r6, #4]
 8004608:	e7b9      	b.n	800457e <_malloc_r+0x46>
 800460a:	230c      	movs	r3, #12
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4638      	mov	r0, r7
 8004610:	f000 f84c 	bl	80046ac <__malloc_unlock>
 8004614:	e7a1      	b.n	800455a <_malloc_r+0x22>
 8004616:	6025      	str	r5, [r4, #0]
 8004618:	e7de      	b.n	80045d8 <_malloc_r+0xa0>
 800461a:	bf00      	nop
 800461c:	200001e4 	.word	0x200001e4

08004620 <_realloc_r>:
 8004620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004624:	4680      	mov	r8, r0
 8004626:	4614      	mov	r4, r2
 8004628:	460e      	mov	r6, r1
 800462a:	b921      	cbnz	r1, 8004636 <_realloc_r+0x16>
 800462c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004630:	4611      	mov	r1, r2
 8004632:	f7ff bf81 	b.w	8004538 <_malloc_r>
 8004636:	b92a      	cbnz	r2, 8004644 <_realloc_r+0x24>
 8004638:	f7ff ff12 	bl	8004460 <_free_r>
 800463c:	4625      	mov	r5, r4
 800463e:	4628      	mov	r0, r5
 8004640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004644:	f000 f838 	bl	80046b8 <_malloc_usable_size_r>
 8004648:	4284      	cmp	r4, r0
 800464a:	4607      	mov	r7, r0
 800464c:	d802      	bhi.n	8004654 <_realloc_r+0x34>
 800464e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004652:	d812      	bhi.n	800467a <_realloc_r+0x5a>
 8004654:	4621      	mov	r1, r4
 8004656:	4640      	mov	r0, r8
 8004658:	f7ff ff6e 	bl	8004538 <_malloc_r>
 800465c:	4605      	mov	r5, r0
 800465e:	2800      	cmp	r0, #0
 8004660:	d0ed      	beq.n	800463e <_realloc_r+0x1e>
 8004662:	42bc      	cmp	r4, r7
 8004664:	4622      	mov	r2, r4
 8004666:	4631      	mov	r1, r6
 8004668:	bf28      	it	cs
 800466a:	463a      	movcs	r2, r7
 800466c:	f7ff fed0 	bl	8004410 <memcpy>
 8004670:	4631      	mov	r1, r6
 8004672:	4640      	mov	r0, r8
 8004674:	f7ff fef4 	bl	8004460 <_free_r>
 8004678:	e7e1      	b.n	800463e <_realloc_r+0x1e>
 800467a:	4635      	mov	r5, r6
 800467c:	e7df      	b.n	800463e <_realloc_r+0x1e>
	...

08004680 <_sbrk_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d06      	ldr	r5, [pc, #24]	; (800469c <_sbrk_r+0x1c>)
 8004684:	2300      	movs	r3, #0
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	f7fd f9ac 	bl	80019e8 <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_sbrk_r+0x1a>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	b103      	cbz	r3, 800469a <_sbrk_r+0x1a>
 8004698:	6023      	str	r3, [r4, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	200001ec 	.word	0x200001ec

080046a0 <__malloc_lock>:
 80046a0:	4801      	ldr	r0, [pc, #4]	; (80046a8 <__malloc_lock+0x8>)
 80046a2:	f000 b811 	b.w	80046c8 <__retarget_lock_acquire_recursive>
 80046a6:	bf00      	nop
 80046a8:	200001f0 	.word	0x200001f0

080046ac <__malloc_unlock>:
 80046ac:	4801      	ldr	r0, [pc, #4]	; (80046b4 <__malloc_unlock+0x8>)
 80046ae:	f000 b80c 	b.w	80046ca <__retarget_lock_release_recursive>
 80046b2:	bf00      	nop
 80046b4:	200001f0 	.word	0x200001f0

080046b8 <_malloc_usable_size_r>:
 80046b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046bc:	1f18      	subs	r0, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bfbc      	itt	lt
 80046c2:	580b      	ldrlt	r3, [r1, r0]
 80046c4:	18c0      	addlt	r0, r0, r3
 80046c6:	4770      	bx	lr

080046c8 <__retarget_lock_acquire_recursive>:
 80046c8:	4770      	bx	lr

080046ca <__retarget_lock_release_recursive>:
 80046ca:	4770      	bx	lr

080046cc <_init>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr

080046d8 <_fini>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr
