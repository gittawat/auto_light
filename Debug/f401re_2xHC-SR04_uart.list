
f401re_2xHC-SR04_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005e48  08005e48  00015e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed0  08005ed0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed8  08005ed8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000070  08005f50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005f50  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e677  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c76  00000000  00000000  0002e717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00030390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00031090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b38  00000000  00000000  00031ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e119  00000000  00000000  00048820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ff8  00000000  00000000  00056939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c28  00000000  00000000  000ed984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e30 	.word	0x08005e30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005e30 	.word	0x08005e30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <HC_SR04_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HC_SR04_init(){
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	sensor1.TRIG_PORT = HC_SR04_1_trig_GPIO_Port;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HC_SR04_init+0x70>)
 8000d66:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <HC_SR04_init+0x74>)
 8000d68:	601a      	str	r2, [r3, #0]
	sensor1.TRIG_PIN = HC_SR04_1_trig_Pin;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HC_SR04_init+0x70>)
 8000d6c:	2240      	movs	r2, #64	; 0x40
 8000d6e:	809a      	strh	r2, [r3, #4]
	sensor1.htim = &htim3;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HC_SR04_init+0x70>)
 8000d72:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HC_SR04_init+0x78>)
 8000d74:	609a      	str	r2, [r3, #8]
	sensor1.TIM_Channel = TIM_CHANNEL_2;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HC_SR04_init+0x70>)
 8000d78:	2204      	movs	r2, #4
 8000d7a:	60da      	str	r2, [r3, #12]
	sensor1.IC_Val1 = 0;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HC_SR04_init+0x70>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
	sensor1.IC_Val2 = 0;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HC_SR04_init+0x70>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
	sensor1.Is_First_Captured = 0;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HC_SR04_init+0x70>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	761a      	strb	r2, [r3, #24]
	sensor1.Distance = 0;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HC_SR04_init+0x70>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]

	sensor2.TRIG_PORT = HC_SR04_2_trig_GPIO_Port;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HC_SR04_init+0x7c>)
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HC_SR04_init+0x74>)
 8000d98:	601a      	str	r2, [r3, #0]
	sensor2.TRIG_PIN = HC_SR04_2_trig_Pin;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HC_SR04_init+0x7c>)
 8000d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da0:	809a      	strh	r2, [r3, #4]
	sensor2.htim = &htim1;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HC_SR04_init+0x7c>)
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HC_SR04_init+0x80>)
 8000da6:	609a      	str	r2, [r3, #8]
	sensor2.TIM_Channel = TIM_CHANNEL_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HC_SR04_init+0x7c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
	sensor2.IC_Val1 = 0;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HC_SR04_init+0x7c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
	sensor2.IC_Val2 = 0;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HC_SR04_init+0x7c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
	sensor2.Is_First_Captured = 0;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HC_SR04_init+0x7c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	761a      	strb	r2, [r3, #24]
	sensor2.Distance = 0;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HC_SR04_init+0x7c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	20000234 	.word	0x20000234
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	20000164 	.word	0x20000164
 8000ddc:	20000254 	.word	0x20000254
 8000de0:	200000d4 	.word	0x200000d4

08000de4 <delay>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, PinState);
	HAL_Delay(10);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
}

void delay(TIM_HandleTypeDef *htim, uint16_t time) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim) < time)
 8000df8:	bf00      	nop
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d3f9      	bcc.n	8000dfa <delay+0x16>
		;
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_GPIO_EXTI_Callback>:


// call back start here

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e24:	d008      	beq.n	8000e38 <HAL_GPIO_EXTI_Callback+0x24>
 8000e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2a:	dc0e      	bgt.n	8000e4a <HAL_GPIO_EXTI_Callback+0x36>
 8000e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e30:	d00a      	beq.n	8000e48 <HAL_GPIO_EXTI_Callback+0x34>
 8000e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
		case GPIO_PIN_8:
			//human_counter = '+';
			break;
		case GPIO_PIN_9:
			//human_counter = '-';
			break;
 8000e36:	e008      	b.n	8000e4a <HAL_GPIO_EXTI_Callback+0x36>
			request_data = 1;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x40>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e3e:	2120      	movs	r1, #32
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e42:	f002 f80a 	bl	8002e5a <HAL_GPIO_TogglePin>
			break;
 8000e46:	e000      	b.n	8000e4a <HAL_GPIO_EXTI_Callback+0x36>
			break;
 8000e48:	bf00      	nop
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000296 	.word	0x20000296
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	00000000 	.word	0x00000000

08000e60 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	HCSR04 *sensor;
	switch((int)(htim->Instance)){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a90      	ldr	r2, [pc, #576]	; (80010b0 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d003      	beq.n	8000e7a <HAL_TIM_IC_CaptureCallback+0x1a>
 8000e72:	4a90      	ldr	r2, [pc, #576]	; (80010b4 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d003      	beq.n	8000e80 <HAL_TIM_IC_CaptureCallback+0x20>
	      break;
	    case (int)TIM1:
	    	sensor = &sensor2;
	      break;
	    default:
	    	break;
 8000e78:	e005      	b.n	8000e86 <HAL_TIM_IC_CaptureCallback+0x26>
	    	sensor = &sensor1;
 8000e7a:	4b8f      	ldr	r3, [pc, #572]	; (80010b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000e7c:	60fb      	str	r3, [r7, #12]
	      break;
 8000e7e:	e002      	b.n	8000e86 <HAL_TIM_IC_CaptureCallback+0x26>
	    	sensor = &sensor2;
 8000e80:	4b8e      	ldr	r3, [pc, #568]	; (80010bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000e82:	60fb      	str	r3, [r7, #12]
	      break;
 8000e84:	bf00      	nop
	}
	if (sensor->Is_First_Captured == 0){ // if the first value is not captured
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	7e1b      	ldrb	r3, [r3, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d16a      	bne.n	8000f64 <HAL_TIM_IC_CaptureCallback+0x104>
			sensor->IC_Val1 = HAL_TIM_ReadCapturedValue(htim,sensor->TIM_Channel); // read the first value
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	4619      	mov	r1, r3
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f003 fa91 	bl	80043bc <HAL_TIM_ReadCapturedValue>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
			sensor->Is_First_Captured = 1; // set the first captured as true
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	761a      	strb	r2, [r3, #24]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,sensor->TIM_Channel,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d108      	bne.n	8000ec0 <HAL_TIM_IC_CaptureCallback+0x60>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 020a 	bic.w	r2, r2, #10
 8000ebc:	621a      	str	r2, [r3, #32]
 8000ebe:	e021      	b.n	8000f04 <HAL_TIM_IC_CaptureCallback+0xa4>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d108      	bne.n	8000eda <HAL_TIM_IC_CaptureCallback+0x7a>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6812      	ldr	r2, [r2, #0]
 8000ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	e014      	b.n	8000f04 <HAL_TIM_IC_CaptureCallback+0xa4>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d108      	bne.n	8000ef4 <HAL_TIM_IC_CaptureCallback+0x94>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000ef0:	6213      	str	r3, [r2, #32]
 8000ef2:	e007      	b.n	8000f04 <HAL_TIM_IC_CaptureCallback+0xa4>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	6812      	ldr	r2, [r2, #0]
 8000efe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8000f02:	6213      	str	r3, [r2, #32]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d108      	bne.n	8000f1e <HAL_TIM_IC_CaptureCallback+0xbe>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6a1a      	ldr	r2, [r3, #32]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0202 	orr.w	r2, r2, #2
 8000f1a:	621a      	str	r2, [r3, #32]
		sensor->Is_First_Captured = 0; // set it back to false
		// set polarity to rising edge
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,sensor->TIM_Channel,TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(sensor->htim, TIM_IT_CC1);
	}
}
 8000f1c:	e0e1      	b.n	80010e2 <HAL_TIM_IC_CaptureCallback+0x282>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,sensor->TIM_Channel,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	d108      	bne.n	8000f38 <HAL_TIM_IC_CaptureCallback+0xd8>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	6213      	str	r3, [r2, #32]
 8000f36:	e0d4      	b.n	80010e2 <HAL_TIM_IC_CaptureCallback+0x282>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b08      	cmp	r3, #8
 8000f3e:	d108      	bne.n	8000f52 <HAL_TIM_IC_CaptureCallback+0xf2>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4e:	6213      	str	r3, [r2, #32]
 8000f50:	e0c7      	b.n	80010e2 <HAL_TIM_IC_CaptureCallback+0x282>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f60:	6213      	str	r3, [r2, #32]
}
 8000f62:	e0be      	b.n	80010e2 <HAL_TIM_IC_CaptureCallback+0x282>
		sensor->IC_Val2 = HAL_TIM_ReadCapturedValue(htim,sensor->TIM_Channel); // read second value
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f003 fa26 	bl	80043bc <HAL_TIM_ReadCapturedValue>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
		sensor->Distance = ((sensor->IC_Val2 - sensor->IC_Val1)* (sensor->IC_Val2 > sensor->IC_Val1)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	6951      	ldr	r1, [r2, #20]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	6912      	ldr	r2, [r2, #16]
 8000f90:	4291      	cmp	r1, r2
 8000f92:	bf8c      	ite	hi
 8000f94:	2201      	movhi	r2, #1
 8000f96:	2200      	movls	r2, #0
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	fb03 f202 	mul.w	r2, r3, r2
							+ ((0xffff - sensor->IC_Val1) + sensor->IC_Val2)* (sensor->IC_Val1 > sensor->IC_Val2))
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6959      	ldr	r1, [r3, #20]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	1acb      	subs	r3, r1, r3
 8000fa8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fac:	33ff      	adds	r3, #255	; 0xff
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	6908      	ldr	r0, [r1, #16]
 8000fb2:	68f9      	ldr	r1, [r7, #12]
 8000fb4:	6949      	ldr	r1, [r1, #20]
 8000fb6:	4288      	cmp	r0, r1
 8000fb8:	bf8c      	ite	hi
 8000fba:	2101      	movhi	r1, #1
 8000fbc:	2100      	movls	r1, #0
 8000fbe:	b2c9      	uxtb	r1, r1
 8000fc0:	fb01 f303 	mul.w	r3, r1, r3
 8000fc4:	4413      	add	r3, r2
							* .034/ 2;
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa9c 	bl	8000504 <__aeabi_ui2d>
 8000fcc:	a336      	add	r3, pc, #216	; (adr r3, 80010a8 <HAL_TIM_IC_CaptureCallback+0x248>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb11 	bl	80005f8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe6:	f7ff fc31 	bl	800084c <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
		sensor->Distance = ((sensor->IC_Val2 - sensor->IC_Val1)* (sensor->IC_Val2 > sensor->IC_Val1)
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fd13 	bl	8000a1c <__aeabi_d2uiz>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	61da      	str	r2, [r3, #28]
		sensor->Is_First_Captured = 0; // set it back to false
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	761a      	strb	r2, [r3, #24]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim,sensor->TIM_Channel,TIM_INPUTCHANNELPOLARITY_RISING);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d108      	bne.n	800101c <HAL_TIM_IC_CaptureCallback+0x1bc>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6a1a      	ldr	r2, [r3, #32]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 020a 	bic.w	r2, r2, #10
 8001018:	621a      	str	r2, [r3, #32]
 800101a:	e021      	b.n	8001060 <HAL_TIM_IC_CaptureCallback+0x200>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b04      	cmp	r3, #4
 8001022:	d108      	bne.n	8001036 <HAL_TIM_IC_CaptureCallback+0x1d6>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001032:	6213      	str	r3, [r2, #32]
 8001034:	e014      	b.n	8001060 <HAL_TIM_IC_CaptureCallback+0x200>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b08      	cmp	r3, #8
 800103c:	d108      	bne.n	8001050 <HAL_TIM_IC_CaptureCallback+0x1f0>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800104c:	6213      	str	r3, [r2, #32]
 800104e:	e007      	b.n	8001060 <HAL_TIM_IC_CaptureCallback+0x200>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d106      	bne.n	8001076 <HAL_TIM_IC_CaptureCallback+0x216>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6a12      	ldr	r2, [r2, #32]
 8001072:	621a      	str	r2, [r3, #32]
 8001074:	e02a      	b.n	80010cc <HAL_TIM_IC_CaptureCallback+0x26c>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d106      	bne.n	800108c <HAL_TIM_IC_CaptureCallback+0x22c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	6213      	str	r3, [r2, #32]
 800108a:	e01f      	b.n	80010cc <HAL_TIM_IC_CaptureCallback+0x26c>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b08      	cmp	r3, #8
 8001092:	d115      	bne.n	80010c0 <HAL_TIM_IC_CaptureCallback+0x260>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	e014      	b.n	80010cc <HAL_TIM_IC_CaptureCallback+0x26c>
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	b020c49c 	.word	0xb020c49c
 80010ac:	3fa16872 	.word	0x3fa16872
 80010b0:	40000400 	.word	0x40000400
 80010b4:	40010000 	.word	0x40010000
 80010b8:	20000234 	.word	0x20000234
 80010bc:	20000254 	.word	0x20000254
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	6213      	str	r3, [r2, #32]
		__HAL_TIM_DISABLE_IT(sensor->htim, TIM_IT_CC1);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0202 	bic.w	r2, r2, #2
 80010de:	60da      	str	r2, [r3, #12]
}
 80010e0:	e7ff      	b.n	80010e2 <HAL_TIM_IC_CaptureCallback+0x282>
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop

080010ec <HCSR04_Read>:
void HCSR04_Read(HCSR04 *sensor) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(sensor->TRIG_PORT, sensor->TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	889b      	ldrh	r3, [r3, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	f001 fe92 	bl	8002e28 <HAL_GPIO_WritePin>
	delay(sensor->htim, 10);  // wait for 10 us
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	210a      	movs	r1, #10
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe6a 	bl	8000de4 <delay>
	HAL_GPIO_WritePin(sensor->TRIG_PORT, sensor->TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	889b      	ldrh	r3, [r3, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	f001 fe84 	bl	8002e28 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(sensor->htim, TIM_IT_CC1);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0202 	orr.w	r2, r2, #2
 8001132:	60da      	str	r2, [r3, #12]
	//__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001142:	f000 ff97 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f9dd 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114a:	f000 fc35 	bl	80019b8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800114e:	f000 fb45 	bl	80017dc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001152:	f000 fc07 	bl	8001964 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 8001156:	f000 fbdb 	bl	8001910 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800115a:	f000 fa8f 	bl	800167c <MX_TIM1_Init>
  MX_ADC1_Init();
 800115e:	f000 fa3b 	bl	80015d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001162:	f000 fae1 	bl	8001728 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HC_SR04_init();
 8001166:	f7ff fdfb 	bl	8000d60 <HC_SR04_init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800116a:	2100      	movs	r1, #0
 800116c:	4891      	ldr	r0, [pc, #580]	; (80013b4 <main+0x278>)
 800116e:	f002 fcdd 	bl	8003b2c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001172:	2104      	movs	r1, #4
 8001174:	4890      	ldr	r0, [pc, #576]	; (80013b8 <main+0x27c>)
 8001176:	f002 fcd9 	bl	8003b2c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800117a:	210c      	movs	r1, #12
 800117c:	488e      	ldr	r0, [pc, #568]	; (80013b8 <main+0x27c>)
 800117e:	f002 fbd5 	bl	800392c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001182:	2104      	movs	r1, #4
 8001184:	488d      	ldr	r0, [pc, #564]	; (80013bc <main+0x280>)
 8001186:	f002 fbd1 	bl	800392c <HAL_TIM_PWM_Start>
  int32_t human_counter = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  uint8_t sensor1_current_state = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	70fb      	strb	r3, [r7, #3]
  uint8_t sensor1_previous_state = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	72fb      	strb	r3, [r7, #11]
  uint8_t sensor2_current_state = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	70bb      	strb	r3, [r7, #2]
  uint8_t sensor2_previous_state = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	72bb      	strb	r3, [r7, #10]
  int8_t dummy_value = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	727b      	strb	r3, [r7, #9]
  uint8_t increment = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	707b      	strb	r3, [r7, #1]
  uint8_t decrement = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	703b      	strb	r3, [r7, #0]
  uint32_t adc_value = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // HCSR04_section
	HCSR04_Read(&sensor2);
 80011ae:	4884      	ldr	r0, [pc, #528]	; (80013c0 <main+0x284>)
 80011b0:	f7ff ff9c 	bl	80010ec <HCSR04_Read>
		HAL_Delay(25);
 80011b4:	2019      	movs	r0, #25
 80011b6:	f000 ffcf 	bl	8002158 <HAL_Delay>
		HCSR04_Read(&sensor1);
 80011ba:	4882      	ldr	r0, [pc, #520]	; (80013c4 <main+0x288>)
 80011bc:	f7ff ff96 	bl	80010ec <HCSR04_Read>
		HAL_Delay(25);
 80011c0:	2019      	movs	r0, #25
 80011c2:	f000 ffc9 	bl	8002158 <HAL_Delay>
		sensor2_current_state = (sensor2.Distance < 30);
 80011c6:	4b7e      	ldr	r3, [pc, #504]	; (80013c0 <main+0x284>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	2b1d      	cmp	r3, #29
 80011cc:	bf94      	ite	ls
 80011ce:	2301      	movls	r3, #1
 80011d0:	2300      	movhi	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	70bb      	strb	r3, [r7, #2]
		sensor1_current_state = (sensor1.Distance < 30);
 80011d6:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <main+0x288>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	2b1d      	cmp	r3, #29
 80011dc:	bf94      	ite	ls
 80011de:	2301      	movls	r3, #1
 80011e0:	2300      	movhi	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	70fb      	strb	r3, [r7, #3]
		increment =
				(!sensor1_previous_state && !sensor2_previous_state && !sensor1_current_state && sensor2_current_state)
				||
				(!sensor1_previous_state && sensor2_previous_state && sensor1_current_state && !sensor2_current_state)
				||
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d108      	bne.n	80011fe <main+0xc2>
				(!sensor1_previous_state && !sensor2_previous_state && !sensor1_current_state && sensor2_current_state)
 80011ec:	7abb      	ldrb	r3, [r7, #10]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d105      	bne.n	80011fe <main+0xc2>
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <main+0xc2>
 80011f8:	78bb      	ldrb	r3, [r7, #2]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d117      	bne.n	800122e <main+0xf2>
				||
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d108      	bne.n	8001216 <main+0xda>
				(!sensor1_previous_state && sensor2_previous_state && sensor1_current_state && !sensor2_current_state)
 8001204:	7abb      	ldrb	r3, [r7, #10]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <main+0xda>
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <main+0xda>
 8001210:	78bb      	ldrb	r3, [r7, #2]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <main+0xf2>
				||
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00a      	beq.n	8001232 <main+0xf6>
				(sensor1_previous_state && !sensor2_previous_state && !sensor1_current_state && !sensor2_current_state );
 800121c:	7abb      	ldrb	r3, [r7, #10]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d107      	bne.n	8001232 <main+0xf6>
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d104      	bne.n	8001232 <main+0xf6>
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <main+0xf6>
				||
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <main+0xf8>
 8001232:	2300      	movs	r3, #0
		increment =
 8001234:	707b      	strb	r3, [r7, #1]
		decrement =
				(!sensor1_previous_state && !sensor2_previous_state && sensor1_current_state && !sensor2_current_state)
				||
				(sensor1_previous_state && !sensor2_previous_state && !sensor1_current_state && sensor2_current_state)
				||
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d108      	bne.n	800124e <main+0x112>
				(!sensor1_previous_state && !sensor2_previous_state && sensor1_current_state && !sensor2_current_state)
 800123c:	7abb      	ldrb	r3, [r7, #10]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d105      	bne.n	800124e <main+0x112>
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <main+0x112>
 8001248:	78bb      	ldrb	r3, [r7, #2]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d017      	beq.n	800127e <main+0x142>
				||
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <main+0x12a>
				(sensor1_previous_state && !sensor2_previous_state && !sensor1_current_state && sensor2_current_state)
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d105      	bne.n	8001266 <main+0x12a>
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <main+0x12a>
 8001260:	78bb      	ldrb	r3, [r7, #2]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10b      	bne.n	800127e <main+0x142>
				||
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10a      	bne.n	8001282 <main+0x146>
				(!sensor1_previous_state && sensor2_previous_state && !sensor1_current_state && !sensor2_current_state );
 800126c:	7abb      	ldrb	r3, [r7, #10]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <main+0x146>
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <main+0x146>
 8001278:	78bb      	ldrb	r3, [r7, #2]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <main+0x146>
				||
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <main+0x148>
 8001282:	2300      	movs	r3, #0
		decrement =
 8001284:	703b      	strb	r3, [r7, #0]
		dummy_value = dummy_value + increment - decrement;
 8001286:	7a7a      	ldrb	r2, [r7, #9]
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	4413      	add	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	783b      	ldrb	r3, [r7, #0]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	727b      	strb	r3, [r7, #9]
		if(dummy_value == 3){
 8001296:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800129a:	2b03      	cmp	r3, #3
 800129c:	d10e      	bne.n	80012bc <main+0x180>
			dummy_value = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	727b      	strb	r3, [r7, #9]
			human_counter++;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3301      	adds	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
			//HAL_UART_Transmit(&huart2, data,sprintf(data,"%d %d state: %d %d %d\n", sensor1.Distance, sensor2.Distance, sensor1_current_state,sensor2_current_state,human_counter),100);
			//HAL_UART_Transmit(&huart6, data,sprintf(data,"+"),100);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2101      	movs	r1, #1
 80012ac:	4846      	ldr	r0, [pc, #280]	; (80013c8 <main+0x28c>)
 80012ae:	f001 fdbb 	bl	8002e28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	4844      	ldr	r0, [pc, #272]	; (80013c8 <main+0x28c>)
 80012b8:	f001 fdb6 	bl	8002e28 <HAL_GPIO_WritePin>
		}
		if(dummy_value == -3){
 80012bc:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80012c0:	f113 0f03 	cmn.w	r3, #3
 80012c4:	d115      	bne.n	80012f2 <main+0x1b6>
			dummy_value = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	727b      	strb	r3, [r7, #9]
			human_counter -= (human_counter != 0);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
			//HAL_UART_Transmit(&huart2, data,sprintf(data,"%d %d state: %d %d %d\n", sensor1.Distance, sensor2.Distance, sensor1_current_state,sensor2_current_state,human_counter),100);
			//HAL_UART_Transmit(&huart6, data,sprintf(data,"-"),100);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2102      	movs	r1, #2
 80012e2:	4839      	ldr	r0, [pc, #228]	; (80013c8 <main+0x28c>)
 80012e4:	f001 fda0 	bl	8002e28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2102      	movs	r1, #2
 80012ec:	4836      	ldr	r0, [pc, #216]	; (80013c8 <main+0x28c>)
 80012ee:	f001 fd9b 	bl	8002e28 <HAL_GPIO_WritePin>
		}

		if((sensor1_previous_state != sensor1_current_state || sensor2_previous_state != sensor2_current_state) && !(sensor2_current_state && sensor1_current_state)){
 80012f2:	7afa      	ldrb	r2, [r7, #11]
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d103      	bne.n	8001302 <main+0x1c6>
 80012fa:	7aba      	ldrb	r2, [r7, #10]
 80012fc:	78bb      	ldrb	r3, [r7, #2]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d009      	beq.n	8001316 <main+0x1da>
 8001302:	78bb      	ldrb	r3, [r7, #2]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <main+0x1d2>
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <main+0x1da>
		sensor1_previous_state = sensor1_current_state;
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	72fb      	strb	r3, [r7, #11]
		sensor2_previous_state = sensor2_current_state;
 8001312:	78bb      	ldrb	r3, [r7, #2]
 8001314:	72bb      	strb	r3, [r7, #10]
		}
		HAL_UART_Transmit(&huart2, data,sprintf(data,"%d %d state: %d %d %d\n", sensor1.Distance, sensor2.Distance, sensor1_current_state,sensor2_current_state,human_counter),100);
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <main+0x288>)
 8001318:	69d8      	ldr	r0, [r3, #28]
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <main+0x284>)
 800131c:	69dc      	ldr	r4, [r3, #28]
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	78ba      	ldrb	r2, [r7, #2]
 8001322:	68f9      	ldr	r1, [r7, #12]
 8001324:	9102      	str	r1, [sp, #8]
 8001326:	9201      	str	r2, [sp, #4]
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4623      	mov	r3, r4
 800132c:	4602      	mov	r2, r0
 800132e:	4927      	ldr	r1, [pc, #156]	; (80013cc <main+0x290>)
 8001330:	4827      	ldr	r0, [pc, #156]	; (80013d0 <main+0x294>)
 8001332:	f004 f90f 	bl	8005554 <siprintf>
 8001336:	4603      	mov	r3, r0
 8001338:	b29a      	uxth	r2, r3
 800133a:	2364      	movs	r3, #100	; 0x64
 800133c:	4924      	ldr	r1, [pc, #144]	; (80013d0 <main+0x294>)
 800133e:	4825      	ldr	r0, [pc, #148]	; (80013d4 <main+0x298>)
 8001340:	f003 fd61 	bl	8004e06 <HAL_UART_Transmit>
		// LDR_section
		HAL_ADC_Start(&hadc1);
 8001344:	4824      	ldr	r0, [pc, #144]	; (80013d8 <main+0x29c>)
 8001346:	f000 ff6f 	bl	8002228 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800134a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800134e:	4822      	ldr	r0, [pc, #136]	; (80013d8 <main+0x29c>)
 8001350:	f001 f81e 	bl	8002390 <HAL_ADC_PollForConversion>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <main+0x226>
			adc_value = HAL_ADC_GetValue(&hadc1);
 800135a:	481f      	ldr	r0, [pc, #124]	; (80013d8 <main+0x29c>)
 800135c:	f001 f8a3 	bl	80024a6 <HAL_ADC_GetValue>
 8001360:	6078      	str	r0, [r7, #4]
		}
		HAL_UART_Transmit(&huart2, &data, sprintf(data, "%d\n",adc_value), 100);
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	491d      	ldr	r1, [pc, #116]	; (80013dc <main+0x2a0>)
 8001366:	481a      	ldr	r0, [pc, #104]	; (80013d0 <main+0x294>)
 8001368:	f004 f8f4 	bl	8005554 <siprintf>
 800136c:	4603      	mov	r3, r0
 800136e:	b29a      	uxth	r2, r3
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	4917      	ldr	r1, [pc, #92]	; (80013d0 <main+0x294>)
 8001374:	4817      	ldr	r0, [pc, #92]	; (80013d4 <main+0x298>)
 8001376:	f003 fd46 	bl	8004e06 <HAL_UART_Transmit>
		if(request_data){
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <main+0x2a4>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d057      	beq.n	8001432 <main+0x2f6>
		HAL_UART_Transmit(&huart6, &data, sprintf(data, (S1_status)? "S1:n\n" : "S1:f\n"), 50);
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <main+0x2a8>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <main+0x252>
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <main+0x2ac>)
 800138c:	e000      	b.n	8001390 <main+0x254>
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <main+0x2b0>)
 8001390:	4619      	mov	r1, r3
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <main+0x294>)
 8001394:	f004 f8de 	bl	8005554 <siprintf>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	2332      	movs	r3, #50	; 0x32
 800139e:	490c      	ldr	r1, [pc, #48]	; (80013d0 <main+0x294>)
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <main+0x2b4>)
 80013a2:	f003 fd30 	bl	8004e06 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &data, sprintf(data, (S2_status)? "S2:n\n" : "S2:f\n"), 50);
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <main+0x2b8>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d026      	beq.n	80013fc <main+0x2c0>
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <main+0x2bc>)
 80013b0:	e025      	b.n	80013fe <main+0x2c2>
 80013b2:	bf00      	nop
 80013b4:	200000d4 	.word	0x200000d4
 80013b8:	20000164 	.word	0x20000164
 80013bc:	2000011c 	.word	0x2000011c
 80013c0:	20000254 	.word	0x20000254
 80013c4:	20000234 	.word	0x20000234
 80013c8:	40020800 	.word	0x40020800
 80013cc:	08005e48 	.word	0x08005e48
 80013d0:	20000274 	.word	0x20000274
 80013d4:	200001ac 	.word	0x200001ac
 80013d8:	2000008c 	.word	0x2000008c
 80013dc:	08005e60 	.word	0x08005e60
 80013e0:	20000296 	.word	0x20000296
 80013e4:	20000294 	.word	0x20000294
 80013e8:	08005e64 	.word	0x08005e64
 80013ec:	08005e6c 	.word	0x08005e6c
 80013f0:	200001f0 	.word	0x200001f0
 80013f4:	20000295 	.word	0x20000295
 80013f8:	08005e74 	.word	0x08005e74
 80013fc:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <main+0x3a4>)
 80013fe:	4619      	mov	r1, r3
 8001400:	4838      	ldr	r0, [pc, #224]	; (80014e4 <main+0x3a8>)
 8001402:	f004 f8a7 	bl	8005554 <siprintf>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	2332      	movs	r3, #50	; 0x32
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <main+0x3a8>)
 800140e:	4836      	ldr	r0, [pc, #216]	; (80014e8 <main+0x3ac>)
 8001410:	f003 fcf9 	bl	8004e06 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &data, sprintf(data,"%d\n",human_counter), 50);
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4935      	ldr	r1, [pc, #212]	; (80014ec <main+0x3b0>)
 8001418:	4832      	ldr	r0, [pc, #200]	; (80014e4 <main+0x3a8>)
 800141a:	f004 f89b 	bl	8005554 <siprintf>
 800141e:	4603      	mov	r3, r0
 8001420:	b29a      	uxth	r2, r3
 8001422:	2332      	movs	r3, #50	; 0x32
 8001424:	492f      	ldr	r1, [pc, #188]	; (80014e4 <main+0x3a8>)
 8001426:	4830      	ldr	r0, [pc, #192]	; (80014e8 <main+0x3ac>)
 8001428:	f003 fced 	bl	8004e06 <HAL_UART_Transmit>
		request_data = 0;
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <main+0x3b4>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
		}
		if(adc_value > 2000){
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001438:	d910      	bls.n	800145c <main+0x320>
			htim3.Instance->CCR4 = 400;
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <main+0x3b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
			htim2.Instance->CCR2 = 400;
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <main+0x3bc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800144c:	639a      	str	r2, [r3, #56]	; 0x38
			S1_status = 0;
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <main+0x3c0>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
			S2_status = 0;
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <main+0x3c4>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e6a8      	b.n	80011ae <main+0x72>
		}
		else  if (adc_value < 2100) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f640 0233 	movw	r2, #2099	; 0x833
 8001462:	4293      	cmp	r3, r2
 8001464:	f63f aea3 	bhi.w	80011ae <main+0x72>
				if(human_counter == 0){
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d110      	bne.n	8001490 <main+0x354>
					htim3.Instance->CCR4 = 400;
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <main+0x3b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
					htim2.Instance->CCR2 = 400;
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <main+0x3bc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001480:	639a      	str	r2, [r3, #56]	; 0x38
					S1_status = 0;S2_status = 0;
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <main+0x3c0>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <main+0x3c4>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	e68e      	b.n	80011ae <main+0x72>
				}else if(human_counter > 0 && human_counter < 3){
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	dd13      	ble.n	80014be <main+0x382>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b02      	cmp	r3, #2
 800149a:	dc10      	bgt.n	80014be <main+0x382>
					htim3.Instance->CCR4 = 2400;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <main+0x3b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
					htim2.Instance->CCR2 = 400;
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <main+0x3bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014ae:	639a      	str	r2, [r3, #56]	; 0x38
					S1_status = 1;S2_status = 0;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <main+0x3c0>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <main+0x3c4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e00f      	b.n	80014de <main+0x3a2>
				}else{
					htim3.Instance->CCR4 = 2400;
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <main+0x3b8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
					htim2.Instance->CCR2 = 2400;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <main+0x3bc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80014d0:	639a      	str	r2, [r3, #56]	; 0x38
					S1_status = 1;S2_status = 1;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <main+0x3c0>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <main+0x3c4>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
  while (1) {
 80014de:	e666      	b.n	80011ae <main+0x72>
 80014e0:	08005e7c 	.word	0x08005e7c
 80014e4:	20000274 	.word	0x20000274
 80014e8:	200001f0 	.word	0x200001f0
 80014ec:	08005e60 	.word	0x08005e60
 80014f0:	20000296 	.word	0x20000296
 80014f4:	20000164 	.word	0x20000164
 80014f8:	2000011c 	.word	0x2000011c
 80014fc:	20000294 	.word	0x20000294
 8001500:	20000295 	.word	0x20000295

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2230      	movs	r2, #48	; 0x30
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f004 f816 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <SystemClock_Config+0xcc>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <SystemClock_Config+0xcc>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <SystemClock_Config+0xcc>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <SystemClock_Config+0xd0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001550:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <SystemClock_Config+0xd0>)
 8001552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001568:	2301      	movs	r3, #1
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800156c:	2310      	movs	r3, #16
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001570:	2302      	movs	r3, #2
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001574:	2300      	movs	r3, #0
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800157c:	2348      	movs	r3, #72	; 0x48
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001580:	2302      	movs	r3, #2
 8001582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001584:	2307      	movs	r3, #7
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fc97 	bl	8002ec0 <HAL_RCC_OscConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001598:	f000 faa2 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	230f      	movs	r3, #15
 800159e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80015a4:	2390      	movs	r3, #144	; 0x90
 80015a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 fef9 	bl	80033b0 <HAL_RCC_ClockConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015c4:	f000 fa8c 	bl	8001ae0 <Error_Handler>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3750      	adds	r7, #80	; 0x50
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015de:	463b      	mov	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_ADC1_Init+0x98>)
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <MX_ADC1_Init+0x9c>)
 80015ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_ADC1_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_ADC1_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_ADC1_Init+0x98>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_ADC1_Init+0x98>)
 8001604:	2200      	movs	r2, #0
 8001606:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_ADC1_Init+0x98>)
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <MX_ADC1_Init+0x98>)
 8001612:	2200      	movs	r2, #0
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_ADC1_Init+0x98>)
 8001618:	4a17      	ldr	r2, [pc, #92]	; (8001678 <MX_ADC1_Init+0xa0>)
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <MX_ADC1_Init+0x98>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_ADC1_Init+0x98>)
 8001624:	2201      	movs	r2, #1
 8001626:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_ADC1_Init+0x98>)
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_ADC1_Init+0x98>)
 8001632:	2201      	movs	r2, #1
 8001634:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <MX_ADC1_Init+0x98>)
 8001638:	f000 fdb2 	bl	80021a0 <HAL_ADC_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001642:	f000 fa4d 	bl	8001ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800164a:	2301      	movs	r3, #1
 800164c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_ADC1_Init+0x98>)
 8001658:	f000 ff32 	bl	80024c0 <HAL_ADC_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001662:	f000 fa3d 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000008c 	.word	0x2000008c
 8001674:	40012000 	.word	0x40012000
 8001678:	0f000001 	.word	0x0f000001

0800167c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <MX_TIM1_Init+0xa4>)
 800169a:	4a22      	ldr	r2, [pc, #136]	; (8001724 <MX_TIM1_Init+0xa8>)
 800169c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18-1;
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <MX_TIM1_Init+0xa4>)
 80016a0:	2211      	movs	r2, #17
 80016a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <MX_TIM1_Init+0xa4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <MX_TIM1_Init+0xa4>)
 80016ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <MX_TIM1_Init+0xa4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <MX_TIM1_Init+0xa4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_TIM1_Init+0xa4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80016c4:	4816      	ldr	r0, [pc, #88]	; (8001720 <MX_TIM1_Init+0xa4>)
 80016c6:	f002 f9e1 	bl	8003a8c <HAL_TIM_IC_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016d0:	f000 fa06 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	480f      	ldr	r0, [pc, #60]	; (8001720 <MX_TIM1_Init+0xa4>)
 80016e4:	f003 fac0 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016ee:	f000 f9f7 	bl	8001ae0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016f6:	2301      	movs	r3, #1
 80016f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_TIM1_Init+0xa4>)
 800170a:	f002 fc31 	bl	8003f70 <HAL_TIM_IC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001714:	f000 f9e4 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200000d4 	.word	0x200000d4
 8001724:	40010000 	.word	0x40010000

08001728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MX_TIM2_Init+0xb0>)
 800174c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001750:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18-1;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_TIM2_Init+0xb0>)
 8001754:	2211      	movs	r2, #17
 8001756:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_TIM2_Init+0xb0>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <MX_TIM2_Init+0xb0>)
 8001760:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001764:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM2_Init+0xb0>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM2_Init+0xb0>)
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001772:	4819      	ldr	r0, [pc, #100]	; (80017d8 <MX_TIM2_Init+0xb0>)
 8001774:	f002 f88b 	bl	800388e <HAL_TIM_PWM_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800177e:	f000 f9af 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178a:	f107 0320 	add.w	r3, r7, #32
 800178e:	4619      	mov	r1, r3
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_TIM2_Init+0xb0>)
 8001792:	f003 fa69 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800179c:	f000 f9a0 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a0:	2360      	movs	r3, #96	; 0x60
 80017a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 400;
 80017a4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80017a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2204      	movs	r2, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_TIM2_Init+0xb0>)
 80017ba:	f002 fc75 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80017c4:	f000 f98c 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <MX_TIM2_Init+0xb0>)
 80017ca:	f000 fabb 	bl	8001d44 <HAL_TIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000011c 	.word	0x2000011c

080017dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b092      	sub	sp, #72	; 0x48
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <MX_TIM3_Init+0x12c>)
 800181c:	4a3b      	ldr	r2, [pc, #236]	; (800190c <MX_TIM3_Init+0x130>)
 800181e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 18-1;
 8001820:	4b39      	ldr	r3, [pc, #228]	; (8001908 <MX_TIM3_Init+0x12c>)
 8001822:	2211      	movs	r2, #17
 8001824:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <MX_TIM3_Init+0x12c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <MX_TIM3_Init+0x12c>)
 800182e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001832:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <MX_TIM3_Init+0x12c>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800183a:	4b33      	ldr	r3, [pc, #204]	; (8001908 <MX_TIM3_Init+0x12c>)
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001840:	4831      	ldr	r0, [pc, #196]	; (8001908 <MX_TIM3_Init+0x12c>)
 8001842:	f001 ffd5 	bl	80037f0 <HAL_TIM_Base_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800184c:	f000 f948 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001856:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800185a:	4619      	mov	r1, r3
 800185c:	482a      	ldr	r0, [pc, #168]	; (8001908 <MX_TIM3_Init+0x12c>)
 800185e:	f002 fce5 	bl	800422c <HAL_TIM_ConfigClockSource>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001868:	f000 f93a 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800186c:	4826      	ldr	r0, [pc, #152]	; (8001908 <MX_TIM3_Init+0x12c>)
 800186e:	f002 f90d 	bl	8003a8c <HAL_TIM_IC_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001878:	f000 f932 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800187c:	4822      	ldr	r0, [pc, #136]	; (8001908 <MX_TIM3_Init+0x12c>)
 800187e:	f002 f806 	bl	800388e <HAL_TIM_PWM_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001888:	f000 f92a 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001898:	4619      	mov	r1, r3
 800189a:	481b      	ldr	r0, [pc, #108]	; (8001908 <MX_TIM3_Init+0x12c>)
 800189c:	f003 f9e4 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80018a6:	f000 f91b 	bl	8001ae0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018ae:	2301      	movs	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018ba:	f107 0320 	add.w	r3, r7, #32
 80018be:	2204      	movs	r2, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	4811      	ldr	r0, [pc, #68]	; (8001908 <MX_TIM3_Init+0x12c>)
 80018c4:	f002 fb54 	bl	8003f70 <HAL_TIM_IC_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80018ce:	f000 f907 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	220c      	movs	r2, #12
 80018e8:	4619      	mov	r1, r3
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM3_Init+0x12c>)
 80018ec:	f002 fbdc 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 80018f6:	f000 f8f3 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM3_Init+0x12c>)
 80018fc:	f000 fa22 	bl	8001d44 <HAL_TIM_MspPostInit>

}
 8001900:	bf00      	nop
 8001902:	3748      	adds	r7, #72	; 0x48
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000164 	.word	0x20000164
 800190c:	40000400 	.word	0x40000400

08001910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_USART2_UART_Init+0x4c>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <MX_USART2_UART_Init+0x50>)
 8001918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_USART2_UART_Init+0x4c>)
 800191c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_USART2_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_USART2_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_USART2_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_USART2_UART_Init+0x4c>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_USART2_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_USART2_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_USART2_UART_Init+0x4c>)
 8001948:	f003 fa10 	bl	8004d6c <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001952:	f000 f8c5 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200001ac 	.word	0x200001ac
 8001960:	40004400 	.word	0x40004400

08001964 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART6_UART_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <MX_USART6_UART_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_USART6_UART_Init+0x4c>)
 8001970:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001974:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART6_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART6_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART6_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART6_UART_Init+0x4c>)
 800198a:	2208      	movs	r2, #8
 800198c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART6_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART6_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART6_UART_Init+0x4c>)
 800199c:	f003 f9e6 	bl	8004d6c <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019a6:	f000 f89b 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200001f0 	.word	0x200001f0
 80019b4:	40011400 	.word	0x40011400

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b40      	ldr	r3, [pc, #256]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a3f      	ldr	r2, [pc, #252]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a38      	ldr	r2, [pc, #224]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 80019f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a2a      	ldr	r2, [pc, #168]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <MX_GPIO_Init+0x11c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|HC_SR04_1_trig_Pin|HC_SR04_2_trig_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 7118 	mov.w	r1, #608	; 0x260
 8001a44:	4824      	ldr	r0, [pc, #144]	; (8001ad8 <MX_GPIO_Init+0x120>)
 8001a46:	f001 f9ef 	bl	8002e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a50:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481e      	ldr	r0, [pc, #120]	; (8001adc <MX_GPIO_Init+0x124>)
 8001a62:	f001 f85d 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a66:	2320      	movs	r3, #32
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4816      	ldr	r0, [pc, #88]	; (8001ad8 <MX_GPIO_Init+0x120>)
 8001a7e:	f001 f84f 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : HC_SR04_1_trig_Pin HC_SR04_2_trig_Pin */
  GPIO_InitStruct.Pin = HC_SR04_1_trig_Pin|HC_SR04_2_trig_Pin;
 8001a82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <MX_GPIO_Init+0x120>)
 8001a9c:	f001 f840 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : data_polling_trig_Pin */
  GPIO_InitStruct.Pin = data_polling_trig_Pin;
 8001aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(data_polling_trig_GPIO_Port, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <MX_GPIO_Init+0x120>)
 8001ab8:	f001 f832 	bl	8002b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2102      	movs	r1, #2
 8001ac0:	2028      	movs	r0, #40	; 0x28
 8001ac2:	f000 fff6 	bl	8002ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ac6:	2028      	movs	r0, #40	; 0x28
 8001ac8:	f001 f80f 	bl	8002aea <HAL_NVIC_EnableIRQ>

}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40020800 	.word	0x40020800

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>
	...

08001aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_MspInit+0x4c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001b2a:	2005      	movs	r0, #5
 8001b2c:	f000 ffb6 	bl	8002a9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_ADC_MspInit+0x7c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d127      	bne.n	8001bae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_ADC_MspInit+0x80>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b96:	2301      	movs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <HAL_ADC_MspInit+0x84>)
 8001baa:	f000 ffb9 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40012000 	.word	0x40012000
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020000 	.word	0x40020000

08001bc4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_TIM_IC_MspInit+0x94>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d134      	bne.n	8001c50 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_TIM_IC_MspInit+0x98>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <HAL_TIM_IC_MspInit+0x98>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_TIM_IC_MspInit+0x98>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_TIM_IC_MspInit+0x98>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <HAL_TIM_IC_MspInit+0x98>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_TIM_IC_MspInit+0x98>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <HAL_TIM_IC_MspInit+0x9c>)
 8001c3c:	f000 ff70 	bl	8002b20 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	201b      	movs	r0, #27
 8001c46:	f000 ff34 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c4a:	201b      	movs	r0, #27
 8001c4c:	f000 ff4d 	bl	8002aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	; 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020000 	.word	0x40020000

08001c64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d10d      	bne.n	8001c92 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_TIM_Base_MspInit+0x94>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d133      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_TIM_Base_MspInit+0x98>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_TIM_Base_MspInit+0x98>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_TIM_Base_MspInit+0x98>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_TIM_Base_MspInit+0x98>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_TIM_Base_MspInit+0x98>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_TIM_Base_MspInit+0x98>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4809      	ldr	r0, [pc, #36]	; (8001d40 <HAL_TIM_Base_MspInit+0x9c>)
 8001d1a:	f000 ff01 	bl	8002b20 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	201d      	movs	r0, #29
 8001d24:	f000 fec5 	bl	8002ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d28:	201d      	movs	r0, #29
 8001d2a:	f000 fede 	bl	8002aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020000 	.word	0x40020000

08001d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d64:	d11e      	bne.n	8001da4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_TIM_MspPostInit+0xb0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <HAL_TIM_MspPostInit+0xb0>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <HAL_TIM_MspPostInit+0xb0>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d82:	2308      	movs	r3, #8
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d92:	2301      	movs	r3, #1
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4816      	ldr	r0, [pc, #88]	; (8001df8 <HAL_TIM_MspPostInit+0xb4>)
 8001d9e:	f000 febf 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001da2:	e022      	b.n	8001dea <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <HAL_TIM_MspPostInit+0xb8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11d      	bne.n	8001dea <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_TIM_MspPostInit+0xb0>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <HAL_TIM_MspPostInit+0xb0>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <HAL_TIM_MspPostInit+0xb0>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <HAL_TIM_MspPostInit+0xb4>)
 8001de6:	f000 fe9b 	bl	8002b20 <HAL_GPIO_Init>
}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40000400 	.word	0x40000400

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_UART_MspInit+0xe8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12c      	bne.n	8001e7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a30      	ldr	r2, [pc, #192]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a29      	ldr	r2, [pc, #164]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b27      	ldr	r3, [pc, #156]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	481e      	ldr	r0, [pc, #120]	; (8001ef0 <HAL_UART_MspInit+0xf0>)
 8001e76:	f000 fe53 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e7a:	e030      	b.n	8001ede <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_UART_MspInit+0xf4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12b      	bne.n	8001ede <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001e90:	f043 0320 	orr.w	r3, r3, #32
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_UART_MspInit+0xec>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ebe:	23c0      	movs	r3, #192	; 0xc0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <HAL_UART_MspInit+0xf8>)
 8001eda:	f000 fe21 	bl	8002b20 <HAL_GPIO_Init>
}
 8001ede:	bf00      	nop
 8001ee0:	3730      	adds	r7, #48	; 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40004400 	.word	0x40004400
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40011400 	.word	0x40011400
 8001ef8:	40020800 	.word	0x40020800

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001f00:	e7fe      	b.n	8001f00 <NMI_Handler+0x4>

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f000 f8e6 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM1_CC_IRQHandler+0x10>)
 8001f56:	f001 ff03 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200000d4 	.word	0x200000d4

08001f64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <TIM3_IRQHandler+0x10>)
 8001f6a:	f001 fef9 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000164 	.word	0x20000164

08001f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(data_polling_trig_Pin);
 8001f7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f80:	f000 ff86 	bl	8002e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f88:	f000 ff82 	bl	8002e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <_sbrk+0x5c>)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <_sbrk+0x60>)
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <_sbrk+0x64>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <_sbrk+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d207      	bcs.n	8001fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc0:	f003 fa96 	bl	80054f0 <__errno>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fce:	e009      	b.n	8001fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <_sbrk+0x64>)
 8001fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20018000 	.word	0x20018000
 8001ff0:	00000400 	.word	0x00000400
 8001ff4:	20000298 	.word	0x20000298
 8001ff8:	200002b0 	.word	0x200002b0

08001ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002026:	490e      	ldr	r1, [pc, #56]	; (8002060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002028:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800203c:	4c0b      	ldr	r4, [pc, #44]	; (800206c <LoopFillZerobss+0x26>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800204a:	f7ff ffd7 	bl	8001ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204e:	f003 fa55 	bl	80054fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7ff f873 	bl	800113c <main>
  bx  lr    
 8002056:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002058:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002064:	08005ee0 	.word	0x08005ee0
  ldr r2, =_sbss
 8002068:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800206c:	200002b0 	.word	0x200002b0

08002070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC_IRQHandler>
	...

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_Init+0x40>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_Init+0x40>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_Init+0x40>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 fcfd 	bl	8002a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f000 f808 	bl	80020b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7ff fd20 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x54>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x58>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fd15 	bl	8002b06 <HAL_SYSTICK_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00e      	b.n	8002104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d80a      	bhi.n	8002102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f4:	f000 fcdd 	bl	8002ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_InitTick+0x5c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e000      	b.n	8002104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000000 	.word	0x20000000
 8002110:	20000008 	.word	0x20000008
 8002114:	20000004 	.word	0x20000004

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000008 	.word	0x20000008
 800213c:	2000029c 	.word	0x2000029c

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	2000029c 	.word	0x2000029c

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff ffee 	bl	8002140 <HAL_GetTick>
 8002164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002170:	d005      	beq.n	800217e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_Delay+0x44>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217e:	bf00      	nop
 8002180:	f7ff ffde 	bl	8002140 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8f7      	bhi.n	8002180 <HAL_Delay+0x28>
  {
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000008 	.word	0x20000008

080021a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e033      	b.n	800221e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fcbc 	bl	8001b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d118      	bne.n	8002210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e6:	f023 0302 	bic.w	r3, r3, #2
 80021ea:	f043 0202 	orr.w	r2, r3, #2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa86 	bl	8002704 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
 800220e:	e001      	b.n	8002214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Start+0x1a>
 800223e:	2302      	movs	r3, #2
 8002240:	e097      	b.n	8002372 <HAL_ADC_Start+0x14a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d018      	beq.n	800228a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_ADC_Start+0x158>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a45      	ldr	r2, [pc, #276]	; (8002384 <HAL_ADC_Start+0x15c>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0c9a      	lsrs	r2, r3, #18
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800227c:	e002      	b.n	8002284 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3b01      	subs	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f9      	bne.n	800227e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d15f      	bne.n	8002358 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d6:	d106      	bne.n	80022e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	f023 0206 	bic.w	r2, r3, #6
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44
 80022e4:	e002      	b.n	80022ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <HAL_ADC_Start+0x160>)
 80022f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002300:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d129      	bne.n	8002370 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	e020      	b.n	8002370 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a16      	ldr	r2, [pc, #88]	; (800238c <HAL_ADC_Start+0x164>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d11b      	bne.n	8002370 <HAL_ADC_Start+0x148>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d114      	bne.n	8002370 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	e00b      	b.n	8002370 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f043 0210 	orr.w	r2, r3, #16
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	f043 0201 	orr.w	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000000 	.word	0x20000000
 8002384:	431bde83 	.word	0x431bde83
 8002388:	40012300 	.word	0x40012300
 800238c:	40012000 	.word	0x40012000

08002390 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ac:	d113      	bne.n	80023d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023bc:	d10b      	bne.n	80023d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e063      	b.n	800249e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80023d6:	f7ff feb3 	bl	8002140 <HAL_GetTick>
 80023da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023dc:	e021      	b.n	8002422 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e4:	d01d      	beq.n	8002422 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_ADC_PollForConversion+0x6c>
 80023ec:	f7ff fea8 	bl	8002140 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d212      	bcs.n	8002422 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	d00b      	beq.n	8002422 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f043 0204 	orr.w	r2, r3, #4
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e03d      	b.n	800249e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b02      	cmp	r3, #2
 800242e:	d1d6      	bne.n	80023de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0212 	mvn.w	r2, #18
 8002438:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d123      	bne.n	800249c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d11f      	bne.n	800249c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002474:	2b00      	cmp	r3, #0
 8002476:	d111      	bne.n	800249c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x1c>
 80024d8:	2302      	movs	r3, #2
 80024da:	e105      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x228>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b09      	cmp	r3, #9
 80024ea:	d925      	bls.n	8002538 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68d9      	ldr	r1, [r3, #12]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	3b1e      	subs	r3, #30
 8002502:	2207      	movs	r2, #7
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43da      	mvns	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	400a      	ands	r2, r1
 8002510:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68d9      	ldr	r1, [r3, #12]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	4618      	mov	r0, r3
 8002524:	4603      	mov	r3, r0
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4403      	add	r3, r0
 800252a:	3b1e      	subs	r3, #30
 800252c:	409a      	lsls	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	e022      	b.n	800257e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6919      	ldr	r1, [r3, #16]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	2207      	movs	r2, #7
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	400a      	ands	r2, r1
 800255a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6919      	ldr	r1, [r3, #16]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	4618      	mov	r0, r3
 800256e:	4603      	mov	r3, r0
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4403      	add	r3, r0
 8002574:	409a      	lsls	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b06      	cmp	r3, #6
 8002584:	d824      	bhi.n	80025d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	3b05      	subs	r3, #5
 8002598:	221f      	movs	r2, #31
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	400a      	ands	r2, r1
 80025a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	3b05      	subs	r3, #5
 80025c2:	fa00 f203 	lsl.w	r2, r0, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34
 80025ce:	e04c      	b.n	800266a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d824      	bhi.n	8002622 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	3b23      	subs	r3, #35	; 0x23
 80025ea:	221f      	movs	r2, #31
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43da      	mvns	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	400a      	ands	r2, r1
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4618      	mov	r0, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3b23      	subs	r3, #35	; 0x23
 8002614:	fa00 f203 	lsl.w	r2, r0, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
 8002620:	e023      	b.n	800266a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b41      	subs	r3, #65	; 0x41
 8002634:	221f      	movs	r2, #31
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	400a      	ands	r2, r1
 8002642:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b41      	subs	r3, #65	; 0x41
 800265e:	fa00 f203 	lsl.w	r2, r0, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <HAL_ADC_ConfigChannel+0x234>)
 800266c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <HAL_ADC_ConfigChannel+0x238>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d109      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1cc>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b12      	cmp	r3, #18
 800267e:	d105      	bne.n	800268c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_ADC_ConfigChannel+0x238>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d123      	bne.n	80026de <HAL_ADC_ConfigChannel+0x21e>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b10      	cmp	r3, #16
 800269c:	d003      	beq.n	80026a6 <HAL_ADC_ConfigChannel+0x1e6>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b11      	cmp	r3, #17
 80026a4:	d11b      	bne.n	80026de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d111      	bne.n	80026de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_ADC_ConfigChannel+0x23c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a10      	ldr	r2, [pc, #64]	; (8002700 <HAL_ADC_ConfigChannel+0x240>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	0c9a      	lsrs	r2, r3, #18
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026d0:	e002      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f9      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	40012300 	.word	0x40012300
 80026f8:	40012000 	.word	0x40012000
 80026fc:	20000000 	.word	0x20000000
 8002700:	431bde83 	.word	0x431bde83

08002704 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270c:	4b79      	ldr	r3, [pc, #484]	; (80028f4 <ADC_Init+0x1f0>)
 800270e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	431a      	orrs	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	021a      	lsls	r2, r3, #8
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800275c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6899      	ldr	r1, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	4a58      	ldr	r2, [pc, #352]	; (80028f8 <ADC_Init+0x1f4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d022      	beq.n	80027e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6899      	ldr	r1, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e00f      	b.n	8002802 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002800:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0202 	bic.w	r2, r2, #2
 8002810:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6899      	ldr	r1, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7e1b      	ldrb	r3, [r3, #24]
 800281c:	005a      	lsls	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01b      	beq.n	8002868 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800283e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800284e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	3b01      	subs	r3, #1
 800285c:	035a      	lsls	r2, r3, #13
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	e007      	b.n	8002878 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002876:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	3b01      	subs	r3, #1
 8002894:	051a      	lsls	r2, r3, #20
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6899      	ldr	r1, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028ba:	025a      	lsls	r2, r3, #9
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	029a      	lsls	r2, r3, #10
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40012300 	.word	0x40012300
 80028f8:	0f000001 	.word	0x0f000001

080028fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002918:	4013      	ands	r3, r2
 800291a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292e:	4a04      	ldr	r2, [pc, #16]	; (8002940 <__NVIC_SetPriorityGrouping+0x44>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60d3      	str	r3, [r2, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <__NVIC_GetPriorityGrouping+0x18>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	f003 0307 	and.w	r3, r3, #7
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	2b00      	cmp	r3, #0
 8002970:	db0b      	blt.n	800298a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <__NVIC_EnableIRQ+0x38>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2001      	movs	r0, #1
 8002982:	fa00 f202 	lsl.w	r2, r0, r2
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100

0800299c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db0a      	blt.n	80029c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	490c      	ldr	r1, [pc, #48]	; (80029e8 <__NVIC_SetPriority+0x4c>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	440b      	add	r3, r1
 80029c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c4:	e00a      	b.n	80029dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4908      	ldr	r1, [pc, #32]	; (80029ec <__NVIC_SetPriority+0x50>)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	3b04      	subs	r3, #4
 80029d4:	0112      	lsls	r2, r2, #4
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	440b      	add	r3, r1
 80029da:	761a      	strb	r2, [r3, #24]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000e100 	.word	0xe000e100
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f1c3 0307 	rsb	r3, r3, #7
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	bf28      	it	cs
 8002a0e:	2304      	movcs	r3, #4
 8002a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d902      	bls.n	8002a20 <NVIC_EncodePriority+0x30>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3b03      	subs	r3, #3
 8002a1e:	e000      	b.n	8002a22 <NVIC_EncodePriority+0x32>
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	401a      	ands	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43d9      	mvns	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	4313      	orrs	r3, r2
         );
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a68:	d301      	bcc.n	8002a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00f      	b.n	8002a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <SysTick_Config+0x40>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a76:	210f      	movs	r1, #15
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a7c:	f7ff ff8e 	bl	800299c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <SysTick_Config+0x40>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a86:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <SysTick_Config+0x40>)
 8002a88:	2207      	movs	r2, #7
 8002a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	e000e010 	.word	0xe000e010

08002a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff29 	bl	80028fc <__NVIC_SetPriorityGrouping>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b086      	sub	sp, #24
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac4:	f7ff ff3e 	bl	8002944 <__NVIC_GetPriorityGrouping>
 8002ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7ff ff8e 	bl	80029f0 <NVIC_EncodePriority>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff5d 	bl	800299c <__NVIC_SetPriority>
}
 8002ae2:	bf00      	nop
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff31 	bl	8002960 <__NVIC_EnableIRQ>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ffa2 	bl	8002a58 <SysTick_Config>
 8002b14:	4603      	mov	r3, r0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e159      	b.n	8002df0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	f040 8148 	bne.w	8002dea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d005      	beq.n	8002b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d130      	bne.n	8002bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0201 	and.w	r2, r3, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d017      	beq.n	8002c10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d123      	bne.n	8002c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	08da      	lsrs	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3208      	adds	r2, #8
 8002c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	220f      	movs	r2, #15
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	08da      	lsrs	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3208      	adds	r2, #8
 8002c5e:	69b9      	ldr	r1, [r7, #24]
 8002c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0203 	and.w	r2, r3, #3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a2 	beq.w	8002dea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b57      	ldr	r3, [pc, #348]	; (8002e08 <HAL_GPIO_Init+0x2e8>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a56      	ldr	r2, [pc, #344]	; (8002e08 <HAL_GPIO_Init+0x2e8>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b54      	ldr	r3, [pc, #336]	; (8002e08 <HAL_GPIO_Init+0x2e8>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc2:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_GPIO_Init+0x2ec>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a49      	ldr	r2, [pc, #292]	; (8002e10 <HAL_GPIO_Init+0x2f0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d019      	beq.n	8002d22 <HAL_GPIO_Init+0x202>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a48      	ldr	r2, [pc, #288]	; (8002e14 <HAL_GPIO_Init+0x2f4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_GPIO_Init+0x1fe>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a47      	ldr	r2, [pc, #284]	; (8002e18 <HAL_GPIO_Init+0x2f8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00d      	beq.n	8002d1a <HAL_GPIO_Init+0x1fa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a46      	ldr	r2, [pc, #280]	; (8002e1c <HAL_GPIO_Init+0x2fc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <HAL_GPIO_Init+0x1f6>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <HAL_GPIO_Init+0x300>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_GPIO_Init+0x1f2>
 8002d0e:	2304      	movs	r3, #4
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d12:	2307      	movs	r3, #7
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x204>
 8002d22:	2300      	movs	r3, #0
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d34:	4935      	ldr	r1, [pc, #212]	; (8002e0c <HAL_GPIO_Init+0x2ec>)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d66:	4a2f      	ldr	r2, [pc, #188]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d90:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d96:	4b23      	ldr	r3, [pc, #140]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dba:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de4:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_GPIO_Init+0x304>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	f67f aea2 	bls.w	8002b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020c00 	.word	0x40020c00
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40013c00 	.word	0x40013c00

08002e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
 8002e34:	4613      	mov	r3, r2
 8002e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e38:	787b      	ldrb	r3, [r7, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e44:	e003      	b.n	8002e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	041a      	lsls	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	619a      	str	r2, [r3, #24]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e6c:	887a      	ldrh	r2, [r7, #2]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4013      	ands	r3, r2
 8002e72:	041a      	lsls	r2, r3, #16
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43d9      	mvns	r1, r3
 8002e78:	887b      	ldrh	r3, [r7, #2]
 8002e7a:	400b      	ands	r3, r1
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd ffb0 	bl	8000e14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40013c00 	.word	0x40013c00

08002ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e267      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d075      	beq.n	8002fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ede:	4b88      	ldr	r3, [pc, #544]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d00c      	beq.n	8002f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b85      	ldr	r3, [pc, #532]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d112      	bne.n	8002f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4b82      	ldr	r3, [pc, #520]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f02:	d10b      	bne.n	8002f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	4b7e      	ldr	r3, [pc, #504]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05b      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x108>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d157      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e242      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d106      	bne.n	8002f34 <HAL_RCC_OscConfig+0x74>
 8002f26:	4b76      	ldr	r3, [pc, #472]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a75      	ldr	r2, [pc, #468]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e01d      	b.n	8002f70 <HAL_RCC_OscConfig+0xb0>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0x98>
 8002f3e:	4b70      	ldr	r3, [pc, #448]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6f      	ldr	r2, [pc, #444]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6c      	ldr	r2, [pc, #432]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0xb0>
 8002f58:	4b69      	ldr	r3, [pc, #420]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a68      	ldr	r2, [pc, #416]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b66      	ldr	r3, [pc, #408]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a65      	ldr	r2, [pc, #404]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7ff f8e2 	bl	8002140 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f80:	f7ff f8de 	bl	8002140 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e207      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b5b      	ldr	r3, [pc, #364]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0xc0>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff f8ce 	bl	8002140 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff f8ca 	bl	8002140 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1f3      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	4b51      	ldr	r3, [pc, #324]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xe8>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d063      	beq.n	800309e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd6:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d11c      	bne.n	8003028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fee:	4b44      	ldr	r3, [pc, #272]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d116      	bne.n	8003028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_RCC_OscConfig+0x152>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e1c7      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4937      	ldr	r1, [pc, #220]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	e03a      	b.n	800309e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003030:	4b34      	ldr	r3, [pc, #208]	; (8003104 <HAL_RCC_OscConfig+0x244>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7ff f883 	bl	8002140 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303e:	f7ff f87f 	bl	8002140 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e1a8      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b28      	ldr	r3, [pc, #160]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4925      	ldr	r1, [pc, #148]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x244>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7ff f862 	bl	8002140 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003080:	f7ff f85e 	bl	8002140 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e187      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d036      	beq.n	8003118 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_RCC_OscConfig+0x248>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7ff f842 	bl	8002140 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c0:	f7ff f83e 	bl	8002140 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e167      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <HAL_RCC_OscConfig+0x240>)
 80030d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x200>
 80030de:	e01b      	b.n	8003118 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_OscConfig+0x248>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7ff f82b 	bl	8002140 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	e00e      	b.n	800310c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ee:	f7ff f827 	bl	8002140 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d907      	bls.n	800310c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e150      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
 8003100:	40023800 	.word	0x40023800
 8003104:	42470000 	.word	0x42470000
 8003108:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	4b88      	ldr	r3, [pc, #544]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800310e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1ea      	bne.n	80030ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8097 	beq.w	8003254 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b81      	ldr	r3, [pc, #516]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	4b7d      	ldr	r3, [pc, #500]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a7c      	ldr	r2, [pc, #496]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b7a      	ldr	r3, [pc, #488]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4b77      	ldr	r3, [pc, #476]	; (8003334 <HAL_RCC_OscConfig+0x474>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d118      	bne.n	8003194 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003162:	4b74      	ldr	r3, [pc, #464]	; (8003334 <HAL_RCC_OscConfig+0x474>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a73      	ldr	r2, [pc, #460]	; (8003334 <HAL_RCC_OscConfig+0x474>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316e:	f7fe ffe7 	bl	8002140 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003176:	f7fe ffe3 	bl	8002140 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e10c      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	4b6a      	ldr	r3, [pc, #424]	; (8003334 <HAL_RCC_OscConfig+0x474>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <HAL_RCC_OscConfig+0x2ea>
 800319c:	4b64      	ldr	r3, [pc, #400]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a63      	ldr	r2, [pc, #396]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6713      	str	r3, [r2, #112]	; 0x70
 80031a8:	e01c      	b.n	80031e4 <HAL_RCC_OscConfig+0x324>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b05      	cmp	r3, #5
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0x30c>
 80031b2:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a5e      	ldr	r2, [pc, #376]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
 80031be:	4b5c      	ldr	r3, [pc, #368]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	4a5b      	ldr	r2, [pc, #364]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0x324>
 80031cc:	4b58      	ldr	r3, [pc, #352]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a57      	ldr	r2, [pc, #348]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
 80031d8:	4b55      	ldr	r3, [pc, #340]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	4a54      	ldr	r2, [pc, #336]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80031de:	f023 0304 	bic.w	r3, r3, #4
 80031e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe ffa8 	bl	8002140 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f2:	e00a      	b.n	800320a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f4:	f7fe ffa4 	bl	8002140 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e0cb      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320a:	4b49      	ldr	r3, [pc, #292]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0ee      	beq.n	80031f4 <HAL_RCC_OscConfig+0x334>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7fe ff92 	bl	8002140 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321e:	e00a      	b.n	8003236 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fe ff8e 	bl	8002140 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e0b5      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003236:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1ee      	bne.n	8003220 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d105      	bne.n	8003254 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003248:	4b39      	ldr	r3, [pc, #228]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	4a38      	ldr	r2, [pc, #224]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 800324e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003252:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80a1 	beq.w	80033a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800325e:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b08      	cmp	r3, #8
 8003268:	d05c      	beq.n	8003324 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d141      	bne.n	80032f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <HAL_RCC_OscConfig+0x478>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe ff62 	bl	8002140 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe ff5e 	bl	8002140 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e087      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	3b01      	subs	r3, #1
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	491b      	ldr	r1, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_RCC_OscConfig+0x478>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fe ff37 	bl	8002140 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe ff33 	bl	8002140 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e05c      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x416>
 80032f4:	e054      	b.n	80033a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <HAL_RCC_OscConfig+0x478>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fe ff20 	bl	8002140 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe ff1c 	bl	8002140 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e045      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCC_OscConfig+0x470>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x444>
 8003322:	e03d      	b.n	80033a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e038      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
 8003330:	40023800 	.word	0x40023800
 8003334:	40007000 	.word	0x40007000
 8003338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_RCC_OscConfig+0x4ec>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d028      	beq.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d121      	bne.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d11a      	bne.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003374:	4293      	cmp	r3, r2
 8003376:	d111      	bne.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	3b01      	subs	r3, #1
 8003386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d107      	bne.n	800339c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800

080033b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0cc      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c4:	4b68      	ldr	r3, [pc, #416]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d90c      	bls.n	80033ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b65      	ldr	r3, [pc, #404]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b63      	ldr	r3, [pc, #396]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b8      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003404:	4b59      	ldr	r3, [pc, #356]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a58      	ldr	r2, [pc, #352]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800340e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a52      	ldr	r2, [pc, #328]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	494d      	ldr	r1, [pc, #308]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d044      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d119      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e07f      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d003      	beq.n	800346e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346a:	2b03      	cmp	r3, #3
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346e:	4b3f      	ldr	r3, [pc, #252]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e06f      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	4b3b      	ldr	r3, [pc, #236]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e067      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348e:	4b37      	ldr	r3, [pc, #220]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4934      	ldr	r1, [pc, #208]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	4313      	orrs	r3, r2
 800349e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a0:	f7fe fe4e 	bl	8002140 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fe fe4a 	bl	8002140 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e04f      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	4b2b      	ldr	r3, [pc, #172]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 020c 	and.w	r2, r3, #12
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d1eb      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034d0:	4b25      	ldr	r3, [pc, #148]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d20c      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e032      	b.n	800355e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4916      	ldr	r1, [pc, #88]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	490e      	ldr	r1, [pc, #56]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003536:	f000 f821 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800353a:	4602      	mov	r2, r0
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	490a      	ldr	r1, [pc, #40]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	5ccb      	ldrb	r3, [r1, r3]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	4a09      	ldr	r2, [pc, #36]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fdae 	bl	80020b8 <HAL_InitTick>

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00
 800356c:	40023800 	.word	0x40023800
 8003570:	08005e84 	.word	0x08005e84
 8003574:	20000000 	.word	0x20000000
 8003578:	20000004 	.word	0x20000004

0800357c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003580:	b094      	sub	sp, #80	; 0x50
 8003582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	647b      	str	r3, [r7, #68]	; 0x44
 8003588:	2300      	movs	r3, #0
 800358a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800358c:	2300      	movs	r3, #0
 800358e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003594:	4b79      	ldr	r3, [pc, #484]	; (800377c <HAL_RCC_GetSysClockFreq+0x200>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b08      	cmp	r3, #8
 800359e:	d00d      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x40>
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	f200 80e1 	bhi.w	8003768 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x34>
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ae:	e0db      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b73      	ldr	r3, [pc, #460]	; (8003780 <HAL_RCC_GetSysClockFreq+0x204>)
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035b4:	e0db      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035b6:	4b73      	ldr	r3, [pc, #460]	; (8003784 <HAL_RCC_GetSysClockFreq+0x208>)
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ba:	e0d8      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035bc:	4b6f      	ldr	r3, [pc, #444]	; (800377c <HAL_RCC_GetSysClockFreq+0x200>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c6:	4b6d      	ldr	r3, [pc, #436]	; (800377c <HAL_RCC_GetSysClockFreq+0x200>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d063      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d2:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_GetSysClockFreq+0x200>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	099b      	lsrs	r3, r3, #6
 80035d8:	2200      	movs	r2, #0
 80035da:	63bb      	str	r3, [r7, #56]	; 0x38
 80035dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e4:	633b      	str	r3, [r7, #48]	; 0x30
 80035e6:	2300      	movs	r3, #0
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035ee:	4622      	mov	r2, r4
 80035f0:	462b      	mov	r3, r5
 80035f2:	f04f 0000 	mov.w	r0, #0
 80035f6:	f04f 0100 	mov.w	r1, #0
 80035fa:	0159      	lsls	r1, r3, #5
 80035fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003600:	0150      	lsls	r0, r2, #5
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4621      	mov	r1, r4
 8003608:	1a51      	subs	r1, r2, r1
 800360a:	6139      	str	r1, [r7, #16]
 800360c:	4629      	mov	r1, r5
 800360e:	eb63 0301 	sbc.w	r3, r3, r1
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003620:	4659      	mov	r1, fp
 8003622:	018b      	lsls	r3, r1, #6
 8003624:	4651      	mov	r1, sl
 8003626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800362a:	4651      	mov	r1, sl
 800362c:	018a      	lsls	r2, r1, #6
 800362e:	4651      	mov	r1, sl
 8003630:	ebb2 0801 	subs.w	r8, r2, r1
 8003634:	4659      	mov	r1, fp
 8003636:	eb63 0901 	sbc.w	r9, r3, r1
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800364a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800364e:	4690      	mov	r8, r2
 8003650:	4699      	mov	r9, r3
 8003652:	4623      	mov	r3, r4
 8003654:	eb18 0303 	adds.w	r3, r8, r3
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	462b      	mov	r3, r5
 800365c:	eb49 0303 	adc.w	r3, r9, r3
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800366e:	4629      	mov	r1, r5
 8003670:	024b      	lsls	r3, r1, #9
 8003672:	4621      	mov	r1, r4
 8003674:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003678:	4621      	mov	r1, r4
 800367a:	024a      	lsls	r2, r1, #9
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003682:	2200      	movs	r2, #0
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
 8003686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003688:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800368c:	f7fd f9e6 	bl	8000a5c <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4613      	mov	r3, r2
 8003696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003698:	e058      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369a:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_RCC_GetSysClockFreq+0x200>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	099b      	lsrs	r3, r3, #6
 80036a0:	2200      	movs	r2, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	4611      	mov	r1, r2
 80036a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	2300      	movs	r3, #0
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
 80036b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	f04f 0000 	mov.w	r0, #0
 80036bc:	f04f 0100 	mov.w	r1, #0
 80036c0:	0159      	lsls	r1, r3, #5
 80036c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c6:	0150      	lsls	r0, r2, #5
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4641      	mov	r1, r8
 80036ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80036d2:	4649      	mov	r1, r9
 80036d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036ec:	ebb2 040a 	subs.w	r4, r2, sl
 80036f0:	eb63 050b 	sbc.w	r5, r3, fp
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	00eb      	lsls	r3, r5, #3
 80036fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003702:	00e2      	lsls	r2, r4, #3
 8003704:	4614      	mov	r4, r2
 8003706:	461d      	mov	r5, r3
 8003708:	4643      	mov	r3, r8
 800370a:	18e3      	adds	r3, r4, r3
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	464b      	mov	r3, r9
 8003710:	eb45 0303 	adc.w	r3, r5, r3
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003722:	4629      	mov	r1, r5
 8003724:	028b      	lsls	r3, r1, #10
 8003726:	4621      	mov	r1, r4
 8003728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800372c:	4621      	mov	r1, r4
 800372e:	028a      	lsls	r2, r1, #10
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003736:	2200      	movs	r2, #0
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	61fa      	str	r2, [r7, #28]
 800373c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003740:	f7fd f98c 	bl	8000a5c <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4613      	mov	r3, r2
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_GetSysClockFreq+0x200>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	3301      	adds	r3, #1
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800375c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800375e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003766:	e002      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCC_GetSysClockFreq+0x204>)
 800376a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800376c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003770:	4618      	mov	r0, r3
 8003772:	3750      	adds	r7, #80	; 0x50
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	00f42400 	.word	0x00f42400
 8003784:	007a1200 	.word	0x007a1200

08003788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCC_GetHCLKFreq+0x14>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000000 	.word	0x20000000

080037a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037a4:	f7ff fff0 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	0a9b      	lsrs	r3, r3, #10
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4903      	ldr	r1, [pc, #12]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037b6:	5ccb      	ldrb	r3, [r1, r3]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40023800 	.word	0x40023800
 80037c4:	08005e94 	.word	0x08005e94

080037c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037cc:	f7ff ffdc 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	0b5b      	lsrs	r3, r3, #13
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	4903      	ldr	r1, [pc, #12]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40023800 	.word	0x40023800
 80037ec:	08005e94 	.word	0x08005e94

080037f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e041      	b.n	8003886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe fa44 	bl	8001ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f000 fe30 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e041      	b.n	8003924 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fe f9d5 	bl	8001c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4610      	mov	r0, r2
 80038ce:	f000 fde1 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_TIM_PWM_Start+0x24>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e022      	b.n	8003996 <HAL_TIM_PWM_Start+0x6a>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b04      	cmp	r3, #4
 8003954:	d109      	bne.n	800396a <HAL_TIM_PWM_Start+0x3e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	e015      	b.n	8003996 <HAL_TIM_PWM_Start+0x6a>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d109      	bne.n	8003984 <HAL_TIM_PWM_Start+0x58>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e008      	b.n	8003996 <HAL_TIM_PWM_Start+0x6a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e068      	b.n	8003a70 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start+0x82>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ac:	e013      	b.n	80039d6 <HAL_TIM_PWM_Start+0xaa>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Start+0x92>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039bc:	e00b      	b.n	80039d6 <HAL_TIM_PWM_Start+0xaa>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Start+0xa2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039cc:	e003      	b.n	80039d6 <HAL_TIM_PWM_Start+0xaa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2201      	movs	r2, #1
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 f91c 	bl	8004c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a23      	ldr	r2, [pc, #140]	; (8003a78 <HAL_TIM_PWM_Start+0x14c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <HAL_TIM_PWM_Start+0x14c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x10e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d013      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x10e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <HAL_TIM_PWM_Start+0x150>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x10e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <HAL_TIM_PWM_Start+0x154>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x10e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_TIM_PWM_Start+0x158>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x10e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <HAL_TIM_PWM_Start+0x15c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d111      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b06      	cmp	r3, #6
 8003a4a:	d010      	beq.n	8003a6e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5c:	e007      	b.n	8003a6e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	40014000 	.word	0x40014000

08003a8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e041      	b.n	8003b22 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fe f886 	bl	8001bc4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4610      	mov	r0, r2
 8003acc:	f000 fce2 	bl	8004494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_IC_Start_IT+0x1e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	e013      	b.n	8003b72 <HAL_TIM_IC_Start_IT+0x46>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_IC_Start_IT+0x2e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	e00b      	b.n	8003b72 <HAL_TIM_IC_Start_IT+0x46>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_IC_Start_IT+0x3e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	e003      	b.n	8003b72 <HAL_TIM_IC_Start_IT+0x46>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <HAL_TIM_IC_Start_IT+0x58>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e013      	b.n	8003bac <HAL_TIM_IC_Start_IT+0x80>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d104      	bne.n	8003b94 <HAL_TIM_IC_Start_IT+0x68>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e00b      	b.n	8003bac <HAL_TIM_IC_Start_IT+0x80>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d104      	bne.n	8003ba4 <HAL_TIM_IC_Start_IT+0x78>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e003      	b.n	8003bac <HAL_TIM_IC_Start_IT+0x80>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bae:	7bbb      	ldrb	r3, [r7, #14]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bb4:	7b7b      	ldrb	r3, [r7, #13]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d001      	beq.n	8003bbe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e0c2      	b.n	8003d44 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_IC_Start_IT+0xa2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bcc:	e013      	b.n	8003bf6 <HAL_TIM_IC_Start_IT+0xca>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_IC_Start_IT+0xb2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bdc:	e00b      	b.n	8003bf6 <HAL_TIM_IC_Start_IT+0xca>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_IC_Start_IT+0xc2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bec:	e003      	b.n	8003bf6 <HAL_TIM_IC_Start_IT+0xca>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <HAL_TIM_IC_Start_IT+0xda>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c04:	e013      	b.n	8003c2e <HAL_TIM_IC_Start_IT+0x102>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d104      	bne.n	8003c16 <HAL_TIM_IC_Start_IT+0xea>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c14:	e00b      	b.n	8003c2e <HAL_TIM_IC_Start_IT+0x102>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d104      	bne.n	8003c26 <HAL_TIM_IC_Start_IT+0xfa>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c24:	e003      	b.n	8003c2e <HAL_TIM_IC_Start_IT+0x102>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d841      	bhi.n	8003cb8 <HAL_TIM_IC_Start_IT+0x18c>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <HAL_TIM_IC_Start_IT+0x110>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08003cb9 	.word	0x08003cb9
 8003c44:	08003cb9 	.word	0x08003cb9
 8003c48:	08003cb9 	.word	0x08003cb9
 8003c4c:	08003c83 	.word	0x08003c83
 8003c50:	08003cb9 	.word	0x08003cb9
 8003c54:	08003cb9 	.word	0x08003cb9
 8003c58:	08003cb9 	.word	0x08003cb9
 8003c5c:	08003c95 	.word	0x08003c95
 8003c60:	08003cb9 	.word	0x08003cb9
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003cb9 	.word	0x08003cb9
 8003c6c:	08003ca7 	.word	0x08003ca7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0202 	orr.w	r2, r2, #2
 8003c7e:	60da      	str	r2, [r3, #12]
      break;
 8003c80:	e01d      	b.n	8003cbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0204 	orr.w	r2, r2, #4
 8003c90:	60da      	str	r2, [r3, #12]
      break;
 8003c92:	e014      	b.n	8003cbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0208 	orr.w	r2, r2, #8
 8003ca2:	60da      	str	r2, [r3, #12]
      break;
 8003ca4:	e00b      	b.n	8003cbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0210 	orr.w	r2, r2, #16
 8003cb4:	60da      	str	r2, [r3, #12]
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d13e      	bne.n	8003d42 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 ffa5 	bl	8004c1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <HAL_TIM_IC_Start_IT+0x220>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_TIM_IC_Start_IT+0x1e2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d013      	beq.n	8003d0e <HAL_TIM_IC_Start_IT+0x1e2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <HAL_TIM_IC_Start_IT+0x224>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_TIM_IC_Start_IT+0x1e2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <HAL_TIM_IC_Start_IT+0x228>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_TIM_IC_Start_IT+0x1e2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <HAL_TIM_IC_Start_IT+0x22c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_TIM_IC_Start_IT+0x1e2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <HAL_TIM_IC_Start_IT+0x230>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d111      	bne.n	8003d32 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b06      	cmp	r3, #6
 8003d1e:	d010      	beq.n	8003d42 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d30:	e007      	b.n	8003d42 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40014000 	.word	0x40014000

08003d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0202 	mvn.w	r2, #2
 8003d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fd f85c 	bl	8000e60 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fb54 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fb5b 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0204 	mvn.w	r2, #4
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd f832 	bl	8000e60 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fb2a 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fb31 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0208 	mvn.w	r2, #8
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd f808 	bl	8000e60 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fb00 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fb07 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0210 	mvn.w	r2, #16
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fc ffde 	bl	8000e60 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fad6 	bl	8004458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fadd 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0201 	mvn.w	r2, #1
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fab0 	bl	8004444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d10e      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	2b80      	cmp	r3, #128	; 0x80
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 ff24 	bl	8004d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d10e      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d107      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 faa2 	bl	8004480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d107      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0220 	mvn.w	r2, #32
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 feee 	bl	8004d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e088      	b.n	80040a0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f000 fc7e 	bl	80048ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 020c 	bic.w	r2, r2, #12
 8003fbe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6999      	ldr	r1, [r3, #24]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	619a      	str	r2, [r3, #24]
 8003fd2:	e060      	b.n	8004096 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d11c      	bne.n	8004014 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6819      	ldr	r1, [r3, #0]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f000 fcf6 	bl	80049da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ffc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6999      	ldr	r1, [r3, #24]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	021a      	lsls	r2, r3, #8
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	619a      	str	r2, [r3, #24]
 8004012:	e040      	b.n	8004096 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b08      	cmp	r3, #8
 8004018:	d11b      	bne.n	8004052 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6819      	ldr	r1, [r3, #0]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f000 fd43 	bl	8004ab4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 020c 	bic.w	r2, r2, #12
 800403c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69d9      	ldr	r1, [r3, #28]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	61da      	str	r2, [r3, #28]
 8004050:	e021      	b.n	8004096 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b0c      	cmp	r3, #12
 8004056:	d11c      	bne.n	8004092 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f000 fd60 	bl	8004b2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800407a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69d9      	ldr	r1, [r3, #28]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	61da      	str	r2, [r3, #28]
 8004090:	e001      	b.n	8004096 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e0ae      	b.n	8004224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	f200 809f 	bhi.w	8004214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	08004111 	.word	0x08004111
 80040e0:	08004215 	.word	0x08004215
 80040e4:	08004215 	.word	0x08004215
 80040e8:	08004215 	.word	0x08004215
 80040ec:	08004151 	.word	0x08004151
 80040f0:	08004215 	.word	0x08004215
 80040f4:	08004215 	.word	0x08004215
 80040f8:	08004215 	.word	0x08004215
 80040fc:	08004193 	.word	0x08004193
 8004100:	08004215 	.word	0x08004215
 8004104:	08004215 	.word	0x08004215
 8004108:	08004215 	.word	0x08004215
 800410c:	080041d3 	.word	0x080041d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fa3c 	bl	8004594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0208 	orr.w	r2, r2, #8
 800412a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0204 	bic.w	r2, r2, #4
 800413a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6999      	ldr	r1, [r3, #24]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	619a      	str	r2, [r3, #24]
      break;
 800414e:	e064      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fa82 	bl	8004660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6999      	ldr	r1, [r3, #24]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	021a      	lsls	r2, r3, #8
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	619a      	str	r2, [r3, #24]
      break;
 8004190:	e043      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 facd 	bl	8004738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0208 	orr.w	r2, r2, #8
 80041ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0204 	bic.w	r2, r2, #4
 80041bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69d9      	ldr	r1, [r3, #28]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	61da      	str	r2, [r3, #28]
      break;
 80041d0:	e023      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fb17 	bl	800480c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69d9      	ldr	r1, [r3, #28]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	021a      	lsls	r2, r3, #8
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	61da      	str	r2, [r3, #28]
      break;
 8004212:	e002      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
      break;
 8004218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_TIM_ConfigClockSource+0x1c>
 8004244:	2302      	movs	r3, #2
 8004246:	e0b4      	b.n	80043b2 <HAL_TIM_ConfigClockSource+0x186>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800426e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004280:	d03e      	beq.n	8004300 <HAL_TIM_ConfigClockSource+0xd4>
 8004282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004286:	f200 8087 	bhi.w	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 800428a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428e:	f000 8086 	beq.w	800439e <HAL_TIM_ConfigClockSource+0x172>
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d87f      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b70      	cmp	r3, #112	; 0x70
 800429a:	d01a      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0xa6>
 800429c:	2b70      	cmp	r3, #112	; 0x70
 800429e:	d87b      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b60      	cmp	r3, #96	; 0x60
 80042a2:	d050      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x11a>
 80042a4:	2b60      	cmp	r3, #96	; 0x60
 80042a6:	d877      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b50      	cmp	r3, #80	; 0x50
 80042aa:	d03c      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0xfa>
 80042ac:	2b50      	cmp	r3, #80	; 0x50
 80042ae:	d873      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d058      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x13a>
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d86f      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 80042b8:	2b30      	cmp	r3, #48	; 0x30
 80042ba:	d064      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x15a>
 80042bc:	2b30      	cmp	r3, #48	; 0x30
 80042be:	d86b      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d060      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d867      	bhi.n	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d05c      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x15a>
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d05a      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x15a>
 80042d0:	e062      	b.n	8004398 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6899      	ldr	r1, [r3, #8]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f000 fc7b 	bl	8004bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	609a      	str	r2, [r3, #8]
      break;
 80042fe:	e04f      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6899      	ldr	r1, [r3, #8]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f000 fc64 	bl	8004bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004322:	609a      	str	r2, [r3, #8]
      break;
 8004324:	e03c      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 fb22 	bl	800497c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2150      	movs	r1, #80	; 0x50
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fc31 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004344:	e02c      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	461a      	mov	r2, r3
 8004354:	f000 fb7e 	bl	8004a54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2160      	movs	r1, #96	; 0x60
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fc21 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004364:	e01c      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	461a      	mov	r2, r3
 8004374:	f000 fb02 	bl	800497c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2140      	movs	r1, #64	; 0x40
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fc11 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004384:	e00c      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f000 fc08 	bl	8004ba6 <TIM_ITRx_SetConfig>
      break;
 8004396:	e003      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
      break;
 800439c:	e000      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800439e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d831      	bhi.n	8004434 <HAL_TIM_ReadCapturedValue+0x78>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	08004435 	.word	0x08004435
 80043e0:	08004435 	.word	0x08004435
 80043e4:	08004435 	.word	0x08004435
 80043e8:	08004417 	.word	0x08004417
 80043ec:	08004435 	.word	0x08004435
 80043f0:	08004435 	.word	0x08004435
 80043f4:	08004435 	.word	0x08004435
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004435 	.word	0x08004435
 8004400:	08004435 	.word	0x08004435
 8004404:	08004435 	.word	0x08004435
 8004408:	0800442b 	.word	0x0800442b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	60fb      	str	r3, [r7, #12]

      break;
 8004414:	e00f      	b.n	8004436 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	60fb      	str	r3, [r7, #12]

      break;
 800441e:	e00a      	b.n	8004436 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	60fb      	str	r3, [r7, #12]

      break;
 8004428:	e005      	b.n	8004436 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	60fb      	str	r3, [r7, #12]

      break;
 8004432:	e000      	b.n	8004436 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004434:	bf00      	nop
  }

  return tmpreg;
 8004436:	68fb      	ldr	r3, [r7, #12]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a34      	ldr	r2, [pc, #208]	; (8004578 <TIM_Base_SetConfig+0xe4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00f      	beq.n	80044cc <TIM_Base_SetConfig+0x38>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d00b      	beq.n	80044cc <TIM_Base_SetConfig+0x38>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a31      	ldr	r2, [pc, #196]	; (800457c <TIM_Base_SetConfig+0xe8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d007      	beq.n	80044cc <TIM_Base_SetConfig+0x38>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a30      	ldr	r2, [pc, #192]	; (8004580 <TIM_Base_SetConfig+0xec>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_Base_SetConfig+0x38>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a2f      	ldr	r2, [pc, #188]	; (8004584 <TIM_Base_SetConfig+0xf0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d108      	bne.n	80044de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <TIM_Base_SetConfig+0xe4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01b      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ec:	d017      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a22      	ldr	r2, [pc, #136]	; (800457c <TIM_Base_SetConfig+0xe8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a21      	ldr	r2, [pc, #132]	; (8004580 <TIM_Base_SetConfig+0xec>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00f      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a20      	ldr	r2, [pc, #128]	; (8004584 <TIM_Base_SetConfig+0xf0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <TIM_Base_SetConfig+0xf4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1e      	ldr	r2, [pc, #120]	; (800458c <TIM_Base_SetConfig+0xf8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_Base_SetConfig+0x8a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <TIM_Base_SetConfig+0xfc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a08      	ldr	r2, [pc, #32]	; (8004578 <TIM_Base_SetConfig+0xe4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d103      	bne.n	8004564 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	615a      	str	r2, [r3, #20]
}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800

08004594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f023 0302 	bic.w	r3, r3, #2
 80045dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a1c      	ldr	r2, [pc, #112]	; (800465c <TIM_OC1_SetConfig+0xc8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10c      	bne.n	800460a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0308 	bic.w	r3, r3, #8
 80045f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f023 0304 	bic.w	r3, r3, #4
 8004608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a13      	ldr	r2, [pc, #76]	; (800465c <TIM_OC1_SetConfig+0xc8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d111      	bne.n	8004636 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	621a      	str	r2, [r3, #32]
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40010000 	.word	0x40010000

08004660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f023 0210 	bic.w	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0320 	bic.w	r3, r3, #32
 80046aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <TIM_OC2_SetConfig+0xd4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10d      	bne.n	80046dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a15      	ldr	r2, [pc, #84]	; (8004734 <TIM_OC2_SetConfig+0xd4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d113      	bne.n	800470c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40010000 	.word	0x40010000

08004738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <TIM_OC3_SetConfig+0xd0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10d      	bne.n	80047b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800479c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a14      	ldr	r2, [pc, #80]	; (8004808 <TIM_OC3_SetConfig+0xd0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d113      	bne.n	80047e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	621a      	str	r2, [r3, #32]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	40010000 	.word	0x40010000

0800480c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	031b      	lsls	r3, r3, #12
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <TIM_OC4_SetConfig+0x9c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d109      	bne.n	8004880 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	019b      	lsls	r3, r3, #6
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	621a      	str	r2, [r3, #32]
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40010000 	.word	0x40010000

080048ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f023 0201 	bic.w	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4a24      	ldr	r2, [pc, #144]	; (8004968 <TIM_TI1_SetConfig+0xbc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <TIM_TI1_SetConfig+0x56>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e0:	d00f      	beq.n	8004902 <TIM_TI1_SetConfig+0x56>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a21      	ldr	r2, [pc, #132]	; (800496c <TIM_TI1_SetConfig+0xc0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_TI1_SetConfig+0x56>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <TIM_TI1_SetConfig+0xc4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <TIM_TI1_SetConfig+0x56>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <TIM_TI1_SetConfig+0xc8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_TI1_SetConfig+0x56>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <TIM_TI1_SetConfig+0xcc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <TIM_TI1_SetConfig+0x5a>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <TIM_TI1_SetConfig+0x5c>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e003      	b.n	8004926 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	b2db      	uxtb	r3, r3
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f023 030a 	bic.w	r3, r3, #10
 8004940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 030a 	and.w	r3, r3, #10
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40010000 	.word	0x40010000
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	40014000 	.word	0x40014000

0800497c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f023 0201 	bic.w	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f023 030a 	bic.w	r3, r3, #10
 80049b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049da:	b480      	push	{r7}
 80049dc:	b087      	sub	sp, #28
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f023 0210 	bic.w	r2, r3, #16
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f023 0210 	bic.w	r2, r3, #16
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	031b      	lsls	r3, r3, #12
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	621a      	str	r2, [r3, #32]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 0303 	bic.w	r3, r3, #3
 8004ae0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	621a      	str	r2, [r3, #32]
}
 8004b20:	bf00      	nop
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	031b      	lsls	r3, r3, #12
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004b7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	031b      	lsls	r3, r3, #12
 8004b84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f043 0307 	orr.w	r3, r3, #7
 8004bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	021a      	lsls	r2, r3, #8
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	609a      	str	r2, [r3, #8]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2201      	movs	r2, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1a      	ldr	r2, [r3, #32]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	401a      	ands	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	fa01 f303 	lsl.w	r3, r1, r3
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e050      	b.n	8004d22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d018      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ccc:	d013      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00e      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d009      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10c      	bne.n	8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40000c00 	.word	0x40000c00
 8004d40:	40014000 	.word	0x40014000

08004d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e03f      	b.n	8004dfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fd f834 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f929 	bl	8005008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b08a      	sub	sp, #40	; 0x28
 8004e0a:	af02      	add	r7, sp, #8
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	60b9      	str	r1, [r7, #8]
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d17c      	bne.n	8004f20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_UART_Transmit+0x2c>
 8004e2c:	88fb      	ldrh	r3, [r7, #6]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e075      	b.n	8004f22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_UART_Transmit+0x3e>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e06e      	b.n	8004f22 <HAL_UART_Transmit+0x11c>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2221      	movs	r2, #33	; 0x21
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e5a:	f7fd f971 	bl	8002140 <HAL_GetTick>
 8004e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	88fa      	ldrh	r2, [r7, #6]
 8004e6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e74:	d108      	bne.n	8004e88 <HAL_UART_Transmit+0x82>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	e003      	b.n	8004e90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e98:	e02a      	b.n	8004ef0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2180      	movs	r1, #128	; 0x80
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f840 	bl	8004f2a <UART_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e036      	b.n	8004f22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	3302      	adds	r3, #2
 8004ece:	61bb      	str	r3, [r7, #24]
 8004ed0:	e007      	b.n	8004ee2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	781a      	ldrb	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1cf      	bne.n	8004e9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2140      	movs	r1, #64	; 0x40
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f810 	bl	8004f2a <UART_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e006      	b.n	8004f22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e000      	b.n	8004f22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f20:	2302      	movs	r3, #2
  }
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b090      	sub	sp, #64	; 0x40
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3a:	e050      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f42:	d04c      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f4a:	f7fd f8f9 	bl	8002140 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d241      	bcs.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f7a:	637a      	str	r2, [r7, #52]	; 0x34
 8004f7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e5      	bne.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3314      	adds	r3, #20
 8004f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3314      	adds	r3, #20
 8004fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fae:	623a      	str	r2, [r7, #32]
 8004fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	69f9      	ldr	r1, [r7, #28]
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e00f      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d09f      	beq.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3740      	adds	r7, #64	; 0x40
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800500c:	b0c0      	sub	sp, #256	; 0x100
 800500e:	af00      	add	r7, sp, #0
 8005010:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	68d9      	ldr	r1, [r3, #12]
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	ea40 0301 	orr.w	r3, r0, r1
 8005030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	431a      	orrs	r2, r3
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	431a      	orrs	r2, r3
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005060:	f021 010c 	bic.w	r1, r1, #12
 8005064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800506e:	430b      	orrs	r3, r1
 8005070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005082:	6999      	ldr	r1, [r3, #24]
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	ea40 0301 	orr.w	r3, r0, r1
 800508e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b8f      	ldr	r3, [pc, #572]	; (80052d4 <UART_SetConfig+0x2cc>)
 8005098:	429a      	cmp	r2, r3
 800509a:	d005      	beq.n	80050a8 <UART_SetConfig+0xa0>
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b8d      	ldr	r3, [pc, #564]	; (80052d8 <UART_SetConfig+0x2d0>)
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d104      	bne.n	80050b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050a8:	f7fe fb8e 	bl	80037c8 <HAL_RCC_GetPCLK2Freq>
 80050ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050b0:	e003      	b.n	80050ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050b2:	f7fe fb75 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 80050b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c4:	f040 810c 	bne.w	80052e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050da:	4622      	mov	r2, r4
 80050dc:	462b      	mov	r3, r5
 80050de:	1891      	adds	r1, r2, r2
 80050e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050e2:	415b      	adcs	r3, r3
 80050e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ea:	4621      	mov	r1, r4
 80050ec:	eb12 0801 	adds.w	r8, r2, r1
 80050f0:	4629      	mov	r1, r5
 80050f2:	eb43 0901 	adc.w	r9, r3, r1
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800510a:	4690      	mov	r8, r2
 800510c:	4699      	mov	r9, r3
 800510e:	4623      	mov	r3, r4
 8005110:	eb18 0303 	adds.w	r3, r8, r3
 8005114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005118:	462b      	mov	r3, r5
 800511a:	eb49 0303 	adc.w	r3, r9, r3
 800511e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800512e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005136:	460b      	mov	r3, r1
 8005138:	18db      	adds	r3, r3, r3
 800513a:	653b      	str	r3, [r7, #80]	; 0x50
 800513c:	4613      	mov	r3, r2
 800513e:	eb42 0303 	adc.w	r3, r2, r3
 8005142:	657b      	str	r3, [r7, #84]	; 0x54
 8005144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800514c:	f7fb fc86 	bl	8000a5c <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4b61      	ldr	r3, [pc, #388]	; (80052dc <UART_SetConfig+0x2d4>)
 8005156:	fba3 2302 	umull	r2, r3, r3, r2
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	011c      	lsls	r4, r3, #4
 800515e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005168:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800516c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005170:	4642      	mov	r2, r8
 8005172:	464b      	mov	r3, r9
 8005174:	1891      	adds	r1, r2, r2
 8005176:	64b9      	str	r1, [r7, #72]	; 0x48
 8005178:	415b      	adcs	r3, r3
 800517a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800517c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005180:	4641      	mov	r1, r8
 8005182:	eb12 0a01 	adds.w	sl, r2, r1
 8005186:	4649      	mov	r1, r9
 8005188:	eb43 0b01 	adc.w	fp, r3, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800519c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a0:	4692      	mov	sl, r2
 80051a2:	469b      	mov	fp, r3
 80051a4:	4643      	mov	r3, r8
 80051a6:	eb1a 0303 	adds.w	r3, sl, r3
 80051aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ae:	464b      	mov	r3, r9
 80051b0:	eb4b 0303 	adc.w	r3, fp, r3
 80051b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051cc:	460b      	mov	r3, r1
 80051ce:	18db      	adds	r3, r3, r3
 80051d0:	643b      	str	r3, [r7, #64]	; 0x40
 80051d2:	4613      	mov	r3, r2
 80051d4:	eb42 0303 	adc.w	r3, r2, r3
 80051d8:	647b      	str	r3, [r7, #68]	; 0x44
 80051da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051e2:	f7fb fc3b 	bl	8000a5c <__aeabi_uldivmod>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <UART_SetConfig+0x2d4>)
 80051ee:	fba3 2301 	umull	r2, r3, r3, r1
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	2264      	movs	r2, #100	; 0x64
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	1acb      	subs	r3, r1, r3
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005202:	4b36      	ldr	r3, [pc, #216]	; (80052dc <UART_SetConfig+0x2d4>)
 8005204:	fba3 2302 	umull	r2, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005210:	441c      	add	r4, r3
 8005212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005216:	2200      	movs	r2, #0
 8005218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800521c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005224:	4642      	mov	r2, r8
 8005226:	464b      	mov	r3, r9
 8005228:	1891      	adds	r1, r2, r2
 800522a:	63b9      	str	r1, [r7, #56]	; 0x38
 800522c:	415b      	adcs	r3, r3
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005234:	4641      	mov	r1, r8
 8005236:	1851      	adds	r1, r2, r1
 8005238:	6339      	str	r1, [r7, #48]	; 0x30
 800523a:	4649      	mov	r1, r9
 800523c:	414b      	adcs	r3, r1
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800524c:	4659      	mov	r1, fp
 800524e:	00cb      	lsls	r3, r1, #3
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005256:	4651      	mov	r1, sl
 8005258:	00ca      	lsls	r2, r1, #3
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	4603      	mov	r3, r0
 8005260:	4642      	mov	r2, r8
 8005262:	189b      	adds	r3, r3, r2
 8005264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005268:	464b      	mov	r3, r9
 800526a:	460a      	mov	r2, r1
 800526c:	eb42 0303 	adc.w	r3, r2, r3
 8005270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005280:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005288:	460b      	mov	r3, r1
 800528a:	18db      	adds	r3, r3, r3
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
 800528e:	4613      	mov	r3, r2
 8005290:	eb42 0303 	adc.w	r3, r2, r3
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800529a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800529e:	f7fb fbdd 	bl	8000a5c <__aeabi_uldivmod>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <UART_SetConfig+0x2d4>)
 80052a8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	2164      	movs	r1, #100	; 0x64
 80052b0:	fb01 f303 	mul.w	r3, r1, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	3332      	adds	r3, #50	; 0x32
 80052ba:	4a08      	ldr	r2, [pc, #32]	; (80052dc <UART_SetConfig+0x2d4>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	095b      	lsrs	r3, r3, #5
 80052c2:	f003 0207 	and.w	r2, r3, #7
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4422      	add	r2, r4
 80052ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052d0:	e105      	b.n	80054de <UART_SetConfig+0x4d6>
 80052d2:	bf00      	nop
 80052d4:	40011000 	.word	0x40011000
 80052d8:	40011400 	.word	0x40011400
 80052dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052f2:	4642      	mov	r2, r8
 80052f4:	464b      	mov	r3, r9
 80052f6:	1891      	adds	r1, r2, r2
 80052f8:	6239      	str	r1, [r7, #32]
 80052fa:	415b      	adcs	r3, r3
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005302:	4641      	mov	r1, r8
 8005304:	1854      	adds	r4, r2, r1
 8005306:	4649      	mov	r1, r9
 8005308:	eb43 0501 	adc.w	r5, r3, r1
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	00eb      	lsls	r3, r5, #3
 8005316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800531a:	00e2      	lsls	r2, r4, #3
 800531c:	4614      	mov	r4, r2
 800531e:	461d      	mov	r5, r3
 8005320:	4643      	mov	r3, r8
 8005322:	18e3      	adds	r3, r4, r3
 8005324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005328:	464b      	mov	r3, r9
 800532a:	eb45 0303 	adc.w	r3, r5, r3
 800532e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800533e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800534e:	4629      	mov	r1, r5
 8005350:	008b      	lsls	r3, r1, #2
 8005352:	4621      	mov	r1, r4
 8005354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005358:	4621      	mov	r1, r4
 800535a:	008a      	lsls	r2, r1, #2
 800535c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005360:	f7fb fb7c 	bl	8000a5c <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4b60      	ldr	r3, [pc, #384]	; (80054ec <UART_SetConfig+0x4e4>)
 800536a:	fba3 2302 	umull	r2, r3, r3, r2
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	011c      	lsls	r4, r3, #4
 8005372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005376:	2200      	movs	r2, #0
 8005378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800537c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	1891      	adds	r1, r2, r2
 800538a:	61b9      	str	r1, [r7, #24]
 800538c:	415b      	adcs	r3, r3
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005394:	4641      	mov	r1, r8
 8005396:	1851      	adds	r1, r2, r1
 8005398:	6139      	str	r1, [r7, #16]
 800539a:	4649      	mov	r1, r9
 800539c:	414b      	adcs	r3, r1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ac:	4659      	mov	r1, fp
 80053ae:	00cb      	lsls	r3, r1, #3
 80053b0:	4651      	mov	r1, sl
 80053b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b6:	4651      	mov	r1, sl
 80053b8:	00ca      	lsls	r2, r1, #3
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	4603      	mov	r3, r0
 80053c0:	4642      	mov	r2, r8
 80053c2:	189b      	adds	r3, r3, r2
 80053c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053c8:	464b      	mov	r3, r9
 80053ca:	460a      	mov	r2, r1
 80053cc:	eb42 0303 	adc.w	r3, r2, r3
 80053d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80053de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053ec:	4649      	mov	r1, r9
 80053ee:	008b      	lsls	r3, r1, #2
 80053f0:	4641      	mov	r1, r8
 80053f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053f6:	4641      	mov	r1, r8
 80053f8:	008a      	lsls	r2, r1, #2
 80053fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053fe:	f7fb fb2d 	bl	8000a5c <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4b39      	ldr	r3, [pc, #228]	; (80054ec <UART_SetConfig+0x4e4>)
 8005408:	fba3 1302 	umull	r1, r3, r3, r2
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	2164      	movs	r1, #100	; 0x64
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	3332      	adds	r3, #50	; 0x32
 800541a:	4a34      	ldr	r2, [pc, #208]	; (80054ec <UART_SetConfig+0x4e4>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005426:	441c      	add	r4, r3
 8005428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542c:	2200      	movs	r2, #0
 800542e:	673b      	str	r3, [r7, #112]	; 0x70
 8005430:	677a      	str	r2, [r7, #116]	; 0x74
 8005432:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005436:	4642      	mov	r2, r8
 8005438:	464b      	mov	r3, r9
 800543a:	1891      	adds	r1, r2, r2
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	415b      	adcs	r3, r3
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005446:	4641      	mov	r1, r8
 8005448:	1851      	adds	r1, r2, r1
 800544a:	6039      	str	r1, [r7, #0]
 800544c:	4649      	mov	r1, r9
 800544e:	414b      	adcs	r3, r1
 8005450:	607b      	str	r3, [r7, #4]
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800545e:	4659      	mov	r1, fp
 8005460:	00cb      	lsls	r3, r1, #3
 8005462:	4651      	mov	r1, sl
 8005464:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005468:	4651      	mov	r1, sl
 800546a:	00ca      	lsls	r2, r1, #3
 800546c:	4610      	mov	r0, r2
 800546e:	4619      	mov	r1, r3
 8005470:	4603      	mov	r3, r0
 8005472:	4642      	mov	r2, r8
 8005474:	189b      	adds	r3, r3, r2
 8005476:	66bb      	str	r3, [r7, #104]	; 0x68
 8005478:	464b      	mov	r3, r9
 800547a:	460a      	mov	r2, r1
 800547c:	eb42 0303 	adc.w	r3, r2, r3
 8005480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	663b      	str	r3, [r7, #96]	; 0x60
 800548c:	667a      	str	r2, [r7, #100]	; 0x64
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800549a:	4649      	mov	r1, r9
 800549c:	008b      	lsls	r3, r1, #2
 800549e:	4641      	mov	r1, r8
 80054a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a4:	4641      	mov	r1, r8
 80054a6:	008a      	lsls	r2, r1, #2
 80054a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054ac:	f7fb fad6 	bl	8000a5c <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4b0d      	ldr	r3, [pc, #52]	; (80054ec <UART_SetConfig+0x4e4>)
 80054b6:	fba3 1302 	umull	r1, r3, r3, r2
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	2164      	movs	r1, #100	; 0x64
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	3332      	adds	r3, #50	; 0x32
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <UART_SetConfig+0x4e4>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	f003 020f 	and.w	r2, r3, #15
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4422      	add	r2, r4
 80054dc:	609a      	str	r2, [r3, #8]
}
 80054de:	bf00      	nop
 80054e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054e4:	46bd      	mov	sp, r7
 80054e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ea:	bf00      	nop
 80054ec:	51eb851f 	.word	0x51eb851f

080054f0 <__errno>:
 80054f0:	4b01      	ldr	r3, [pc, #4]	; (80054f8 <__errno+0x8>)
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	2000000c 	.word	0x2000000c

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4d0d      	ldr	r5, [pc, #52]	; (8005534 <__libc_init_array+0x38>)
 8005500:	4c0d      	ldr	r4, [pc, #52]	; (8005538 <__libc_init_array+0x3c>)
 8005502:	1b64      	subs	r4, r4, r5
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	2600      	movs	r6, #0
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	4d0b      	ldr	r5, [pc, #44]	; (800553c <__libc_init_array+0x40>)
 800550e:	4c0c      	ldr	r4, [pc, #48]	; (8005540 <__libc_init_array+0x44>)
 8005510:	f000 fc8e 	bl	8005e30 <_init>
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	2600      	movs	r6, #0
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	08005ed8 	.word	0x08005ed8
 8005538:	08005ed8 	.word	0x08005ed8
 800553c:	08005ed8 	.word	0x08005ed8
 8005540:	08005edc 	.word	0x08005edc

08005544 <memset>:
 8005544:	4402      	add	r2, r0
 8005546:	4603      	mov	r3, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <siprintf>:
 8005554:	b40e      	push	{r1, r2, r3}
 8005556:	b500      	push	{lr}
 8005558:	b09c      	sub	sp, #112	; 0x70
 800555a:	ab1d      	add	r3, sp, #116	; 0x74
 800555c:	9002      	str	r0, [sp, #8]
 800555e:	9006      	str	r0, [sp, #24]
 8005560:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005564:	4809      	ldr	r0, [pc, #36]	; (800558c <siprintf+0x38>)
 8005566:	9107      	str	r1, [sp, #28]
 8005568:	9104      	str	r1, [sp, #16]
 800556a:	4909      	ldr	r1, [pc, #36]	; (8005590 <siprintf+0x3c>)
 800556c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005570:	9105      	str	r1, [sp, #20]
 8005572:	6800      	ldr	r0, [r0, #0]
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	a902      	add	r1, sp, #8
 8005578:	f000 f868 	bl	800564c <_svfiprintf_r>
 800557c:	9b02      	ldr	r3, [sp, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	b01c      	add	sp, #112	; 0x70
 8005584:	f85d eb04 	ldr.w	lr, [sp], #4
 8005588:	b003      	add	sp, #12
 800558a:	4770      	bx	lr
 800558c:	2000000c 	.word	0x2000000c
 8005590:	ffff0208 	.word	0xffff0208

08005594 <__ssputs_r>:
 8005594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005598:	688e      	ldr	r6, [r1, #8]
 800559a:	429e      	cmp	r6, r3
 800559c:	4682      	mov	sl, r0
 800559e:	460c      	mov	r4, r1
 80055a0:	4690      	mov	r8, r2
 80055a2:	461f      	mov	r7, r3
 80055a4:	d838      	bhi.n	8005618 <__ssputs_r+0x84>
 80055a6:	898a      	ldrh	r2, [r1, #12]
 80055a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055ac:	d032      	beq.n	8005614 <__ssputs_r+0x80>
 80055ae:	6825      	ldr	r5, [r4, #0]
 80055b0:	6909      	ldr	r1, [r1, #16]
 80055b2:	eba5 0901 	sub.w	r9, r5, r1
 80055b6:	6965      	ldr	r5, [r4, #20]
 80055b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055c0:	3301      	adds	r3, #1
 80055c2:	444b      	add	r3, r9
 80055c4:	106d      	asrs	r5, r5, #1
 80055c6:	429d      	cmp	r5, r3
 80055c8:	bf38      	it	cc
 80055ca:	461d      	movcc	r5, r3
 80055cc:	0553      	lsls	r3, r2, #21
 80055ce:	d531      	bpl.n	8005634 <__ssputs_r+0xa0>
 80055d0:	4629      	mov	r1, r5
 80055d2:	f000 fb63 	bl	8005c9c <_malloc_r>
 80055d6:	4606      	mov	r6, r0
 80055d8:	b950      	cbnz	r0, 80055f0 <__ssputs_r+0x5c>
 80055da:	230c      	movs	r3, #12
 80055dc:	f8ca 3000 	str.w	r3, [sl]
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e6:	81a3      	strh	r3, [r4, #12]
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f0:	6921      	ldr	r1, [r4, #16]
 80055f2:	464a      	mov	r2, r9
 80055f4:	f000 fabe 	bl	8005b74 <memcpy>
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005602:	81a3      	strh	r3, [r4, #12]
 8005604:	6126      	str	r6, [r4, #16]
 8005606:	6165      	str	r5, [r4, #20]
 8005608:	444e      	add	r6, r9
 800560a:	eba5 0509 	sub.w	r5, r5, r9
 800560e:	6026      	str	r6, [r4, #0]
 8005610:	60a5      	str	r5, [r4, #8]
 8005612:	463e      	mov	r6, r7
 8005614:	42be      	cmp	r6, r7
 8005616:	d900      	bls.n	800561a <__ssputs_r+0x86>
 8005618:	463e      	mov	r6, r7
 800561a:	6820      	ldr	r0, [r4, #0]
 800561c:	4632      	mov	r2, r6
 800561e:	4641      	mov	r1, r8
 8005620:	f000 fab6 	bl	8005b90 <memmove>
 8005624:	68a3      	ldr	r3, [r4, #8]
 8005626:	1b9b      	subs	r3, r3, r6
 8005628:	60a3      	str	r3, [r4, #8]
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	4433      	add	r3, r6
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	2000      	movs	r0, #0
 8005632:	e7db      	b.n	80055ec <__ssputs_r+0x58>
 8005634:	462a      	mov	r2, r5
 8005636:	f000 fba5 	bl	8005d84 <_realloc_r>
 800563a:	4606      	mov	r6, r0
 800563c:	2800      	cmp	r0, #0
 800563e:	d1e1      	bne.n	8005604 <__ssputs_r+0x70>
 8005640:	6921      	ldr	r1, [r4, #16]
 8005642:	4650      	mov	r0, sl
 8005644:	f000 fabe 	bl	8005bc4 <_free_r>
 8005648:	e7c7      	b.n	80055da <__ssputs_r+0x46>
	...

0800564c <_svfiprintf_r>:
 800564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005650:	4698      	mov	r8, r3
 8005652:	898b      	ldrh	r3, [r1, #12]
 8005654:	061b      	lsls	r3, r3, #24
 8005656:	b09d      	sub	sp, #116	; 0x74
 8005658:	4607      	mov	r7, r0
 800565a:	460d      	mov	r5, r1
 800565c:	4614      	mov	r4, r2
 800565e:	d50e      	bpl.n	800567e <_svfiprintf_r+0x32>
 8005660:	690b      	ldr	r3, [r1, #16]
 8005662:	b963      	cbnz	r3, 800567e <_svfiprintf_r+0x32>
 8005664:	2140      	movs	r1, #64	; 0x40
 8005666:	f000 fb19 	bl	8005c9c <_malloc_r>
 800566a:	6028      	str	r0, [r5, #0]
 800566c:	6128      	str	r0, [r5, #16]
 800566e:	b920      	cbnz	r0, 800567a <_svfiprintf_r+0x2e>
 8005670:	230c      	movs	r3, #12
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005678:	e0d1      	b.n	800581e <_svfiprintf_r+0x1d2>
 800567a:	2340      	movs	r3, #64	; 0x40
 800567c:	616b      	str	r3, [r5, #20]
 800567e:	2300      	movs	r3, #0
 8005680:	9309      	str	r3, [sp, #36]	; 0x24
 8005682:	2320      	movs	r3, #32
 8005684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005688:	f8cd 800c 	str.w	r8, [sp, #12]
 800568c:	2330      	movs	r3, #48	; 0x30
 800568e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005838 <_svfiprintf_r+0x1ec>
 8005692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005696:	f04f 0901 	mov.w	r9, #1
 800569a:	4623      	mov	r3, r4
 800569c:	469a      	mov	sl, r3
 800569e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056a2:	b10a      	cbz	r2, 80056a8 <_svfiprintf_r+0x5c>
 80056a4:	2a25      	cmp	r2, #37	; 0x25
 80056a6:	d1f9      	bne.n	800569c <_svfiprintf_r+0x50>
 80056a8:	ebba 0b04 	subs.w	fp, sl, r4
 80056ac:	d00b      	beq.n	80056c6 <_svfiprintf_r+0x7a>
 80056ae:	465b      	mov	r3, fp
 80056b0:	4622      	mov	r2, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	4638      	mov	r0, r7
 80056b6:	f7ff ff6d 	bl	8005594 <__ssputs_r>
 80056ba:	3001      	adds	r0, #1
 80056bc:	f000 80aa 	beq.w	8005814 <_svfiprintf_r+0x1c8>
 80056c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056c2:	445a      	add	r2, fp
 80056c4:	9209      	str	r2, [sp, #36]	; 0x24
 80056c6:	f89a 3000 	ldrb.w	r3, [sl]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 80a2 	beq.w	8005814 <_svfiprintf_r+0x1c8>
 80056d0:	2300      	movs	r3, #0
 80056d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056da:	f10a 0a01 	add.w	sl, sl, #1
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	9307      	str	r3, [sp, #28]
 80056e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056e6:	931a      	str	r3, [sp, #104]	; 0x68
 80056e8:	4654      	mov	r4, sl
 80056ea:	2205      	movs	r2, #5
 80056ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f0:	4851      	ldr	r0, [pc, #324]	; (8005838 <_svfiprintf_r+0x1ec>)
 80056f2:	f7fa fd75 	bl	80001e0 <memchr>
 80056f6:	9a04      	ldr	r2, [sp, #16]
 80056f8:	b9d8      	cbnz	r0, 8005732 <_svfiprintf_r+0xe6>
 80056fa:	06d0      	lsls	r0, r2, #27
 80056fc:	bf44      	itt	mi
 80056fe:	2320      	movmi	r3, #32
 8005700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005704:	0711      	lsls	r1, r2, #28
 8005706:	bf44      	itt	mi
 8005708:	232b      	movmi	r3, #43	; 0x2b
 800570a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800570e:	f89a 3000 	ldrb.w	r3, [sl]
 8005712:	2b2a      	cmp	r3, #42	; 0x2a
 8005714:	d015      	beq.n	8005742 <_svfiprintf_r+0xf6>
 8005716:	9a07      	ldr	r2, [sp, #28]
 8005718:	4654      	mov	r4, sl
 800571a:	2000      	movs	r0, #0
 800571c:	f04f 0c0a 	mov.w	ip, #10
 8005720:	4621      	mov	r1, r4
 8005722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005726:	3b30      	subs	r3, #48	; 0x30
 8005728:	2b09      	cmp	r3, #9
 800572a:	d94e      	bls.n	80057ca <_svfiprintf_r+0x17e>
 800572c:	b1b0      	cbz	r0, 800575c <_svfiprintf_r+0x110>
 800572e:	9207      	str	r2, [sp, #28]
 8005730:	e014      	b.n	800575c <_svfiprintf_r+0x110>
 8005732:	eba0 0308 	sub.w	r3, r0, r8
 8005736:	fa09 f303 	lsl.w	r3, r9, r3
 800573a:	4313      	orrs	r3, r2
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	46a2      	mov	sl, r4
 8005740:	e7d2      	b.n	80056e8 <_svfiprintf_r+0x9c>
 8005742:	9b03      	ldr	r3, [sp, #12]
 8005744:	1d19      	adds	r1, r3, #4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	9103      	str	r1, [sp, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	bfbb      	ittet	lt
 800574e:	425b      	neglt	r3, r3
 8005750:	f042 0202 	orrlt.w	r2, r2, #2
 8005754:	9307      	strge	r3, [sp, #28]
 8005756:	9307      	strlt	r3, [sp, #28]
 8005758:	bfb8      	it	lt
 800575a:	9204      	strlt	r2, [sp, #16]
 800575c:	7823      	ldrb	r3, [r4, #0]
 800575e:	2b2e      	cmp	r3, #46	; 0x2e
 8005760:	d10c      	bne.n	800577c <_svfiprintf_r+0x130>
 8005762:	7863      	ldrb	r3, [r4, #1]
 8005764:	2b2a      	cmp	r3, #42	; 0x2a
 8005766:	d135      	bne.n	80057d4 <_svfiprintf_r+0x188>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	1d1a      	adds	r2, r3, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	9203      	str	r2, [sp, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	bfb8      	it	lt
 8005774:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005778:	3402      	adds	r4, #2
 800577a:	9305      	str	r3, [sp, #20]
 800577c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005848 <_svfiprintf_r+0x1fc>
 8005780:	7821      	ldrb	r1, [r4, #0]
 8005782:	2203      	movs	r2, #3
 8005784:	4650      	mov	r0, sl
 8005786:	f7fa fd2b 	bl	80001e0 <memchr>
 800578a:	b140      	cbz	r0, 800579e <_svfiprintf_r+0x152>
 800578c:	2340      	movs	r3, #64	; 0x40
 800578e:	eba0 000a 	sub.w	r0, r0, sl
 8005792:	fa03 f000 	lsl.w	r0, r3, r0
 8005796:	9b04      	ldr	r3, [sp, #16]
 8005798:	4303      	orrs	r3, r0
 800579a:	3401      	adds	r4, #1
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a2:	4826      	ldr	r0, [pc, #152]	; (800583c <_svfiprintf_r+0x1f0>)
 80057a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057a8:	2206      	movs	r2, #6
 80057aa:	f7fa fd19 	bl	80001e0 <memchr>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d038      	beq.n	8005824 <_svfiprintf_r+0x1d8>
 80057b2:	4b23      	ldr	r3, [pc, #140]	; (8005840 <_svfiprintf_r+0x1f4>)
 80057b4:	bb1b      	cbnz	r3, 80057fe <_svfiprintf_r+0x1b2>
 80057b6:	9b03      	ldr	r3, [sp, #12]
 80057b8:	3307      	adds	r3, #7
 80057ba:	f023 0307 	bic.w	r3, r3, #7
 80057be:	3308      	adds	r3, #8
 80057c0:	9303      	str	r3, [sp, #12]
 80057c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c4:	4433      	add	r3, r6
 80057c6:	9309      	str	r3, [sp, #36]	; 0x24
 80057c8:	e767      	b.n	800569a <_svfiprintf_r+0x4e>
 80057ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ce:	460c      	mov	r4, r1
 80057d0:	2001      	movs	r0, #1
 80057d2:	e7a5      	b.n	8005720 <_svfiprintf_r+0xd4>
 80057d4:	2300      	movs	r3, #0
 80057d6:	3401      	adds	r4, #1
 80057d8:	9305      	str	r3, [sp, #20]
 80057da:	4619      	mov	r1, r3
 80057dc:	f04f 0c0a 	mov.w	ip, #10
 80057e0:	4620      	mov	r0, r4
 80057e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e6:	3a30      	subs	r2, #48	; 0x30
 80057e8:	2a09      	cmp	r2, #9
 80057ea:	d903      	bls.n	80057f4 <_svfiprintf_r+0x1a8>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0c5      	beq.n	800577c <_svfiprintf_r+0x130>
 80057f0:	9105      	str	r1, [sp, #20]
 80057f2:	e7c3      	b.n	800577c <_svfiprintf_r+0x130>
 80057f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80057f8:	4604      	mov	r4, r0
 80057fa:	2301      	movs	r3, #1
 80057fc:	e7f0      	b.n	80057e0 <_svfiprintf_r+0x194>
 80057fe:	ab03      	add	r3, sp, #12
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	462a      	mov	r2, r5
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <_svfiprintf_r+0x1f8>)
 8005806:	a904      	add	r1, sp, #16
 8005808:	4638      	mov	r0, r7
 800580a:	f3af 8000 	nop.w
 800580e:	1c42      	adds	r2, r0, #1
 8005810:	4606      	mov	r6, r0
 8005812:	d1d6      	bne.n	80057c2 <_svfiprintf_r+0x176>
 8005814:	89ab      	ldrh	r3, [r5, #12]
 8005816:	065b      	lsls	r3, r3, #25
 8005818:	f53f af2c 	bmi.w	8005674 <_svfiprintf_r+0x28>
 800581c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800581e:	b01d      	add	sp, #116	; 0x74
 8005820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005824:	ab03      	add	r3, sp, #12
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	462a      	mov	r2, r5
 800582a:	4b06      	ldr	r3, [pc, #24]	; (8005844 <_svfiprintf_r+0x1f8>)
 800582c:	a904      	add	r1, sp, #16
 800582e:	4638      	mov	r0, r7
 8005830:	f000 f87a 	bl	8005928 <_printf_i>
 8005834:	e7eb      	b.n	800580e <_svfiprintf_r+0x1c2>
 8005836:	bf00      	nop
 8005838:	08005e9c 	.word	0x08005e9c
 800583c:	08005ea6 	.word	0x08005ea6
 8005840:	00000000 	.word	0x00000000
 8005844:	08005595 	.word	0x08005595
 8005848:	08005ea2 	.word	0x08005ea2

0800584c <_printf_common>:
 800584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005850:	4616      	mov	r6, r2
 8005852:	4699      	mov	r9, r3
 8005854:	688a      	ldr	r2, [r1, #8]
 8005856:	690b      	ldr	r3, [r1, #16]
 8005858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800585c:	4293      	cmp	r3, r2
 800585e:	bfb8      	it	lt
 8005860:	4613      	movlt	r3, r2
 8005862:	6033      	str	r3, [r6, #0]
 8005864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005868:	4607      	mov	r7, r0
 800586a:	460c      	mov	r4, r1
 800586c:	b10a      	cbz	r2, 8005872 <_printf_common+0x26>
 800586e:	3301      	adds	r3, #1
 8005870:	6033      	str	r3, [r6, #0]
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	0699      	lsls	r1, r3, #26
 8005876:	bf42      	ittt	mi
 8005878:	6833      	ldrmi	r3, [r6, #0]
 800587a:	3302      	addmi	r3, #2
 800587c:	6033      	strmi	r3, [r6, #0]
 800587e:	6825      	ldr	r5, [r4, #0]
 8005880:	f015 0506 	ands.w	r5, r5, #6
 8005884:	d106      	bne.n	8005894 <_printf_common+0x48>
 8005886:	f104 0a19 	add.w	sl, r4, #25
 800588a:	68e3      	ldr	r3, [r4, #12]
 800588c:	6832      	ldr	r2, [r6, #0]
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	42ab      	cmp	r3, r5
 8005892:	dc26      	bgt.n	80058e2 <_printf_common+0x96>
 8005894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005898:	1e13      	subs	r3, r2, #0
 800589a:	6822      	ldr	r2, [r4, #0]
 800589c:	bf18      	it	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	0692      	lsls	r2, r2, #26
 80058a2:	d42b      	bmi.n	80058fc <_printf_common+0xb0>
 80058a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058a8:	4649      	mov	r1, r9
 80058aa:	4638      	mov	r0, r7
 80058ac:	47c0      	blx	r8
 80058ae:	3001      	adds	r0, #1
 80058b0:	d01e      	beq.n	80058f0 <_printf_common+0xa4>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	68e5      	ldr	r5, [r4, #12]
 80058b6:	6832      	ldr	r2, [r6, #0]
 80058b8:	f003 0306 	and.w	r3, r3, #6
 80058bc:	2b04      	cmp	r3, #4
 80058be:	bf08      	it	eq
 80058c0:	1aad      	subeq	r5, r5, r2
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	6922      	ldr	r2, [r4, #16]
 80058c6:	bf0c      	ite	eq
 80058c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058cc:	2500      	movne	r5, #0
 80058ce:	4293      	cmp	r3, r2
 80058d0:	bfc4      	itt	gt
 80058d2:	1a9b      	subgt	r3, r3, r2
 80058d4:	18ed      	addgt	r5, r5, r3
 80058d6:	2600      	movs	r6, #0
 80058d8:	341a      	adds	r4, #26
 80058da:	42b5      	cmp	r5, r6
 80058dc:	d11a      	bne.n	8005914 <_printf_common+0xc8>
 80058de:	2000      	movs	r0, #0
 80058e0:	e008      	b.n	80058f4 <_printf_common+0xa8>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4652      	mov	r2, sl
 80058e6:	4649      	mov	r1, r9
 80058e8:	4638      	mov	r0, r7
 80058ea:	47c0      	blx	r8
 80058ec:	3001      	adds	r0, #1
 80058ee:	d103      	bne.n	80058f8 <_printf_common+0xac>
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	3501      	adds	r5, #1
 80058fa:	e7c6      	b.n	800588a <_printf_common+0x3e>
 80058fc:	18e1      	adds	r1, r4, r3
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	2030      	movs	r0, #48	; 0x30
 8005902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005906:	4422      	add	r2, r4
 8005908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800590c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005910:	3302      	adds	r3, #2
 8005912:	e7c7      	b.n	80058a4 <_printf_common+0x58>
 8005914:	2301      	movs	r3, #1
 8005916:	4622      	mov	r2, r4
 8005918:	4649      	mov	r1, r9
 800591a:	4638      	mov	r0, r7
 800591c:	47c0      	blx	r8
 800591e:	3001      	adds	r0, #1
 8005920:	d0e6      	beq.n	80058f0 <_printf_common+0xa4>
 8005922:	3601      	adds	r6, #1
 8005924:	e7d9      	b.n	80058da <_printf_common+0x8e>
	...

08005928 <_printf_i>:
 8005928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	7e0f      	ldrb	r7, [r1, #24]
 800592e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005930:	2f78      	cmp	r7, #120	; 0x78
 8005932:	4691      	mov	r9, r2
 8005934:	4680      	mov	r8, r0
 8005936:	460c      	mov	r4, r1
 8005938:	469a      	mov	sl, r3
 800593a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800593e:	d807      	bhi.n	8005950 <_printf_i+0x28>
 8005940:	2f62      	cmp	r7, #98	; 0x62
 8005942:	d80a      	bhi.n	800595a <_printf_i+0x32>
 8005944:	2f00      	cmp	r7, #0
 8005946:	f000 80d8 	beq.w	8005afa <_printf_i+0x1d2>
 800594a:	2f58      	cmp	r7, #88	; 0x58
 800594c:	f000 80a3 	beq.w	8005a96 <_printf_i+0x16e>
 8005950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005958:	e03a      	b.n	80059d0 <_printf_i+0xa8>
 800595a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800595e:	2b15      	cmp	r3, #21
 8005960:	d8f6      	bhi.n	8005950 <_printf_i+0x28>
 8005962:	a101      	add	r1, pc, #4	; (adr r1, 8005968 <_printf_i+0x40>)
 8005964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005968:	080059c1 	.word	0x080059c1
 800596c:	080059d5 	.word	0x080059d5
 8005970:	08005951 	.word	0x08005951
 8005974:	08005951 	.word	0x08005951
 8005978:	08005951 	.word	0x08005951
 800597c:	08005951 	.word	0x08005951
 8005980:	080059d5 	.word	0x080059d5
 8005984:	08005951 	.word	0x08005951
 8005988:	08005951 	.word	0x08005951
 800598c:	08005951 	.word	0x08005951
 8005990:	08005951 	.word	0x08005951
 8005994:	08005ae1 	.word	0x08005ae1
 8005998:	08005a05 	.word	0x08005a05
 800599c:	08005ac3 	.word	0x08005ac3
 80059a0:	08005951 	.word	0x08005951
 80059a4:	08005951 	.word	0x08005951
 80059a8:	08005b03 	.word	0x08005b03
 80059ac:	08005951 	.word	0x08005951
 80059b0:	08005a05 	.word	0x08005a05
 80059b4:	08005951 	.word	0x08005951
 80059b8:	08005951 	.word	0x08005951
 80059bc:	08005acb 	.word	0x08005acb
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	1d1a      	adds	r2, r3, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	602a      	str	r2, [r5, #0]
 80059c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0a3      	b.n	8005b1c <_printf_i+0x1f4>
 80059d4:	6820      	ldr	r0, [r4, #0]
 80059d6:	6829      	ldr	r1, [r5, #0]
 80059d8:	0606      	lsls	r6, r0, #24
 80059da:	f101 0304 	add.w	r3, r1, #4
 80059de:	d50a      	bpl.n	80059f6 <_printf_i+0xce>
 80059e0:	680e      	ldr	r6, [r1, #0]
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	2e00      	cmp	r6, #0
 80059e6:	da03      	bge.n	80059f0 <_printf_i+0xc8>
 80059e8:	232d      	movs	r3, #45	; 0x2d
 80059ea:	4276      	negs	r6, r6
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	485e      	ldr	r0, [pc, #376]	; (8005b6c <_printf_i+0x244>)
 80059f2:	230a      	movs	r3, #10
 80059f4:	e019      	b.n	8005a2a <_printf_i+0x102>
 80059f6:	680e      	ldr	r6, [r1, #0]
 80059f8:	602b      	str	r3, [r5, #0]
 80059fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059fe:	bf18      	it	ne
 8005a00:	b236      	sxthne	r6, r6
 8005a02:	e7ef      	b.n	80059e4 <_printf_i+0xbc>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	6820      	ldr	r0, [r4, #0]
 8005a08:	1d19      	adds	r1, r3, #4
 8005a0a:	6029      	str	r1, [r5, #0]
 8005a0c:	0601      	lsls	r1, r0, #24
 8005a0e:	d501      	bpl.n	8005a14 <_printf_i+0xec>
 8005a10:	681e      	ldr	r6, [r3, #0]
 8005a12:	e002      	b.n	8005a1a <_printf_i+0xf2>
 8005a14:	0646      	lsls	r6, r0, #25
 8005a16:	d5fb      	bpl.n	8005a10 <_printf_i+0xe8>
 8005a18:	881e      	ldrh	r6, [r3, #0]
 8005a1a:	4854      	ldr	r0, [pc, #336]	; (8005b6c <_printf_i+0x244>)
 8005a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a1e:	bf0c      	ite	eq
 8005a20:	2308      	moveq	r3, #8
 8005a22:	230a      	movne	r3, #10
 8005a24:	2100      	movs	r1, #0
 8005a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a2a:	6865      	ldr	r5, [r4, #4]
 8005a2c:	60a5      	str	r5, [r4, #8]
 8005a2e:	2d00      	cmp	r5, #0
 8005a30:	bfa2      	ittt	ge
 8005a32:	6821      	ldrge	r1, [r4, #0]
 8005a34:	f021 0104 	bicge.w	r1, r1, #4
 8005a38:	6021      	strge	r1, [r4, #0]
 8005a3a:	b90e      	cbnz	r6, 8005a40 <_printf_i+0x118>
 8005a3c:	2d00      	cmp	r5, #0
 8005a3e:	d04d      	beq.n	8005adc <_printf_i+0x1b4>
 8005a40:	4615      	mov	r5, r2
 8005a42:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a46:	fb03 6711 	mls	r7, r3, r1, r6
 8005a4a:	5dc7      	ldrb	r7, [r0, r7]
 8005a4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a50:	4637      	mov	r7, r6
 8005a52:	42bb      	cmp	r3, r7
 8005a54:	460e      	mov	r6, r1
 8005a56:	d9f4      	bls.n	8005a42 <_printf_i+0x11a>
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d10b      	bne.n	8005a74 <_printf_i+0x14c>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	07de      	lsls	r6, r3, #31
 8005a60:	d508      	bpl.n	8005a74 <_printf_i+0x14c>
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	6861      	ldr	r1, [r4, #4]
 8005a66:	4299      	cmp	r1, r3
 8005a68:	bfde      	ittt	le
 8005a6a:	2330      	movle	r3, #48	; 0x30
 8005a6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a74:	1b52      	subs	r2, r2, r5
 8005a76:	6122      	str	r2, [r4, #16]
 8005a78:	f8cd a000 	str.w	sl, [sp]
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	aa03      	add	r2, sp, #12
 8005a80:	4621      	mov	r1, r4
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7ff fee2 	bl	800584c <_printf_common>
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d14c      	bne.n	8005b26 <_printf_i+0x1fe>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a90:	b004      	add	sp, #16
 8005a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a96:	4835      	ldr	r0, [pc, #212]	; (8005b6c <_printf_i+0x244>)
 8005a98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a9c:	6829      	ldr	r1, [r5, #0]
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005aa4:	6029      	str	r1, [r5, #0]
 8005aa6:	061d      	lsls	r5, r3, #24
 8005aa8:	d514      	bpl.n	8005ad4 <_printf_i+0x1ac>
 8005aaa:	07df      	lsls	r7, r3, #31
 8005aac:	bf44      	itt	mi
 8005aae:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab2:	6023      	strmi	r3, [r4, #0]
 8005ab4:	b91e      	cbnz	r6, 8005abe <_printf_i+0x196>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	f023 0320 	bic.w	r3, r3, #32
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	2310      	movs	r3, #16
 8005ac0:	e7b0      	b.n	8005a24 <_printf_i+0xfc>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	f043 0320 	orr.w	r3, r3, #32
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	2378      	movs	r3, #120	; 0x78
 8005acc:	4828      	ldr	r0, [pc, #160]	; (8005b70 <_printf_i+0x248>)
 8005ace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ad2:	e7e3      	b.n	8005a9c <_printf_i+0x174>
 8005ad4:	0659      	lsls	r1, r3, #25
 8005ad6:	bf48      	it	mi
 8005ad8:	b2b6      	uxthmi	r6, r6
 8005ada:	e7e6      	b.n	8005aaa <_printf_i+0x182>
 8005adc:	4615      	mov	r5, r2
 8005ade:	e7bb      	b.n	8005a58 <_printf_i+0x130>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	6826      	ldr	r6, [r4, #0]
 8005ae4:	6961      	ldr	r1, [r4, #20]
 8005ae6:	1d18      	adds	r0, r3, #4
 8005ae8:	6028      	str	r0, [r5, #0]
 8005aea:	0635      	lsls	r5, r6, #24
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	d501      	bpl.n	8005af4 <_printf_i+0x1cc>
 8005af0:	6019      	str	r1, [r3, #0]
 8005af2:	e002      	b.n	8005afa <_printf_i+0x1d2>
 8005af4:	0670      	lsls	r0, r6, #25
 8005af6:	d5fb      	bpl.n	8005af0 <_printf_i+0x1c8>
 8005af8:	8019      	strh	r1, [r3, #0]
 8005afa:	2300      	movs	r3, #0
 8005afc:	6123      	str	r3, [r4, #16]
 8005afe:	4615      	mov	r5, r2
 8005b00:	e7ba      	b.n	8005a78 <_printf_i+0x150>
 8005b02:	682b      	ldr	r3, [r5, #0]
 8005b04:	1d1a      	adds	r2, r3, #4
 8005b06:	602a      	str	r2, [r5, #0]
 8005b08:	681d      	ldr	r5, [r3, #0]
 8005b0a:	6862      	ldr	r2, [r4, #4]
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f7fa fb66 	bl	80001e0 <memchr>
 8005b14:	b108      	cbz	r0, 8005b1a <_printf_i+0x1f2>
 8005b16:	1b40      	subs	r0, r0, r5
 8005b18:	6060      	str	r0, [r4, #4]
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	6123      	str	r3, [r4, #16]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b24:	e7a8      	b.n	8005a78 <_printf_i+0x150>
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	462a      	mov	r2, r5
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	47d0      	blx	sl
 8005b30:	3001      	adds	r0, #1
 8005b32:	d0ab      	beq.n	8005a8c <_printf_i+0x164>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	079b      	lsls	r3, r3, #30
 8005b38:	d413      	bmi.n	8005b62 <_printf_i+0x23a>
 8005b3a:	68e0      	ldr	r0, [r4, #12]
 8005b3c:	9b03      	ldr	r3, [sp, #12]
 8005b3e:	4298      	cmp	r0, r3
 8005b40:	bfb8      	it	lt
 8005b42:	4618      	movlt	r0, r3
 8005b44:	e7a4      	b.n	8005a90 <_printf_i+0x168>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	47d0      	blx	sl
 8005b50:	3001      	adds	r0, #1
 8005b52:	d09b      	beq.n	8005a8c <_printf_i+0x164>
 8005b54:	3501      	adds	r5, #1
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	9903      	ldr	r1, [sp, #12]
 8005b5a:	1a5b      	subs	r3, r3, r1
 8005b5c:	42ab      	cmp	r3, r5
 8005b5e:	dcf2      	bgt.n	8005b46 <_printf_i+0x21e>
 8005b60:	e7eb      	b.n	8005b3a <_printf_i+0x212>
 8005b62:	2500      	movs	r5, #0
 8005b64:	f104 0619 	add.w	r6, r4, #25
 8005b68:	e7f5      	b.n	8005b56 <_printf_i+0x22e>
 8005b6a:	bf00      	nop
 8005b6c:	08005ead 	.word	0x08005ead
 8005b70:	08005ebe 	.word	0x08005ebe

08005b74 <memcpy>:
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	4770      	bx	lr
 8005b80:	b510      	push	{r4, lr}
 8005b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	d1f9      	bne.n	8005b82 <memcpy+0xe>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <memmove>:
 8005b90:	4288      	cmp	r0, r1
 8005b92:	b510      	push	{r4, lr}
 8005b94:	eb01 0402 	add.w	r4, r1, r2
 8005b98:	d902      	bls.n	8005ba0 <memmove+0x10>
 8005b9a:	4284      	cmp	r4, r0
 8005b9c:	4623      	mov	r3, r4
 8005b9e:	d807      	bhi.n	8005bb0 <memmove+0x20>
 8005ba0:	1e43      	subs	r3, r0, #1
 8005ba2:	42a1      	cmp	r1, r4
 8005ba4:	d008      	beq.n	8005bb8 <memmove+0x28>
 8005ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bae:	e7f8      	b.n	8005ba2 <memmove+0x12>
 8005bb0:	4402      	add	r2, r0
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	428a      	cmp	r2, r1
 8005bb6:	d100      	bne.n	8005bba <memmove+0x2a>
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bc2:	e7f7      	b.n	8005bb4 <memmove+0x24>

08005bc4 <_free_r>:
 8005bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d044      	beq.n	8005c54 <_free_r+0x90>
 8005bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bce:	9001      	str	r0, [sp, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005bd6:	bfb8      	it	lt
 8005bd8:	18e4      	addlt	r4, r4, r3
 8005bda:	f000 f913 	bl	8005e04 <__malloc_lock>
 8005bde:	4a1e      	ldr	r2, [pc, #120]	; (8005c58 <_free_r+0x94>)
 8005be0:	9801      	ldr	r0, [sp, #4]
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	b933      	cbnz	r3, 8005bf4 <_free_r+0x30>
 8005be6:	6063      	str	r3, [r4, #4]
 8005be8:	6014      	str	r4, [r2, #0]
 8005bea:	b003      	add	sp, #12
 8005bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bf0:	f000 b90e 	b.w	8005e10 <__malloc_unlock>
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	d908      	bls.n	8005c0a <_free_r+0x46>
 8005bf8:	6825      	ldr	r5, [r4, #0]
 8005bfa:	1961      	adds	r1, r4, r5
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	bf01      	itttt	eq
 8005c00:	6819      	ldreq	r1, [r3, #0]
 8005c02:	685b      	ldreq	r3, [r3, #4]
 8005c04:	1949      	addeq	r1, r1, r5
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	e7ed      	b.n	8005be6 <_free_r+0x22>
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b10b      	cbz	r3, 8005c14 <_free_r+0x50>
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d9fa      	bls.n	8005c0a <_free_r+0x46>
 8005c14:	6811      	ldr	r1, [r2, #0]
 8005c16:	1855      	adds	r5, r2, r1
 8005c18:	42a5      	cmp	r5, r4
 8005c1a:	d10b      	bne.n	8005c34 <_free_r+0x70>
 8005c1c:	6824      	ldr	r4, [r4, #0]
 8005c1e:	4421      	add	r1, r4
 8005c20:	1854      	adds	r4, r2, r1
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	6011      	str	r1, [r2, #0]
 8005c26:	d1e0      	bne.n	8005bea <_free_r+0x26>
 8005c28:	681c      	ldr	r4, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	6053      	str	r3, [r2, #4]
 8005c2e:	4421      	add	r1, r4
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	e7da      	b.n	8005bea <_free_r+0x26>
 8005c34:	d902      	bls.n	8005c3c <_free_r+0x78>
 8005c36:	230c      	movs	r3, #12
 8005c38:	6003      	str	r3, [r0, #0]
 8005c3a:	e7d6      	b.n	8005bea <_free_r+0x26>
 8005c3c:	6825      	ldr	r5, [r4, #0]
 8005c3e:	1961      	adds	r1, r4, r5
 8005c40:	428b      	cmp	r3, r1
 8005c42:	bf04      	itt	eq
 8005c44:	6819      	ldreq	r1, [r3, #0]
 8005c46:	685b      	ldreq	r3, [r3, #4]
 8005c48:	6063      	str	r3, [r4, #4]
 8005c4a:	bf04      	itt	eq
 8005c4c:	1949      	addeq	r1, r1, r5
 8005c4e:	6021      	streq	r1, [r4, #0]
 8005c50:	6054      	str	r4, [r2, #4]
 8005c52:	e7ca      	b.n	8005bea <_free_r+0x26>
 8005c54:	b003      	add	sp, #12
 8005c56:	bd30      	pop	{r4, r5, pc}
 8005c58:	200002a0 	.word	0x200002a0

08005c5c <sbrk_aligned>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4e0e      	ldr	r6, [pc, #56]	; (8005c98 <sbrk_aligned+0x3c>)
 8005c60:	460c      	mov	r4, r1
 8005c62:	6831      	ldr	r1, [r6, #0]
 8005c64:	4605      	mov	r5, r0
 8005c66:	b911      	cbnz	r1, 8005c6e <sbrk_aligned+0x12>
 8005c68:	f000 f8bc 	bl	8005de4 <_sbrk_r>
 8005c6c:	6030      	str	r0, [r6, #0]
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f8b7 	bl	8005de4 <_sbrk_r>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d00a      	beq.n	8005c90 <sbrk_aligned+0x34>
 8005c7a:	1cc4      	adds	r4, r0, #3
 8005c7c:	f024 0403 	bic.w	r4, r4, #3
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d007      	beq.n	8005c94 <sbrk_aligned+0x38>
 8005c84:	1a21      	subs	r1, r4, r0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 f8ac 	bl	8005de4 <_sbrk_r>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d101      	bne.n	8005c94 <sbrk_aligned+0x38>
 8005c90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c94:	4620      	mov	r0, r4
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	200002a4 	.word	0x200002a4

08005c9c <_malloc_r>:
 8005c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca0:	1ccd      	adds	r5, r1, #3
 8005ca2:	f025 0503 	bic.w	r5, r5, #3
 8005ca6:	3508      	adds	r5, #8
 8005ca8:	2d0c      	cmp	r5, #12
 8005caa:	bf38      	it	cc
 8005cac:	250c      	movcc	r5, #12
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	db01      	blt.n	8005cb8 <_malloc_r+0x1c>
 8005cb4:	42a9      	cmp	r1, r5
 8005cb6:	d905      	bls.n	8005cc4 <_malloc_r+0x28>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc4:	4e2e      	ldr	r6, [pc, #184]	; (8005d80 <_malloc_r+0xe4>)
 8005cc6:	f000 f89d 	bl	8005e04 <__malloc_lock>
 8005cca:	6833      	ldr	r3, [r6, #0]
 8005ccc:	461c      	mov	r4, r3
 8005cce:	bb34      	cbnz	r4, 8005d1e <_malloc_r+0x82>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f7ff ffc2 	bl	8005c5c <sbrk_aligned>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	4604      	mov	r4, r0
 8005cdc:	d14d      	bne.n	8005d7a <_malloc_r+0xde>
 8005cde:	6834      	ldr	r4, [r6, #0]
 8005ce0:	4626      	mov	r6, r4
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	d140      	bne.n	8005d68 <_malloc_r+0xcc>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4638      	mov	r0, r7
 8005cec:	eb04 0803 	add.w	r8, r4, r3
 8005cf0:	f000 f878 	bl	8005de4 <_sbrk_r>
 8005cf4:	4580      	cmp	r8, r0
 8005cf6:	d13a      	bne.n	8005d6e <_malloc_r+0xd2>
 8005cf8:	6821      	ldr	r1, [r4, #0]
 8005cfa:	3503      	adds	r5, #3
 8005cfc:	1a6d      	subs	r5, r5, r1
 8005cfe:	f025 0503 	bic.w	r5, r5, #3
 8005d02:	3508      	adds	r5, #8
 8005d04:	2d0c      	cmp	r5, #12
 8005d06:	bf38      	it	cc
 8005d08:	250c      	movcc	r5, #12
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ffa5 	bl	8005c5c <sbrk_aligned>
 8005d12:	3001      	adds	r0, #1
 8005d14:	d02b      	beq.n	8005d6e <_malloc_r+0xd2>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	442b      	add	r3, r5
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	e00e      	b.n	8005d3c <_malloc_r+0xa0>
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	1b52      	subs	r2, r2, r5
 8005d22:	d41e      	bmi.n	8005d62 <_malloc_r+0xc6>
 8005d24:	2a0b      	cmp	r2, #11
 8005d26:	d916      	bls.n	8005d56 <_malloc_r+0xba>
 8005d28:	1961      	adds	r1, r4, r5
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	6025      	str	r5, [r4, #0]
 8005d2e:	bf18      	it	ne
 8005d30:	6059      	strne	r1, [r3, #4]
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	bf08      	it	eq
 8005d36:	6031      	streq	r1, [r6, #0]
 8005d38:	5162      	str	r2, [r4, r5]
 8005d3a:	604b      	str	r3, [r1, #4]
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f104 060b 	add.w	r6, r4, #11
 8005d42:	f000 f865 	bl	8005e10 <__malloc_unlock>
 8005d46:	f026 0607 	bic.w	r6, r6, #7
 8005d4a:	1d23      	adds	r3, r4, #4
 8005d4c:	1af2      	subs	r2, r6, r3
 8005d4e:	d0b6      	beq.n	8005cbe <_malloc_r+0x22>
 8005d50:	1b9b      	subs	r3, r3, r6
 8005d52:	50a3      	str	r3, [r4, r2]
 8005d54:	e7b3      	b.n	8005cbe <_malloc_r+0x22>
 8005d56:	6862      	ldr	r2, [r4, #4]
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	bf0c      	ite	eq
 8005d5c:	6032      	streq	r2, [r6, #0]
 8005d5e:	605a      	strne	r2, [r3, #4]
 8005d60:	e7ec      	b.n	8005d3c <_malloc_r+0xa0>
 8005d62:	4623      	mov	r3, r4
 8005d64:	6864      	ldr	r4, [r4, #4]
 8005d66:	e7b2      	b.n	8005cce <_malloc_r+0x32>
 8005d68:	4634      	mov	r4, r6
 8005d6a:	6876      	ldr	r6, [r6, #4]
 8005d6c:	e7b9      	b.n	8005ce2 <_malloc_r+0x46>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4638      	mov	r0, r7
 8005d74:	f000 f84c 	bl	8005e10 <__malloc_unlock>
 8005d78:	e7a1      	b.n	8005cbe <_malloc_r+0x22>
 8005d7a:	6025      	str	r5, [r4, #0]
 8005d7c:	e7de      	b.n	8005d3c <_malloc_r+0xa0>
 8005d7e:	bf00      	nop
 8005d80:	200002a0 	.word	0x200002a0

08005d84 <_realloc_r>:
 8005d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d88:	4680      	mov	r8, r0
 8005d8a:	4614      	mov	r4, r2
 8005d8c:	460e      	mov	r6, r1
 8005d8e:	b921      	cbnz	r1, 8005d9a <_realloc_r+0x16>
 8005d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d94:	4611      	mov	r1, r2
 8005d96:	f7ff bf81 	b.w	8005c9c <_malloc_r>
 8005d9a:	b92a      	cbnz	r2, 8005da8 <_realloc_r+0x24>
 8005d9c:	f7ff ff12 	bl	8005bc4 <_free_r>
 8005da0:	4625      	mov	r5, r4
 8005da2:	4628      	mov	r0, r5
 8005da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da8:	f000 f838 	bl	8005e1c <_malloc_usable_size_r>
 8005dac:	4284      	cmp	r4, r0
 8005dae:	4607      	mov	r7, r0
 8005db0:	d802      	bhi.n	8005db8 <_realloc_r+0x34>
 8005db2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005db6:	d812      	bhi.n	8005dde <_realloc_r+0x5a>
 8005db8:	4621      	mov	r1, r4
 8005dba:	4640      	mov	r0, r8
 8005dbc:	f7ff ff6e 	bl	8005c9c <_malloc_r>
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d0ed      	beq.n	8005da2 <_realloc_r+0x1e>
 8005dc6:	42bc      	cmp	r4, r7
 8005dc8:	4622      	mov	r2, r4
 8005dca:	4631      	mov	r1, r6
 8005dcc:	bf28      	it	cs
 8005dce:	463a      	movcs	r2, r7
 8005dd0:	f7ff fed0 	bl	8005b74 <memcpy>
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f7ff fef4 	bl	8005bc4 <_free_r>
 8005ddc:	e7e1      	b.n	8005da2 <_realloc_r+0x1e>
 8005dde:	4635      	mov	r5, r6
 8005de0:	e7df      	b.n	8005da2 <_realloc_r+0x1e>
	...

08005de4 <_sbrk_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4d06      	ldr	r5, [pc, #24]	; (8005e00 <_sbrk_r+0x1c>)
 8005de8:	2300      	movs	r3, #0
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	f7fc f8ce 	bl	8001f90 <_sbrk>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_sbrk_r+0x1a>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_sbrk_r+0x1a>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	200002a8 	.word	0x200002a8

08005e04 <__malloc_lock>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__malloc_lock+0x8>)
 8005e06:	f000 b811 	b.w	8005e2c <__retarget_lock_acquire_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	200002ac 	.word	0x200002ac

08005e10 <__malloc_unlock>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__malloc_unlock+0x8>)
 8005e12:	f000 b80c 	b.w	8005e2e <__retarget_lock_release_recursive>
 8005e16:	bf00      	nop
 8005e18:	200002ac 	.word	0x200002ac

08005e1c <_malloc_usable_size_r>:
 8005e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e20:	1f18      	subs	r0, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bfbc      	itt	lt
 8005e26:	580b      	ldrlt	r3, [r1, r0]
 8005e28:	18c0      	addlt	r0, r0, r3
 8005e2a:	4770      	bx	lr

08005e2c <__retarget_lock_acquire_recursive>:
 8005e2c:	4770      	bx	lr

08005e2e <__retarget_lock_release_recursive>:
 8005e2e:	4770      	bx	lr

08005e30 <_init>:
 8005e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e32:	bf00      	nop
 8005e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e36:	bc08      	pop	{r3}
 8005e38:	469e      	mov	lr, r3
 8005e3a:	4770      	bx	lr

08005e3c <_fini>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr
